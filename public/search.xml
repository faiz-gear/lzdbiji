<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器页面的渲染过程</title>
      <link href="/2022/02/22/liu-lan-qi-ye-mian-de-xuan-ran-guo-cheng/"/>
      <url>/2022/02/22/liu-lan-qi-ye-mian-de-xuan-ran-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器页面的渲染过程"><a href="#浏览器页面的渲染过程" class="headerlink" title="浏览器页面的渲染过程"></a>浏览器页面的渲染过程</h1><h3 id="1-输入网址"><a href="#1-输入网址" class="headerlink" title="1.输入网址"></a>1.输入网址</h3><p>当用户在地址栏输入一个搜索关键字时，地址栏会判断当前输入的关键字是搜索内容，还是请求的URL</p><ul><li>如果是搜索内容，地址栏会使用浏览器设置的默认的搜索引擎，生成对应的带搜索关键字的URL地址</li><li>如果输入的内容符合URL规则，那么地址栏根据规则，把这段内容加上协议，合成为完整的URL</li></ul><p>当用户输入关键字并键入回车之后，这意味着当前页面即将要替换成新的页面，不过在这个流程继续之前，浏览器会给当前页面一次执行beforeunload事件，以执行一些数据清理操作</p><h3 id="2-解析URL"><a href="#2-解析URL" class="headerlink" title="2.解析URL"></a>2.解析URL</h3><p>URL主要由协议、主机、端口、路径、查询参数和锚点6部分构成。输入URL之后，浏览器会将这些信息构成一个HTTP请求</p><h3 id="3-检查浏览器缓存"><a href="#3-检查浏览器缓存" class="headerlink" title="3.检查浏览器缓存"></a>3.检查浏览器缓存</h3><p>接下来，网络进程会查找本地缓存是否缓存该URL地址的资源。如果有缓存资源，那么会直接将缓存的资源返回给浏览器进程；如果没有在缓存没有找到缓存资源，那么直接进入到网络请求流程</p><p>优化：1.开启浏览器缓存；2.第三方库公共模块抽取</p><h3 id="4-DNS解析"><a href="#4-DNS解析" class="headerlink" title="4.DNS解析"></a>4.DNS解析</h3><p>在发起http请求之前，浏览器首先要去获得我们想访问网页的IP地址，浏览器会发送一个UDP的包给DNS域名解析服务器，DNS服务器会返回给浏览器对应的IP地址</p><p>优化：1.DNS预解析（大型网站，有多个不同服务器资源的情况下，都可采取DNS预解析，提前解析，减少页面卡顿）</p><h3 id="5-TCP-IP报文"><a href="#5-TCP-IP报文" class="headerlink" title="5.TCP/IP报文"></a>5.TCP/IP报文</h3><p>三次握手</p><h3 id="6-http请求"><a href="#6-http请求" class="headerlink" title="6.http请求"></a>6.http请求</h3><p>连接建立之后，浏览器端会构建请求行、请求头和请求体等信息，并把和该域名想换的Cookie等数据附加到请求头中，然后向服务器发送构建的请求信息</p><h3 id="7-服务器解析请求并返回http报文"><a href="#7-服务器解析请求并返回http报文" class="headerlink" title="7.服务器解析请求并返回http报文"></a>7.服务器解析请求并返回http报文</h3><p>服务器接收到请求信息后，会根据请求信息生成相应数据（包括响应行、响应头和响应体等信息），并发给网络进程。等网络进程接收了响应行和响应头之后，就开始解析响应的内容了</p><h3 id="8-浏览器渲染页面"><a href="#8-浏览器渲染页面" class="headerlink" title="8.浏览器渲染页面"></a>8.浏览器渲染页面</h3><ul><li>DOM树（DOM）<ul><li>字节（Bytes） -&gt; 字符（Characters） &gt; 令牌（token） -&gt; 节点（Nodes）-&gt; 文档对象模型（DOM）</li></ul></li><li>CSS对象模型（CSSOM）</li><li>布局树Layout Tree<ul><li>DOM树与CSSOM树合并后形成渲染树（RenderTree）</li><li>渲染树只包含渲染网页所需的节点</li><li>布局计算每个对象的精确位置和大小</li><li>最后一步是绘制，使用最终渲染树将像素渲染到屏幕上</li></ul></li><li>渲染<ol><li>获取DOM后分割为多个图层</li><li>对每个图层的节点计算样式结果（Recalculate style –样式重计算）</li><li>为每个节点生成图形和位置（Layout –重排，回流）</li><li>将每个节点绘制填充到图层位图中（Paint –重绘）</li><li>图层作为纹理上传至GPU</li><li>组合多个图层到页面上生成最终屏幕图像（Composite Layers– 图层重组）</li></ol></li><li>回流和重绘<ul><li>重绘<ul><li>当页面中元素样式的改变并不影响它在文档流中的位置时（例如color、backgroundColor、visibility等），浏览器会将新样式赋予给元素并重置绘制它，这个过程称为重绘</li></ul></li><li>回流<ul><li>当Render Tree中部分或全部元素的尺寸、结构或某些属性发生改变时，浏览器重新渲染部分或者全部文档的过程称为回流</li></ul></li><li>回流必将引起重绘，而重绘不一定会引起回流</li></ul></li><li>优化：<ol><li>静态资源使用CDN，缩短静态资源请求时间</li><li>将css放在文件头部，JavaScript文件放在底部</li><li>图片优化<ol><li>图片压缩</li><li>图片懒加载</li><li>使用svg响应式图片</li><li>使用webp格式的图片</li></ol></li><li>压缩文件<ol><li>JavaScript：UglifyPlugin</li><li>CSS ：MiniCssExtractPlugin</li><li>HTML：HtmlWebpackPlugin</li></ol></li><li>减少重绘重排</li><li>代码分割（如路由懒加载）</li><li>Tree Shaking<ul><li>Tree Shaking的作用就是，通过程序流分析找出代码中无用的代码并剔除</li></ul></li><li>使用服务端渲染</li></ol></li></ul><h3 id="9-断开连接"><a href="#9-断开连接" class="headerlink" title="9.断开连接"></a>9.断开连接</h3><p>四次分手</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器相关知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建jenkins服务器环境</title>
      <link href="/2022/02/10/da-jian-jenkins/"/>
      <url>/2022/02/10/da-jian-jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="一-购买云服务器"><a href="#一-购买云服务器" class="headerlink" title="一. 购买云服务器"></a>一. 购买云服务器</h2><p>这里我购买的服务器是阿里云的ECS云服务器，系统是CentOS Linux release 8.5.2111，怎么购买自行百度或直接去官网购买</p><h2 id="二-搭建服务器环境"><a href="#二-搭建服务器环境" class="headerlink" title="二. 搭建服务器环境"></a>二. 搭建服务器环境</h2><h3 id="2-1-jenkins自动化部署"><a href="#2-1-jenkins自动化部署" class="headerlink" title="2.1. jenkins自动化部署"></a>2.1. jenkins自动化部署</h3><h4 id="2-1-1-安装Java环境"><a href="#2-1-1-安装Java环境" class="headerlink" title="2.1.1. 安装Java环境"></a>2.1.1. 安装Java环境</h4><p>Jenkins本身是依赖Java的，所以我们需要先安装Java环境：</p><ul><li>这里我安装了Java1.8的环境</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf search java-1.8dnf install java-1.8.0-openjdk.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-2-安装Jenkins"><a href="#2-1-2-安装Jenkins" class="headerlink" title="2.1.2. 安装Jenkins"></a>2.1.2. 安装Jenkins</h4><p>因为Jenkins本身是没有在dnf的软件仓库包中的，所以我们需要连接Jenkins仓库：</p><ul><li>wget是Linux中下载文件的一个工具，-O表示输出到某个文件夹并且命名为什么文件；</li><li>rpm：全称为<strong>The RPM Package Manage</strong>，是Linux下一个软件包管理器；</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget –O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat-stable&#x2F;jenkins.repo# 导入GPG密钥以确保您的软件合法rpm --import https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat&#x2F;jenkins.io.key# 或者rpm --import http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;redhat&#x2F;jenkins-ci.org.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑一下文件/etc/yum.repos.d/jenkins.repo</p><ul><li>可以通过vim编辑</li></ul><pre class="line-numbers language-none"><code class="language-none">[jenkins]name&#x3D;Jenkins-stablebaseurl&#x3D;http:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhatgpgcheck&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装Jenkins</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf install jenkins # --nogpgcheck(可以不加)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动Jenkins的服务：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start jenkinssystemctl status jenkinssystemctl enable jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Jenkins默认使用8080端口提供服务，所以需要加入到安全组中：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glbyeoz6tqj315w0bzmzj.jpg" alt="image-20201204173117359"></p><h4 id="2-1-3-Jenkins用户"><a href="#2-1-3-Jenkins用户" class="headerlink" title="2.1.3. Jenkins用户"></a>2.1.3. Jenkins用户</h4><p>我们后面会访问centos中的某些文件夹，默认Jenkins使用的用户是 <code>jenkins</code>，可能会没有访问权限，所以我们需要修改一下它的用户：</p><p>修改文件的路径：<code>/etc/sysconfig/jenkins</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt46oxg53j60n00aw75302.jpg" alt="image-20210825162827962"></p><p>之后需要重启一下Jenkins：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-4-Jenkins配置"><a href="#2-1-4-Jenkins配置" class="headerlink" title="2.1.4. Jenkins配置"></a>2.1.4. Jenkins配置</h4><p>打开浏览器，输入：<a href="http://8.134.60.235:8080/">http://8.134.60.235:8080/</a></p><ul><li>注意：你输入自己的IP地址</li></ul><p>获取输入管理员密码：</p><ul><li>在下面的地址中 <code>cat /var/lib/jenkins/secrets/initialAdminPassword</code></li></ul><p>![image-20201203173047824](/Users/coderwhy/Library/Application Support/typora-user-images/image-20201203173047824.png)</p><p>可以安装推荐的插件：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glbylb26ouj30fb082js7.jpg" alt="安装推荐的插件"></p><h4 id="2-1-5-Jenkins任务"><a href="#2-1-5-Jenkins任务" class="headerlink" title="2.1.5. Jenkins任务"></a>2.1.5. Jenkins任务</h4><p><strong>新建任务：</strong></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0uinjzej30pa0fet9z.jpg" alt="新建任务"></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0v225vaj30wl0hkn05.jpg" alt="image-20201204185613061"></p><p><strong>配置项目和保留策略：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt3l4fjm6j614p0d2dgl02.jpg" alt="image-20210825160744119"></p><p><strong>源码管理：</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt3lpcvtgj614k0j8jsn02.jpg" alt="image-20210825160818122"></p><p><strong>构建触发器：</strong></p><p>这里的触发器规则是这样的：</p><ul><li>定时字符串从左往右分别是：分 时 日 月 周</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js">#每半小时构建一次<span class="token constant">OR</span>每半小时检查一次远程代码分支，有更新则构建<span class="token constant">H</span><span class="token operator">/</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>#每两小时构建一次<span class="token constant">OR</span>每两小时检查一次远程代码分支，有更新则构建<span class="token constant">H</span> <span class="token constant">H</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>#每天凌晨两点定时构建<span class="token constant">H</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>#每月<span class="token number">15</span>号执行构建<span class="token constant">H</span> <span class="token constant">H</span> <span class="token number">15</span> <span class="token operator">*</span> <span class="token operator">*</span>#工作日，上午<span class="token number">9</span>点整执行<span class="token constant">H</span> <span class="token number">9</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>#每周<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span>，从<span class="token number">8</span><span class="token operator">:</span><span class="token number">30</span>开始，截止<span class="token number">19</span><span class="token operator">:</span><span class="token number">30</span>，每<span class="token number">4</span>小时<span class="token number">30</span>分构建一次<span class="token constant">H</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">8</span><span class="token operator">-</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt419gw6tj614g0agmy402.jpg" alt="触发器"></p><p><strong>构建环境：</strong></p><p>注意：我们需要搭建Node的环境</p><ul><li>第一步：配置Node的环境；</li><li>第二步：安装Node的插件；</li></ul><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0zyecd4j31ar0ecjuz.jpg" alt="image-20201204190055096"></p><p>第一步：配置Node的环境</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt42elwduj614h0elwfq02.jpg" alt="node环境"></p><p>第二步：安装Node的插件</p><ul><li>这里因为我已经安装过了，所以没有搜索到；</li></ul><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glc0yta64bj30r907caam.jpg" alt="image-20201204185949452"></p><p>构建执行的任务：</p><ul><li>查看Node的版本等是否有问题；</li><li>执行 <code>npm install</code> 安装项目的依赖；</li><li>移除原来mall_cms文件的所有内容；</li><li>将打包的dist文件夹内容移动到mall_cms文件夹；</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pwdnode -vnpm -vnpm install npm run buildpwdecho &#39;构建成功&#39;ls# 删除&#x2F;root&#x2F;mall_cms文件夹里所有的内容rm -rf &#x2F;root&#x2F;mall_cms&#x2F;* cp -rf .&#x2F;dist&#x2F;* &#x2F;root&#x2F;mall_cms&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt43sz933j614o0dy0tk02.jpg" alt="执行构建任务"></p><h3 id="2-2-nginx安装和配置"><a href="#2-2-nginx安装和配置" class="headerlink" title="2.2. nginx安装和配置"></a>2.2. nginx安装和配置</h3><h4 id="2-2-1-安装nginx"><a href="#2-2-1-安装nginx" class="headerlink" title="2.2.1. 安装nginx"></a>2.2.1. 安装nginx</h4><p>后续我们部署会使用nginx，所以需要先安装一下nginx：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dnf install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动nginx：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl start nginxsystemctl status nginxsystemctl enable nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-配置nginx"><a href="#2-2-2-配置nginx" class="headerlink" title="2.2.2. 配置nginx"></a>2.2.2. 配置nginx</h4><p>我们这里主要配置nginx的用户和默认访问目录：</p><p>配置用户：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4bwvxc4j60f30453yk02.jpg" alt="image-20210825163329209"></p><p>通过Linux命令创建文件夹和文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir &#x2F;root&#x2F;mall_cmscd &#x2F;root&#x2F;mall_cmstouch index.htmlvi index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置访问目录：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtt4cka6hgj60n00bwgmc02.jpg" alt="image-20210825163406566"></p>]]></content>
      
      
      <categories>
          
          <category> 自动化部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5与ue4通讯</title>
      <link href="/2021/10/18/h5-yu-ue4-tong-xun/"/>
      <url>/2021/10/18/h5-yu-ue4-tong-xun/</url>
      
        <content type="html"><![CDATA[<h2 id="一、技术方案："><a href="#一、技术方案：" class="headerlink" title="一、技术方案："></a>一、技术方案：</h2><p>UE4通过本地路径导入前端打包的项目，引入对应的h5页面，借助UE4的WebBrowser插件实现与h5的双向通信</p><p>注：本文档以纵横项目demo为例，主要介绍前端需要做的相关工作</p><h2 id="二、前端技术栈"><a href="#二、前端技术栈" class="headerlink" title="二、前端技术栈"></a>二、前端技术栈</h2><p>vue3+quasar+axios+vue-router</p><p>注：使用什么技术栈并不影响与ue的交互，但是后续在引入项目中会存在不兼容的问题，后续打包时需要配置进行polyfill处理，详见问题及解决方案1</p><h2 id="三、核心流程"><a href="#三、核心流程" class="headerlink" title="三、核心流程"></a>三、核心流程</h2><!--ue4传数据给h5后续补充--><ol><li><p>h5传数据给UE4</p><ul><li>判断h5中全局环境下是否已经有ue对象（UE4中WebBrowser插件不同版本或者不同插件，可能拿到的是ue4对象，当前项目拿到的是ue对象）</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ue <span class="token operator">=</span> window<span class="token punctuation">.</span>ue<span class="token punctuation">;</span><span class="token keyword">const</span> isHasUE <span class="token operator">=</span> <span class="token keyword">typeof</span> ue <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> ue <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>调用UE中定义的挂载在ue对象中的对应方法</li></ul> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MinimizeApp</span><span class="token punctuation">(</span><span class="token parameter">trackdata</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isHasUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ue initial faild! can't call function!~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 这里的webapi是和ue同事沟通统一的名称 </span>    ue<span class="token punctuation">.</span>webapi    <span class="token comment">// 这里的方法名要全部小写，需要和ue同事进行统一</span>      <span class="token punctuation">.</span><span class="token function">minimizeapp</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>trackdata<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ret是调用ue的返回值。UE4中WebBrowser插件不同版本或者不同插件，可能返回值名称必须要是ReturnValue</span>        <span class="token function">callback</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="四、问题及解决方案"><a href="#四、问题及解决方案" class="headerlink" title="四、问题及解决方案"></a>四、问题及解决方案</h2><ol><li><p>UE4加载web项目显示空白问题</p><ul><li><p>问题产生原因：UE4中的Chromium内核不支持ES module</p></li><li><p>UE4自带的WebBrowser使用CEF3（使用Chromium内核）, 对应的内核版本信息如下：</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">CEF 3.3071.1611.g4a19305Chromium    59.0.3071.15OS  WindowsWebKit  537.36 (@b3f9fb3b948d9304d587a127c3e4f47b2ad78927)JavaScript  5.9.211.4Flash   User Agent  Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Digital&#x2F;++UE4+Release-4.26-CL-15973114 UnrealEngine&#x2F;4.26.2-15973114+++UE4+Release-4.26 Chrome&#x2F;59.0.3071.15 Safari&#x2F;537.36Command Line    &quot;D:&#x2F;Program Files&#x2F;Epic Games&#x2F;UE_4.26&#x2F;Engine&#x2F;Binaries&#x2F;Win64&#x2F;UE4Editor.exe&quot; --browser-subprocess-path&#x3D;&quot;D:&#x2F;Program Files&#x2F;Epic Games&#x2F;UE_4.26&#x2F;Engine&#x2F;Binaries&#x2F;Win64&#x2F;UnrealCEFSubProcess.exe&quot; --no-sandbox --product-version&#x3D;&quot;Digital&#x2F;++UE4+Release-4.26-CL-15973114 UnrealEngine&#x2F;4.26.2-15973114+++UE4+Release-4.26 Chrome&#x2F;59.0.3071.15&quot; --lang&#x3D;en --log-file&#x3D;D:&#x2F;Projects&#x2F;digital-factory&#x2F;Digital&#x2F;Saved&#x2F;Logs&#x2F;cef3.log --log-severity&#x3D;warning --resources-dir-path&#x3D;&quot;D:&#x2F;Program Files&#x2F;Epic Games&#x2F;UE_4.26&#x2F;Engine&#x2F;Binaries&#x2F;ThirdParty&#x2F;CEF3&#x2F;Win64&#x2F;Resources&quot; --locales-dir-path&#x3D;&quot;D:&#x2F;Program Files&#x2F;Epic Games&#x2F;UE_4.26&#x2F;Engine&#x2F;Binaries&#x2F;ThirdParty&#x2F;CEF3&#x2F;Win64&#x2F;Resources&#x2F;locales&quot; --enable-gpu --enable-gpu-compositing --enable-begin-frame-schedulingModule Path D:\Program Files\Epic Games\UE_4.26\Engine\Binaries\ThirdParty\CEF3\Win64\libcef.dllCache Path  D:&#x2F;***&#x2F;Saved&#x2F;webcache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>通过查询该浏览器版本支持的对应功能（查询网站：<a href="http://html5test.com/">查询浏览器支持的语法、API等</a>)发现，该浏览器不支持ES module语法，需要对项目进行polyfill打补丁，让UE4支持项目中一些新的API。</p></li><li><p><img src="/Users/luyao/Desktop/wattman/zongheng/cef3-htm5test.png" alt="cef3-htm5test"></p></li><li><p>解决方案：vue-cli4中会默认这样它会根据源代码中出现的语言特性自动检测需要的 polyfill。这确保了最终包里 polyfill 数量的最小化。然而，这也意味着<strong>如果其中一个依赖需要特殊的 polyfill，默认情况下 Babel 无法将其检测出来。</strong>使用vue-cli4中的transpileDependencies选项，对可能有造成不兼容问题的依赖进行polyfill。如项目中对quasar进行转换</p></li></ul> <pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">transpileDependencies: [&#39;quasar&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>h5给ue4传输数组数据或对象失败问题</p><ul><li>问题产生原因：与浏览器与后端进行数据传输类似，h5与ue进行数据传输也需要对数据进行序列化。由于平时使用axios进行网络数据请求，其内部对传输的数据就已经进行了序列化的操作，此处在与u4通信时，并不是通过axios，遗忘了对数据进行序列化的操作</li><li>解决方案：使用浏览器的API对数据进行序列化操作后传给ue：JSON.stringify()</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> h5与ue4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> h5与ue4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svg相关笔记</title>
      <link href="/2021/09/22/svg/"/>
      <url>/2021/09/22/svg/</url>
      
        <content type="html"><![CDATA[<h2 id="一、入门指南"><a href="#一、入门指南" class="headerlink" title="一、入门指南"></a>一、入门指南</h2><h3 id="1-图形系统"><a href="#1-图形系统" class="headerlink" title="1. 图形系统"></a>1. 图形系统</h3><p>计算机中描述图形信息的两大图形系统：栅格图形和矢量图形。栅格图形中图形被表示为图片元素或者像素的长方形数组。矢量图形中图形被描述为一系列几何形状，通过矢量图形阅读器在指定的坐标集上绘制形状。</p><h3 id="2-SVG-Scalable-Vector-Graphics"><a href="#2-SVG-Scalable-Vector-Graphics" class="headerlink" title="2. SVG(Scalable Vector Graphics)"></a>2. SVG(Scalable Vector Graphics)</h3><p>SVG<code>是一种</code>XML<code>应用，用来表示矢量图形。所有的图形有关信息被存储为纯文本，具有XML的开放性、可移植性和可交互性。当前稳定的</code>XML<code>和</code>SVG<code>版本都为</code>1.1</p><p>SVG文档结构是标准的 <code>XML</code> 文档，根元素 <code>svg</code> 定义图形的大小，根元素中包含各种的形状元素。<code>SVG</code> 允许使用单独的属性指定元素的样式。</p><p><code>SVG</code> 使用 <code>g</code> 元素对图形进行分组，使用 <code>use</code> 元素实现元素的复用。</p><h2 id="二、在网页中使用"><a href="#二、在网页中使用" class="headerlink" title="二、在网页中使用"></a>二、在网页中使用</h2><h3 id="1-将SVG作为图像"><a href="#1-将SVG作为图像" class="headerlink" title="1. 将SVG作为图像"></a>1. 将SVG作为图像</h3><p>将 <code>svg</code> 作为图像包含在HTML标记的 <code>img</code> 元素内，但是这样有一定的局限性：</p><p><strong><code>SVG</code>转为栅格图像时与主页面分离，并且无法在两者之间通信( <code>SVG</code> 渲染过程与主页面独立)。主页面上的样式对 <code>SVG</code> 无效，运行在主页面上的脚本无法感知或者修改 <code>SVG</code> 文档结构。</strong></p><p>在 <code>CSS</code> 中包含 <code>SVG</code>，最常用的是 <code>background-image</code> 属性，应该避免 <code>SVG</code> 元素文件太大。</p><h3 id="2-将SVG作为应用程序"><a href="#2-将SVG作为应用程序" class="headerlink" title="2. 将SVG作为应用程序"></a>2. 将SVG作为应用程序</h3><p>使用 <code>object</code> 元素将 <code>SVG</code> 嵌入 <code>HTML</code> 文档中，<code>object</code>元素的 <code>type</code> 属性表示要嵌入的文档类型，对用 <code>SVG</code> 应该是<code>type=&quot;image/svg+xml&quot;</code>。<code>object</code> 元素必须有起始标签和结束标签，这两个标签之间的内容为对象数据本身不能被渲染时显示。</p><h2 id="三、坐标系统"><a href="#三、坐标系统" class="headerlink" title="三、坐标系统"></a>三、坐标系统</h2><h3 id="1-视口"><a href="#1-视口" class="headerlink" title="1. 视口"></a>1. 视口</h3><p>视口是指文档打算使用的画布区域。在 <code>svg</code> 元素上使用 <code>width</code> 和 <code>height</code> 属性确定视口的大小，属性值可以仅仅是为数字也可以为带单位的数字(单位可以为<code>em</code>、<code>ex</code>、<code>px</code>、<code>pt</code>、<code>pc</code>、<code>cm</code>、<code>mm</code> 和 <code>in</code>)也可以为百分比。</p><h3 id="2-默认用户坐标"><a href="#2-默认用户坐标" class="headerlink" title="2. 默认用户坐标"></a>2. 默认用户坐标</h3><p><code>SVG</code> 阅读器会设置一个坐标系统，即原点 <code>(0,0)</code> 位于视口的左上角，<code>x</code> 向右递增，<code>y</code> 向下递增。这个坐标系统是一个纯粹的几何系统，点没有大小，网格线被认为是无限细。</p><p>在 <code>SVG</code> 中指定单位并不会影响其他元素中给定单位的坐标，也就是说 <code>SVG</code> 文档中各个元素的单位可以不统一。</p><h3 id="3-指定用户坐标"><a href="#3-指定用户坐标" class="headerlink" title="3. 指定用户坐标"></a>3. 指定用户坐标</h3><p>摒弃阅读器设置的默认用户坐标，可以自己为视口设置一个用户坐标。通过在 <code>svg</code> 元素上设置 <code>viewBox</code> 属性。</p><p><code>viewBox</code> 属性由 <code>4</code> 个数值组成，分别代表要叠加在视口上的最小 <code>x</code>、最小 <code>y</code>，宽度、高度。</p><p>既然可以对 <code>svg</code> 自定义用户坐标，那么肯定要解决 <code>svg</code> 视口长宽比例和 <code>viewBox</code> 定义的长宽比例不同的问题以及如何对齐问题。这个时候就需要 <code>preserveAspectRatio</code> 属性了。</p><p>如果 <code>viewBox</code> 的长宽比例与视口的长宽比例不同，那么 <code>svg</code> 可以有以下三种选择：</p><ul><li>按较小的尺寸等比例缩放图形，使图形完全填充视口</li><li>按较大的尺寸等比例缩放图形，病裁减掉超出视口的部分</li><li>拉伸和压缩绘图以使其恰好填充视口</li></ul><pre class="line-numbers language-none"><code class="language-none">preserveAspectRatio&#96; 属性允许指定被缩放的图形相对视口的对齐方式,格式为 &#96;preserveAspectRatio &#x3D; &quot;alignment[meet|slice]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认值为 <code>&quot;xMidYMid meet&quot;</code></p><p><code>alignment</code>指定轴和位置，<code>x</code> 和 <code>y</code> 方向都有 <code>min</code>, <code>mid</code>, <code>max</code> 三种方式，分别表示 <code>x</code> 和 <code>y</code> 方向的对齐方式，对齐方式由 <code>x</code> 和 <code>y</code> 组合指定，共 <code>9</code> 中方式，也就是 <code>alignment</code> 共有如下 <code>9</code> 个取值：</p><table><thead><tr><th>y\x</th><th>xMin</th><th>xMid</th><th>xMax</th></tr></thead><tbody><tr><td><strong>yMin</strong></td><td>xMinYMin</td><td>xMidYMin</td><td>xMaxYMin</td></tr><tr><td><strong>yMid</strong></td><td>xMinYMid</td><td>xMidYMid</td><td>xMaxYMid</td></tr><tr><td><strong>yMax</strong></td><td>xMinYMax</td><td>xMidYMax</td><td>xMaxYMax</td></tr></tbody></table><p><code>meet</code> 说明符在图形超出视口时候会对图形适当缩小调整适配可用的空间</p><p><code>slice</code> 说明符直接裁剪超出视口的部分</p><p>除了上述操作之外，还可以指定 <code>preserveAspectRatio=&quot;none&quot;</code>，用于在 <code>viewBox</code> 和视口宽高比不同时缩放图像，此时图像不会被等比例缩放，会被拉伸、挤压、变形。</p><h3 id="4-嵌套坐标系统"><a href="#4-嵌套坐标系统" class="headerlink" title="4. 嵌套坐标系统"></a>4. 嵌套坐标系统</h3><p>可以将另一个 <code>svg</code> 元素插入到文档中来建立一个新的视口和坐标系统，也就是说 <code>svg</code> 中可以嵌套另一个 <code>svg</code>，每个 <code>svg</code> 都有自己独立的视口和坐标系统</p><h2 id="四、基本形状"><a href="#四、基本形状" class="headerlink" title="四、基本形状"></a>四、基本形状</h2><h3 id="1-线段"><a href="#1-线段" class="headerlink" title="1. 线段"></a>1. 线段</h3><p><code>line</code> 元素，使用 <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> 属性指定线段的起止点坐标。有如下特性:</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><code>stroke-width</code></td><td>笔画宽度，坐标网格线位于笔画的正中间，可以使用 <code>css</code> 的 <code>shape-rendering</code> 值来控制反锯齿特性</td></tr><tr><td><code>stroke</code></td><td>笔画颜色</td></tr><tr><td><code>stroke-opacity</code></td><td>线条的不透明度</td></tr><tr><td><code>stroke-dasharray</code></td><td>虚线，由一系列数字组成，数字个数为偶数(负责会自动重复一遍使其为偶数),表示线长-间隙-线长-间隙…</td></tr></tbody></table><h3 id="2-矩形"><a href="#2-矩形" class="headerlink" title="2. 矩形"></a>2. 矩形</h3><p><code>rect</code>元素，使用<code>x</code>,<code>y</code>,<code>width</code>,<code>height</code>表示一个矩形</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><code>fill</code></td><td>填充颜色</td></tr><tr><td><code>fill-opacity</code></td><td>填充不透明度</td></tr><tr><td><code>stroke</code></td><td>边框颜色</td></tr><tr><td><code>stroke-width</code></td><td>边框宽度，边框是骑在矩形边界上的，一半在矩形外，一半在矩形内</td></tr><tr><td><code>rx</code>/<code>ry</code></td><td>圆角矩形，最大值为矩形宽/高的一半，如果只指定了一个，则认为两个都为相同的值</td></tr></tbody></table><h3 id="3-圆和椭圆"><a href="#3-圆和椭圆" class="headerlink" title="3. 圆和椭圆"></a>3. 圆和椭圆</h3><p><code>circle</code> 元素表示圆,由 <code>cx</code>,<code>cy</code>,<code>r</code> 属性界定 <code>ellipse</code> 元素表示椭圆,由 <code>cx</code>,<code>cy</code>,<code>rx</code>,<code>ry</code> 界定</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><code>fill</code></td><td>填充颜色</td></tr><tr><td><code>fill-opacity</code></td><td>填充不透明度</td></tr><tr><td><code>stroke</code></td><td>边框颜色</td></tr><tr><td><code>stroke-width</code></td><td>边框宽度，边框是骑在圆的边界上的，一半在圆/椭圆外，一半在圆/椭圆内</td></tr></tbody></table><h3 id="4-多边形"><a href="#4-多边形" class="headerlink" title="4. 多边形"></a>4. 多边形</h3><p><code>polygon</code> 元素指定一个多边形,由 <code>points</code> 属性指定的一系列坐标点界定，会自动封闭</p><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><code>fill</code></td><td>填充颜色</td></tr><tr><td><code>fill-opacity</code></td><td>填充不透明度</td></tr><tr><td><code>stroke</code></td><td>边框颜色</td></tr><tr><td><code>stroke-width</code></td><td>边框宽度</td></tr><tr><td><code>fill-rule</code></td><td>填充规则，如果多边形的边有交叉时，需要指定，可以取 <code>mozero</code>(默认)和 <code>evenodd</code> 两个值。</td></tr></tbody></table><p><code>fill-rule</code> 值为 <code>nonzero</code> 时的原理:判断一个点是在多边形内部还是外部时，从这个点画一条到无穷远的射线，然后数这个线和多边形的边有多少次交叉。如果交叉的边线是从右往左画，则总数加 <code>1</code>，如果是从左往右则总数减 <code>1</code>. 如果最后总数为 <code>0</code> 则认为改点在图形外部，否则在内部。</p><p><code>fill-rule</code> 值为 <code>evenodd</code> 时只数射线与多边形边的交叉次数，如果为奇数则认为在多边形内部，否则认为在多边形外部。</p><h3 id="5-折线"><a href="#5-折线" class="headerlink" title="5. 折线"></a>5. 折线</h3><p><code>polyline</code> 元素表示一个折线，使用 <code>points</code> 属性指定一系列点，不自动封闭图形。</p><h3 id="6-特性总结"><a href="#6-特性总结" class="headerlink" title="6. 特性总结"></a>6. 特性总结</h3><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td><code>stroke</code></td><td>笔画颜色</td></tr><tr><td><code>stroke-width</code></td><td>笔画宽度</td></tr><tr><td><code>stroke-opacity</code></td><td>笔画不透明度</td></tr><tr><td><code>stroke-dasharray</code></td><td>虚线笔画</td></tr><tr><td><code>stroke-linecap</code></td><td>笔画头的形状 <code>butt</code>(默认),<code>round</code>,<code>square</code></td></tr><tr><td><code>stroke-linejoin</code></td><td>图形棱角，有<code>miter</code>(默认),<code>round</code>和<code>bevel</code>三个取值</td></tr><tr><td><code>stroke-miterlimit</code></td><td>相交处显示宽度与线宽的最大比例，默认为<code>4</code></td></tr><tr><td><code>fill</code></td><td>填充颜色 默认<code>black</code></td></tr><tr><td><code>fill-opacity</code></td><td>填充不透明度</td></tr><tr><td><code>fill-rule</code></td><td>填充规则</td></tr></tbody></table><h2 id="五、文档结构"><a href="#五、文档结构" class="headerlink" title="五、文档结构"></a>五、文档结构</h2><h3 id="1-结构和表现"><a href="#1-结构和表现" class="headerlink" title="1. 结构和表现"></a>1. 结构和表现</h3><p><code>SVG</code> 允许文档表现和文档结构分离，<code>SVG</code> 支持四种方式指定表现信息：内联样式、内部样式表、外部样式表以及表现属性</p><table><thead><tr><th>表现方式</th><th>说明</th></tr></thead><tbody><tr><td>内联样式</td><td>元素内部使用 <code>style</code> 属性</td></tr><tr><td>内部样式表</td><td>内部样式定义在 <code>defs</code> 元素内部</td></tr><tr><td>外部样式表</td><td>与 <code>html</code> 类似，将样式定义在 <code>css</code> 文件中，使用选择器来设置相应的元素样式</td></tr><tr><td>表现属性</td><td><code>SVG</code> 允许以属性的形式指定表现样式，但是<strong>表现属性的优先级最低</strong>，如果以其他三种形式指定了相同的样式属性，则将覆盖通过表现属性指定的样式</td></tr></tbody></table><p>内部样式表示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;svg width="200px" height="200px" xmlns="http://www.w3.org/2000/svg>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token cdata">&lt;![CDATA[            circle&#123;                fill:#ccc            &#125;        ]]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分组和引用"><a href="#2-分组和引用" class="headerlink" title="2. 分组和引用"></a>2. 分组和引用</h3><p><code>g</code> 元素用来将其子元素作为一个组合，可以使文档结构更清晰。除此之外，在g标签中指定的所有样式会应用于组合内的所有子元素，可以不用在所有子元素上指定属性。</p><p><code>use</code> 元素用来复用图形中重复出现的元素，需要为 <code>use</code> 标签的 <code>xlink:href</code> 指定 <code>URI</code> 来引用指定的图形元素。同时还要指定<code>x</code>和<code>y</code>属性以表示组合应该移动到哪个位置。<code>use</code>元素并不限制只能使用同一个文件内的对象，<code>xlink:href</code>属性可以指定任何有效的文件或<code>URI</code>。</p><p><code>defs</code>元素用来定义复用的元素，但是定义在<code>defs</code>内的元素并不会被显示，而是作为模板供其他地方使用。</p><p><code>symbol</code>元素与g元素不同，<code>symbol</code>永远不会被显示，也可以用来指定被后续使用的元素，<code>symbol</code>元素可以指定 <code>viewBox</code> 和<code>preserveAspectRatio</code> 属性。在引用时通过为 <code>use</code> 元素指定 <code>width</code> 和 <code>height</code> 属性就可以让 <code>symbol</code> 元素适配视口大小。</p><p><code>image</code> 可以用来包含一个完整的 <code>SVG</code> 或栅格文件。如果包含一个 <code>SVG</code> 文件，则视口会基于引用的文件的 <code>x</code>,<code>y</code>,<code>width</code>,<code>height</code> 属性来建立。如果包含栅格文件则会被缩放以适配该属性指定的矩形。</p><p><code>SVG</code>规范要求 <code>SVG</code> 阅读器支持 <code>JPEG</code> 和 <code>PNG</code> 两种栅格文件。</p><h2 id="六、坐标系统变换"><a href="#六、坐标系统变换" class="headerlink" title="六、坐标系统变换"></a>六、坐标系统变换</h2><h3 id="1-translate变换"><a href="#1-translate变换" class="headerlink" title="1. translate变换"></a>1. translate变换</h3><p><code>translate</code> 变换用来对用户坐标进行平移，通过制定 <code>transform</code> 属性值来设置: <code>transform = &quot;translate(x,y)&quot;</code>。</p><p><code>translate</code> 工作原理:首先获取整个网络，然后将其移动到画布的新位置而不是移动所在的元素，也就是说移动的是整个坐标系统而不是元素本身。看似比移动元素复杂，其实在使用其他一系列变换时，这种移动整个坐标系的方法从数学和概念上讲，更方便。</p><h3 id="2-scale变换"><a href="#2-scale变换" class="headerlink" title="2. scale变换"></a>2. scale变换</h3><p>缩放坐标系统。<code>transform = &quot;scale(value)&quot;</code> 或者 <code>transform=&quot;scale(x-value,y-value)&quot;</code>。</p><p>仅仅使用 <code>scale(n)</code> 变换时，网格系统的原点位置并没有变化，只是每个用户坐标都变成了原来的 <code>n</code> 倍，也就是网格变大了，因此线也会变粗(用户单位并没有变)。</p><p><em>技巧：如果从其他系统传输数据到 <code>SVG</code>，则可能必须处理使用笛卡尔坐标表示的矢量图形，在笛卡尔坐标系统中，原点位于左下角，<code>y</code>向上递增，<code>x</code>向右递增。而 <code>SVG</code> 坐标原点位于左上角，此时使用 <code>scale(1,-1)</code> 就可以完成两者之间的转换。</em></p><p><strong>缩放变换永远不会改变图形对象的网格坐标或者笔画宽度，仅仅改变对应画布上的坐标系统网格的大小。</strong></p><h3 id="3-rotate变换"><a href="#3-rotate变换" class="headerlink" title="3. rotate变换"></a>3. rotate变换</h3><p>根据指定的角度旋转坐标系统，默认的坐标系统中，角度的测量顺时针增加，<code>0</code> 度为 <code>3</code> 点钟方向。</p><p>注意，除非另行指定，否则旋转以原点为中心。 此时可以通过平移+旋转的方式来指定旋转中心： <code>translate(centerX,centerY) rotate(angle) translate(-centerX,-centerY)</code></p><p>但是有个更简单的方式：<code>rotate(angle,centerX,centerY)</code></p><h3 id="4-围绕中心点缩放"><a href="#4-围绕中心点缩放" class="headerlink" title="4. 围绕中心点缩放"></a>4. 围绕中心点缩放</h3><p>上面提到，缩放默认是以原点为基准的，这显然不能满足需求，那么可以通过如下方式指定缩放中心：</p><pre class="line-numbers language-none"><code class="language-none">translate(-centerX*(factor-1),-centerY*(factor-1)) scale(factor)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-skewX和skewY变换"><a href="#5-skewX和skewY变换" class="headerlink" title="5. skewX和skewY变换"></a>5. skewX和skewY变换</h3><p>这两个变换用来倾斜某个轴，一般形式为 <code>skewX(angle),skewY(angle)</code>。这样的结果就是使得 <code>x</code> 轴和 <code>y</code> 轴不再垂直。</p><h3 id="6-矩阵变换"><a href="#6-矩阵变换" class="headerlink" title="6. 矩阵变换"></a>6. 矩阵变换</h3><p>计算机图形学中坐标变换都通过矩阵来实现，除上述变换方法之外，还可以直接为变换指定变换矩阵，变换矩阵为 <code>matrix(a,b,c,d,e,f)</code>，此时指定的变换矩阵为:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">a  c  eb  d  f0  0  1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="七、路径"><a href="#七、路径" class="headerlink" title="七、路径"></a>七、路径</h2><h3 id="1-path命令"><a href="#1-path命令" class="headerlink" title="1. path命令"></a>1. path命令</h3><p><code>SVG</code> 中所有基本形状都是 <code>path</code> 的简写形式，但是建议使用简写形式，因为这样可以使 <code>SVG</code> 文档更可读。</p><p><code>path</code> 元素更通用，可以通过制定一系列相互连接的线、弧、曲线来绘制任意形状的轮廓，这些轮廓也可以填充或者绘制轮廓线，也可以用来定义裁剪区域或蒙版。</p><p>下表为 <code>path</code> 命令总结，其中大写表示绝对坐标，小写表示相对坐标：</p><table><thead><tr><th>命令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>M</code> <code>m</code></td><td><code>x y</code></td><td>移动画笔到制定坐标</td></tr><tr><td><code>L</code> <code>l</code></td><td><code>x y</code></td><td>绘制一条到给定坐标的线</td></tr><tr><td><code>H</code> <code>h</code></td><td><code>x</code></td><td>绘制一条到给定 <code>x</code> 坐标的横线</td></tr><tr><td><code>V</code> <code>v</code></td><td><code>y</code></td><td>绘制一条到给定<code>y</code>坐标的垂线</td></tr><tr><td><code>A</code> <code>a</code></td><td><code>rx ry x-axis-rotation large-arc sweep x y</code></td><td>圆弧曲线命令有7个参数，依次表示<code>x</code>方向半径、<code>y</code>方向半径、旋转角度、大圆标识、顺逆时针标识、目标点<code>x</code>、目标点<code>y</code>。大圆标识和顺逆时针以<code>0</code>和<code>1</code>表示。<code>0</code>表示小圆、逆时针</td></tr><tr><td><code>Q</code> <code>q</code></td><td><code>x1 y1 x y</code></td><td>绘制一条从当前点到<code>x, y</code>控制点为<code>x1, y1</code>的二次贝塞尔曲线</td></tr><tr><td><code>T</code> <code>t</code></td><td><code>x y</code></td><td>绘制一条从当前点到<code>x</code>,<code>y</code>的光滑二次贝塞尔曲线，控制点为前一个<code>Q</code>命令的控制点的中心对称点，如果没有前一条则已当前点为控制点。</td></tr><tr><td><code>C</code> <code>c</code></td><td><code>x1 y1 x2 y2 x y</code></td><td>绘制一条从当前点到 <code>x</code>,<code>y</code>控制点为<code>x1,y1</code> <code>x2,y2</code>的三次贝塞尔曲线</td></tr><tr><td><code>S</code> <code>s</code></td><td><code>x2 y2 x y</code></td><td>绘制一条从当前点到<code>x,y</code>的光滑三次贝塞尔曲线。第一个控制点为前一个<code>C</code>命令的第二个控制点的中心对称点，如果没有前一条曲线，则第一个控制点为当前的点。</td></tr></tbody></table><p>路径的填充同样可以使用 <code>fill-rule</code> 属性指定填充规则，如果需要填充一个中空的形状，则只需要注意外侧路径顺逆时针方向和内侧空心区域顺逆时针方向即可。</p><h2 id="八、渐变"><a href="#八、渐变" class="headerlink" title="八、渐变"></a>八、渐变</h2><h3 id="1-线性渐变"><a href="#1-线性渐变" class="headerlink" title="1. 线性渐变"></a>1. 线性渐变</h3><p>线性渐变是一系列颜色沿着一条直线过渡，在特定的位置指定想要的颜色，被称为渐变点。渐变点是渐变结构的一部分，颜色是表现的一部分。</p><p>线性渐变使用<code>linearGradient</code>元素表示：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>linearGradient</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>linear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stop</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop-color:#ffcc00;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stop</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop-color:#0099cc;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>linearGradient</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill:url(#linear);stroke:black;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.d3js.org.cn/images/doc/svg/8.4.jpg" alt="img"></p><p><code>stop</code>元素有两个必要属性：<code>offset</code>和<code>stop-color</code>。<code>offset</code>属性用来指定在哪个点的颜色应该等于<code>stop-color</code>。<code>offset</code>的取值范围0%-100%。</p><p><code>stop</code>元素的属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>offset</code></td><td>必需，取值范围 <code>0%-100%</code></td></tr><tr><td><code>stop-color</code></td><td>必需，对应 <code>offset</code> 位置点的颜色</td></tr><tr><td><code>stop-opacity</code></td><td>对应 <code>offset</code> 位置点的不透明度</td></tr></tbody></table><p><code>linearGradient</code>元素属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>x1</code>,<code>y1</code></td><td>渐变的起点位置，使用百分比表示，默认的渐变方向是从左到右</td></tr><tr><td><code>x2</code>,<code>y2</code></td><td>渐变的终点位置，使用百分比表示</td></tr><tr><td><code>spreadMethod</code></td><td>如果设置的<code>offset</code>不能覆盖整个对象，该怎么填充。<code>pad</code>: 起点或终点颜色会扩展到对象边缘。<code>repeat</code>: 渐变重复起点到终点的过程。<code>reflect</code>: 渐变按终点-起点-终点的排列重复。</td></tr></tbody></table><h3 id="2-径向渐变"><a href="#2-径向渐变" class="headerlink" title="2. 径向渐变"></a>2. 径向渐变</h3><p>径向渐变的每个渐变点是一个圆形路径，从中心点向外扩散。设置方式与线性渐变大致相同。如果填充对象边界框不是正方形的，则过渡路径会变成椭圆来匹配边界框的长宽比。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>radialGradient</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radial<span class="token punctuation">"</span></span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stop</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0%<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop-color:#f00;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stop</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop-color:#0f0;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stop</span> <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stop-color:#00f;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stop</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>radialGradient</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill:url(#radial);stroke:black;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.d3js.org.cn/images/doc/svg/8.5.jpg" alt="img"></p><p><code>radialGradient</code>元素属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>cx</code>,<code>cy</code>,<code>r</code></td><td>定义渐变的范围，测量半径的单位是对象的宽高均值，而不是对角线，默认都为<code>50%</code></td></tr><tr><td><code>fx</code>,<code>fy</code></td><td><code>0%</code>点所处的圆路径的圆心，默认和<code>cx</code>,<code>cy</code>一样</td></tr><tr><td><code>spreadMethod</code></td><td><code>pad</code>,<code>repeat</code>,<code>reflect</code> 三个值，用来解决绘制范围没有到达图形边缘的情况。</td></tr></tbody></table><h2 id="九、文本"><a href="#九、文本" class="headerlink" title="九、文本"></a>九、文本</h2><h3 id="1-相关术语"><a href="#1-相关术语" class="headerlink" title="1. 相关术语"></a>1. 相关术语</h3><table><thead><tr><th>术语</th><th>说明</th></tr></thead><tbody><tr><td>字符</td><td><code>XML</code>中，字符是指带有一个数字值得一个或多个字节，数字值与<code>Unidode</code>标准对应</td></tr><tr><td>符号</td><td>字符的视觉呈现。每个字符可以有多种视觉呈现</td></tr><tr><td>字体</td><td>代表某个字符集合的一组符号</td></tr><tr><td>基线</td><td>字体中所有符号以基线对齐</td></tr><tr><td>上坡度</td><td>基线到字体中最高字符的顶部距离</td></tr><tr><td>下坡度</td><td>基线到最深字符底部的距离</td></tr><tr><td>大写字母高度、<code>x</code>高度</td><td>大写字母高度是指基线上大写字母的高度，<code>x</code>高度是基线到小写字母<code>x</code>顶部的高度</td></tr></tbody></table><h3 id="2-文本元素的基本属性"><a href="#2-文本元素的基本属性" class="headerlink" title="2. 文本元素的基本属性"></a>2. 文本元素的基本属性</h3><p><code>text</code> 元素以指定的x和y值作为元素内容第一个字符的基线位置，默认样式黑色填充、没有轮廓。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>font-family</code></td><td>以空格分割的一系列字体名称或通用字体名称</td></tr><tr><td><code>font-size</code></td><td>如果有多行文本，则 <code>font-size</code> 为平行的两条基线的距离</td></tr><tr><td><code>font-weight</code></td><td>两个值：<code>bold</code>(粗体)和<code>nromal</code>(默认)</td></tr><tr><td><code>font-style</code></td><td>常用的两个值:<code>italic</code>(斜体)和<code>normal</code></td></tr><tr><td><code>text-decoration</code></td><td>可能的值:<code>none</code>,<code>underline</code>(下划线),<code>overline</code>(上划线),<code>line-through</code>(删除线)</td></tr><tr><td><code>word-spacing</code></td><td>单词之间的距离</td></tr><tr><td><code>letter-spacing</code></td><td>字母之间的间距</td></tr><tr><td><code>text-anchor</code></td><td>对齐方式：<code>start</code>,<code>middle</code>,<code>end</code></td></tr><tr><td><code>textLength</code></td><td>设置文本的长度</td></tr><tr><td><code>lengthAdjust</code></td><td>在指定了<code>textLength</code>时，可以通过<code>lengthAdjust</code>属性设置字符的调整方式，值为 <code>spacing</code>(默认)时,只调整字符的间距。当值为<code>spacingAndGlyphs</code>时，同时调整字符间距和字符本身的大小</td></tr></tbody></table><h3 id="3-tspan元素"><a href="#3-tspan元素" class="headerlink" title="3. tspan元素"></a>3. tspan元素</h3><p><code>text</code> 元素无法对文本进行换行操作，如果需要分行显示文本，则需要使用在text元素里嵌入<code>tspan</code> 元素。<code>tspan</code> 元素与<code>html</code>的<code>span</code>元素类似，可以嵌套在文本内容中，并可以单独改变其内部文本内容的样式。</p><p><code>tspan</code>元素除大小，颜色等表现样式之外，还可以设置以下属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>dx</code>,<code>dy</code></td><td><code>x</code>和<code>y</code>方向的偏移</td></tr><tr><td><code>x</code>,<code>y</code></td><td>对<code>tspan</code>进行绝对定位</td></tr><tr><td><code>rotate</code></td><td>旋转字符，可以同时设置多个值，这些值会依次作用在<code>tspan</code>包裹的字母上</td></tr><tr><td><code>baseline-shift</code></td><td>与<code>dy</code>属性设置上下标相比，这个属性更方便，当为<code>super</code>时，会上标。<code>sub</code> 时为下标。仅仅在所在的<code>tspan</code>内有效</td></tr></tbody></table><h3 id="4-纵向文本"><a href="#4-纵向文本" class="headerlink" title="4. 纵向文本"></a>4. 纵向文本</h3><p>文本一般从左到右排列，如果需要上下排列，则需要使用<code>writing-mode</code>属性。</p><p>设置<code>writing-mode</code>属性值为<code>tb</code>(top to bottom)，可以将文本上下排列。</p><h2 id="5-文本路径"><a href="#5-文本路径" class="headerlink" title="5. 文本路径"></a>5. 文本路径</h2><p>如果要使得文本沿着某条路径排列，则需要使用<code>textPath</code>元素。需要将文本放在<code>textPath</code>元素内部，然后使用<code>textPath</code>元素的<code>xlink:href</code>属性引用一个定义好的<code>path</code>元素。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill:none;stroke:black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">transform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>translate(10,50)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill:none;stroke:black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textPath</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#path<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">transform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>translate(10,100)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fill:none;stroke:black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textPath</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#path<span class="token punctuation">"</span></span> <span class="token attr-name">startOffset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token attr-name">text-anchor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.d3js.org.cn/images/doc/svg/8.6.jpg" alt="img"></p><p><code>startOffset</code>属性用来指定文本的起点，当设置为<code>50%</code>，并且设置<code>text-anchor</code>为<code>middle</code>时，文本会被定为在<code>path</code>的中间。</p>]]></content>
      
      
      <categories>
          
          <category> 前端可视化库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react学习笔记</title>
      <link href="/2021/08/25/react/"/>
      <url>/2021/08/25/react/</url>
      
        <content type="html"><![CDATA[<h2 id="一、react的基本使用"><a href="#一、react的基本使用" class="headerlink" title="一、react的基本使用"></a>一、react的基本使用</h2><h4 id="1-react的安装："><a href="#1-react的安装：" class="headerlink" title="1.react的安装："></a>1.react的安装：</h4><p>安装命令： npm i react react-dom</p><ul><li>react包是核心，提供创建元素、组建等功能</li><li>react-dom包提供DOM相关功能</li></ul><h4 id="2-react的使用"><a href="#2-react的使用" class="headerlink" title="2.react的使用"></a>2.react的使用</h4><ul><li>引入react和react-dom</li><li>创建react元素<ul><li>const title = react.createElement(‘h1’, null, ‘hello react’)</li><li>第一个参数：创建的元素名称</li><li>第二个参数： 元素的属性</li><li>第三个和以后的参数： 元素的子节点</li></ul></li><li>渲染react元素到页面中<ul><li>ReactDom.render(title, document.querySelector(‘#app’) )</li><li>第一个参数：要渲染的元素</li><li>第二个参数：DOM对象，用于指定渲染到页面中的位置</li></ul></li></ul><h2 id="二、react脚手架的使用"><a href="#二、react脚手架的使用" class="headerlink" title="二、react脚手架的使用"></a>二、react脚手架的使用</h2><h4 id="1-使用react脚手架初始化项目"><a href="#1-使用react脚手架初始化项目" class="headerlink" title="1.使用react脚手架初始化项目"></a>1.使用react脚手架初始化项目</h4><ul><li>命令：npx create-react-app my-app</li></ul><h4 id="2-npx命令介绍"><a href="#2-npx命令介绍" class="headerlink" title="2.npx命令介绍"></a>2.npx命令介绍</h4><p>目的：提升包内提供的命令行工具的使用体验。无需安装脚手架包，就可以直接使用这个包提供的命令</p><h2 id="三、JSX语法的基本使用"><a href="#三、JSX语法的基本使用" class="headerlink" title="三、JSX语法的基本使用"></a>三、JSX语法的基本使用</h2><h4 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1.使用步骤"></a>1.使用步骤</h4><ul><li>使用JSX语法创建react元素</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">const title &#x3D; &lt;h1&gt;hello JSX&lt;h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用ReactDOM.render()方法渲染元素到页面中</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">ReactDOM.render(title, document.querySelector(&#39;#root&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-为什么脚手架中可以使用JSX语法"><a href="#2-为什么脚手架中可以使用JSX语法" class="headerlink" title="2.为什么脚手架中可以使用JSX语法"></a>2.为什么脚手架中可以使用JSX语法</h4><p>create-react-app脚手架中默认有@babel/preset-react，会对项目中的JSX语法进行编译</p><h4 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3.注意点"></a>3.注意点</h4><ul><li>元素的属性名使用驼峰命名法</li><li>特殊属性名： class -&gt; className, for -&gt; htmlFor, table index -&gt; tabIndex</li><li>没有子节点的React元素可以用/&gt;结束</li><li>推荐：使用小括号包裹JSX，从而避免js中的自动插入分号陷阱</li></ul><h2 id="四、JSX中使用javascript表达式"><a href="#四、JSX中使用javascript表达式" class="headerlink" title="四、JSX中使用javascript表达式"></a>四、JSX中使用javascript表达式</h2><ul><li><p>数据存储在js中</p></li><li><p>语法： { javascript表达式 }</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">const name &#x3D; &#39;jack&#39;const div &#x3D; (&lt;div&gt;hello &#123;name&#125;&lt;&#x2F;div&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>注意点</p><ul><li>单大括号中可以使用任意的JavaScript表达式</li><li>JSX自身也是JS表达式，可以在单大括号中使用</li><li>js中的对象不是表达式，不能直接在单大括号中使用，一般只会出现在style属性中</li><li>不能在{}中出现语句（如if/for语句等 ）</li></ul></li></ul><h2 id="五、JSX的条件渲染"><a href="#五、JSX的条件渲染" class="headerlink" title="五、JSX的条件渲染"></a>五、JSX的条件渲染</h2><ul><li><p>场景：loading效果</p></li><li><p>条件渲染：根据条件渲染特定的JSX结构</p></li><li><p>可以使用if/else或三元运算符或逻辑于运算符来实现</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">const isLoading &#x3D; falseconst loadData &#x3D; () &#x3D;&gt; &#123;  return isLoading ?  (&lt;div&gt;加载中...&lt;&#x2F;div&gt;) : (&lt;div&gt;加载完成&lt;&#x2F;div&gt;)&#125;const title &#x3D; (  &lt;div&gt;&#123;loadData()&#125;&lt;&#x2F;div&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、JSX的列表渲染"><a href="#六、JSX的列表渲染" class="headerlink" title="六、JSX的列表渲染"></a>六、JSX的列表渲染</h2><ul><li><p>如果要渲染一组数据，应该使用数组的map方法</p></li><li><p>渲染列表时应该添加key属性，key属性的值应该要保证唯一</p></li><li><p>尽量避免使用索引作为key</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">const songs &#x3D; [  &#123;id: 1, name: &#39;痴心绝对&#39;&#125;,  &#123;id: 2, name: &#39;童话&#39;&#125;,  &#123;id: 3, name: &#39;演员&#39;&#125;,]const title &#x3D; (  &lt;ul&gt;    &#123;songs.map(item &#x3D;&gt; &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;)&#125;  &lt;&#x2F;ul&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、JSX的样式处理"><a href="#七、JSX的样式处理" class="headerlink" title="七、JSX的样式处理"></a>七、JSX的样式处理</h2><ol><li>行内样式</li><li>类名</li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">import &#39;.&#x2F;index.css&#39;const name &#x3D; &#39;kobe&#39;const title &#x3D; (  &lt;h1 className&#x3D;&quot;title&quot; style&#x3D;&#123;&#123;color: &#39;red&#39;, backgroundColor: &#39;blue&#39;&#125;&#125;&gt;    我是&#123;name&#125;  &lt;&#x2F;h1&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、react组件的两种创建方式"><a href="#八、react组件的两种创建方式" class="headerlink" title="八、react组件的两种创建方式"></a>八、react组件的两种创建方式</h2><h4 id="1-使用函数创建组件"><a href="#1-使用函数创建组件" class="headerlink" title="1.使用函数创建组件"></a>1.使用函数创建组件</h4><ul><li><p>使用JS中的函数创建的组件叫做函数组件</p></li><li><p>函数组件必须有返回值</p></li><li><p>组件名称必须以大写字母开头，react据此区分组件和普通的react元素</p></li><li><p>使用函数名作为组件标签名</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Hello() &#123;return(&lt;div&gt;这是我的第一个函数组件&lt;&#x2F;div&gt;)&#125;ReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用类创建组件"><a href="#2-使用类创建组件" class="headerlink" title="2.使用类创建组件"></a>2.使用类创建组件</h4><ul><li><p>类组件：使用ES6的class创建的组件</p></li><li><p>约定1：类名称必须以大写字母开头</p></li><li><p>约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法和属性</p></li><li><p>约定3：类组件必须提供render（）方法</p></li><li><p>约定4：render（）方法必须有返回值，表示该组件的结构</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;render() &#123;return &lt;div&gt;我是类组件&lt;div&gt;&#125;&#125;ReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-抽离为独立的js模块"><a href="#3-抽离为独立的js模块" class="headerlink" title="3.抽离为独立的js模块"></a>3.抽离为独立的js模块</h4><ol><li><p>创建Hello.js</p></li><li><p>在Hello.js中导入react</p></li><li><p>创建组件（函数或类组件）</p></li><li><p>在Hello.js中到处该组件</p></li><li><p>在index.js中导入Hello组件</p></li><li><p>渲染组件</p></li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; Hello.jsimport React from &#39;react&#39;class Hello extends React.Component &#123;  render() &#123;    return &lt;div&gt;我是Hello组件&lt;&#x2F;div&gt;  &#125;&#125;&#x2F;&#x2F; index.jsimport Hello from &#39;.&#x2F;Hello&#39;ReactDOM.render(&lt;Hello&#x2F;&gt;, root)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、react事件处理"><a href="#九、react事件处理" class="headerlink" title="九、react事件处理"></a>九、react事件处理</h2><ul><li><p>react事件绑定语法与DOM事件语法相似</p></li><li><p>语法：on + 事件名称 = {事件处理程序}，比如： onClick = { () =&gt; {} }</p></li><li><p>注意：react事件才用驼峰命名法</p></li><li><p>类组件中绑定事件</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class App extends React.Component &#123;  handleClick() &#123;    console.log(&#39;click&#39;)  &#125;render() &#123;    return &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;点击&lt;&#x2F;button&gt;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数组件中绑定事件</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App () &#123;  handleClick() &#123;    console.log(&#39;click&#39;)  &#125;  return &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;点击&lt;&#x2F;button&gt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>事件对象</p><ul><li><p>可以通过事件处理程序的参数获取到事件对象</p></li><li><p>react中的事件对象叫做：合成事件（对象）</p></li><li><p>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;  handleClick(e) &#123;    e.preventDefault()  &#125;  render() &#123;    return &lt;a onClick&#x3D;&#123;this.handleClick&#125; href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="十、有状态组件和无状态组件"><a href="#十、有状态组件和无状态组件" class="headerlink" title="十、有状态组件和无状态组件"></a>十、有状态组件和无状态组件</h2><ul><li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li><li>状态（state）即数据</li><li>函数组件没有自己的状态，只负责数据展示（静）</li><li>类组件有自己的状态，负责更新UI，让页面动起来</li></ul><h2 id="十一、组件中的state和setState"><a href="#十一、组件中的state和setState" class="headerlink" title="十一、组件中的state和setState"></a>十一、组件中的state和setState</h2><h4 id="1-state的基本使用"><a href="#1-state的基本使用" class="headerlink" title="1.state的基本使用"></a>1.state的基本使用</h4><ul><li><p>状态即数据</p></li><li><p>状态是私有的，只能在组件内部使用</p></li><li><p>通过this.state来获取状态</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;  &#x2F;&#x2F; constructor() &#123;  &#x2F;&#x2F;  super(); &#x2F;&#x2F;  &#x2F;&#x2F;  this.state &#x3D; &#123;  &#x2F;&#x2F;    count: 1  &#x2F;&#x2F; &#125;  &#x2F;&#x2F; &#125;  &#x2F;&#x2F; 简写  state &#x3D; &#123;count: 1  &#125;  render() &#123;    return &lt;h2&gt;计数器： &#123;this.state.count&#125;&lt;&#x2F;h2&gt;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-setState-修改状态"><a href="#2-setState-修改状态" class="headerlink" title="2.setState()修改状态"></a>2.setState()修改状态</h4><ul><li><p>状态是可变的</p></li><li><p>语法：this.setState({要修改的数据})</p></li><li><p>注意：不要直接修改state的值</p></li><li><p>setState()作用：修改state、更新UI</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">this.setState(&#123;  count: this.state.count + 1&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="十二、事件绑定this指向"><a href="#十二、事件绑定this指向" class="headerlink" title="十二、事件绑定this指向"></a>十二、事件绑定this指向</h2><ol><li>利用箭头函数改变this指向</li></ol>  <pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;state &#x3D; &#123;    count: 1  &#125;render() &#123;    return (    &lt;div&gt;      &lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick()&#125;&gt;+1&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;    )  &#125;handleClick() &#123;    this.setState(&#123;      count: this.state.count + 1    &#125;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>利用bind改变this指向</li></ol>  <pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;constructor() &#123;    this.state &#x3D; &#123;count: 1    &#125;    this.handleClick &#x3D; this.handleClick.bind(this)  &#125;render() &#123;return (&lt;div&gt;      &lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;)&#125;handleClick() &#123;this.setState(&#123;      count: this.state.count - 1    &#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>class的箭头函数实例方法（推荐方式，脚手架配置的babel对这种语法进行了转换）</li></ol>  <pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;constructor() &#123;    this.state &#x3D; &#123;count: 1    &#125;    this.handleClick &#x3D; this.handleClick.bind(this)  &#125;render() &#123;return (&lt;div&gt;      &lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;      &lt;&#x2F;div&gt;)&#125;handleClick &#x3D; () &#x3D;&gt; &#123;this.setState(&#123;      count: this.state.count - 1    &#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、表单处理"><a href="#十三、表单处理" class="headerlink" title="十三、表单处理"></a>十三、表单处理</h2><h4 id="1-受控组件（常用）"><a href="#1-受控组件（常用）" class="headerlink" title="1.受控组件（常用）"></a>1.受控组件（常用）</h4><p>其值收到react控制的表单元素</p><p>实现一个受控组件（类似于vue中的v-model）：</p><p>1.表单value绑定state中的状态</p><p>2.监听表单的change事件，修改state中的状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Hello extends React.Component &#123;state &#x3D; &#123;    text: &#39;&#39;  &#125;render() &#123;    return &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.text&#125; onClick&#x3D;&#123; this.inputChange &#125;&gt;&lt;&#x2F;input&gt;  &#125;inputChange &#x3D; e &#x3D;&gt; &#123;    this.setState(&#123;      text: e.target.value    &#125;)&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-非受控组件（不常用）"><a href="#2-非受控组件（不常用）" class="headerlink" title="2.非受控组件（不常用）"></a>2.非受控组件（不常用）</h4><ul><li>通过React.createRef()方法创建ref对象</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">constructor() &#123;  super()  this.txtRef &#x3D; React.createRef()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表单使用ref对象</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">render() &#123;  return (  &lt;div&gt;    &lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123; this.txtRef &#125;&gt;&lt;&#x2F;input&gt;      &lt;button onClick&#x3D;&#123; this.getValue &#125;&gt;获取value&lt;&#x2F;button&gt;    &lt;&#x2F;div&gt;  )&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过ref对象获取表单的值</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">getValue &#x3D; () &#x3D;&gt; &#123;console.log(this.txtRef.current.value)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="十四、组件通讯"><a href="#十四、组件通讯" class="headerlink" title="十四、组件通讯"></a>十四、组件通讯</h2><h4 id="1-组件的props"><a href="#1-组件的props" class="headerlink" title="1.组件的props"></a>1.组件的props</h4><ul><li><p>props的作用： 与vue的props类似，父组件向子组件传递数据，子组件用来接收数据</p></li><li><p>接收数据：函数组件直接用props，类组件用this.props（和作用域有关，类组件的props加在实例上，函数组件直接通过参数接收）</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react"> &#x2F;&#x2F; 1.函数组件propsconst Hello &#x3D; props &#x3D;&gt; &#123;  return (    &lt;h2&gt;func props: &#123; props.name &#125;&lt;&#x2F;h2&gt;  )&#125;&#x2F;&#x2F; 2.类组件propsclass Hello extends React.Component &#123;  render() &#123;    return (      &lt;h2&gt;class props: &#123; this.props.name &#125;&lt;&#x2F;h2&gt;    )  &#125;&#125;ReactDOM.render(&lt;Hello name&#x3D;&quot;component props&quot; &#x2F;&gt;, document.querySelector(&#39;#root&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>特点：</p><ul><li>可以给组件穿任意类型的数据（数组、对象、jsx表达式、函数等）</li><li>props只读属性，只能读取属性的值，无法修改对象</li><li>⚠️在constructor中使用props时，需要接收props并传递给super，否则无法在构造函数中获取到props</li></ul></li></ul><h4 id="2-父组件传递数据给子组件"><a href="#2-父组件传递数据给子组件" class="headerlink" title="2.父组件传递数据给子组件"></a>2.父组件传递数据给子组件</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Parent extends React.Component &#123;  state &#x3D; &#123;    name: &#39;kobe&#39;  &#125;  render() &#123;    return (      &lt;div&gt;        父组件        &lt;Child name&#x3D;&#123; this.state.name &#125;&gt;&lt;&#x2F;Child&gt;        &lt;&#x2F;div&gt;    )  &#125;&#125;class Child extends React.Component &#123;  render() &#123;    return (      &lt;div&gt;父组件传递给子组件的数据: &#123; this.props.name&#125;&lt;&#x2F;div&gt;    )  &#125;&#125;ReactDOM.render(  &lt;Parent&#x2F;&gt;,  document.querySelector(&quot;#root&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-子组件传递数据给父组件"><a href="#3-子组件传递数据给父组件" class="headerlink" title="3.子组件传递数据给父组件"></a>3.子组件传递数据给父组件</h4><p>思路：父组件提供回调函数，同时将回调通过props传递给子组件，子组件通过props接收回调，执行回调并将需要传递的数据作为回调的参数传递给父组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Father extends React.Component &#123;  state &#x3D; &#123;    childMsg: &#39;&#39;  &#125;  render() &#123;return (    &lt;div&gt;      &lt;h2&gt;子组件传递的数据: &#123; this.state.childMsg &#125;&lt;&#x2F;h2&gt;        &lt;Child getMsg&#x3D;&#123; this.getChildMsg &#125;&gt;&lt;&#x2F;Child&gt;      &lt;&#x2F;div&gt;    )  &#125;getChildMsg(childMsg) &#123;this.setState(&#123;      childMsg:  childMsg    &#125;)  &#125;&#125;class Son extends React.Component &#123;state &#x3D; &#123;childMsg: &#39;child&#39;  &#125;render() &#123;return (    &lt;button onClick&#x3D;&#123; this.emitMsg &#125;&gt;&lt;&#x2F;button&gt;    )  &#125;emitMsg &#x3D; () &#x3D;&gt; &#123;this.props.getMsg(this.state.childMsg)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：此处在Child组件中，render函数的onClick上不能直接调用this.props.getMsg()，而要在抽离到实例方法中。原因：react会在props和state改变的时候调用render对DOM进行diff后更新渲染，如果在render中再次调用getMsg修改state，会陷入死循环并报错</p><h4 id="4-兄弟组件通讯"><a href="#4-兄弟组件通讯" class="headerlink" title="4.兄弟组件通讯"></a>4.兄弟组件通讯</h4><ul><li><p>将共享状态提升到最近的公共的父组件中，又公告父组件管理这个状态</p></li><li><p>父组件：提供共享状态、提供操作共享状态的方法</p></li><li><p>子组件：通过props获取共享状态和操作共享状态</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Parent extends React.Component &#123;  &#x2F;&#x2F; 状态提升  state &#x3D; &#123;    count: 1  &#125;  render() &#123;    return (      &lt;div&gt;        &lt;Child1 count&#x3D;&#123; this.state.count &#125;&gt;&lt;&#x2F;Child1&gt;        &lt;Child2 increment &#x3D; &#123; this.increment&#125;&gt;&lt;&#x2F;Child2&gt;      &lt;&#x2F;div&gt;    )  &#125;  &#x2F;&#x2F; 提供修改状态的方法  increment &#x3D; () &#x3D;&gt; &#123;    this.setState(&#123;      count: this.state.count + 1    &#125;)  &#125;&#125;const Child1 &#x3D; props &#x3D;&gt; &#123;  return (    &lt;h2&gt;计数器: &#123; props.count &#125;&lt;&#x2F;h2&gt;  )&#125;const Child2 &#x3D; props &#x3D;&gt; &#123;  const increment &#x3D; () &#x3D;&gt; &#123;    props.increment()  &#125;  return (    &lt;button onClick&#x3D;&#123; increment &#125;&gt;+1&lt;&#x2F;button&gt;  )&#125;  ReactDOM.render(    &lt;Parent&#x2F;&gt;,    document.querySelector(&quot;#root&quot;)  )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-组件树传递数据"><a href="#5-组件树传递数据" class="headerlink" title="5.组件树传递数据"></a>5.组件树传递数据</h4><ul><li><p>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。</p></li><li><p>使用 context, 我们可以避免通过中间元素传递 props：</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。&#x2F;&#x2F; 为当前的 theme 创建一个 context（“light”为默认值）。const ThemeContext &#x3D; React.createContext(&#39;light&#39;);class App extends React.Component &#123;  render() &#123;    &#x2F;&#x2F; 使用一个 Provider 来将当前的 theme 传递给以下的组件树。    &#x2F;&#x2F; 无论多深，任何组件都能读取这个值。    &#x2F;&#x2F; 在这个例子中，我们将 “dark” 作为当前的值传递下去。    return (      &lt;ThemeContext.Provider value&#x3D;&quot;dark&quot;&gt;        &lt;Toolbar &#x2F;&gt;      &lt;&#x2F;ThemeContext.Provider&gt;    );  &#125;&#125;&#x2F;&#x2F; 中间的组件再也不必指明往下传递 theme 了。function Toolbar() &#123;  return (    &lt;div&gt;      &lt;ThemedButton &#x2F;&gt;    &lt;&#x2F;div&gt;  );&#125;class ThemedButton extends React.Component &#123;  &#x2F;&#x2F; 指定 contextType 读取当前的 theme context。  &#x2F;&#x2F; React 会往上找到最近的 theme Provider，然后使用它的值。  &#x2F;&#x2F; 在这个例子中，当前的 theme 值为 “dark”。  static contextType &#x3D; ThemeContext;  render() &#123;    return &lt;Button theme&#x3D;&#123;this.context&#125; &#x2F;&gt;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>使用方法：</p><ul><li>1.React.createContext方法创建context</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">const MyContext &#x3D; React.createContext(defaultValue)&#x2F;&#x2F; 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。&#x2F;&#x2F; 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。此默认值有助于在不使用 Provider 包装组件的情况下对组件进行测试。注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效&#x2F;&#x2F; orconst &#123; Provider, Consumer &#125; &#x3D; React.creactContext()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.使用Context.Provider提供数据</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;MyContext.Provider value&#x3D;&#123;&#x2F;* 某个值 *&#x2F;&#125; &#x2F;&gt;&#x2F;&#x2F; or&lt;Provider value&#x3D;&#123;&#125; &#x2F;&gt;&#x2F;&#x2F; 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。&#x2F;&#x2F; Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。&#x2F;&#x2F; 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>value提供为对象时注意事项：</p></li><li><p>因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染。举个例子，当每一次 Provider 重渲染时，以下的代码会重渲染所有下面的 consumers 组件，因为 <code>value</code> 属性总是被赋值为新的对象：</p></li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class App extends React.Component &#123;  render() &#123;    return (      &lt;MyContext.Provider value&#x3D;&#123;&#123;something: &#39;something&#39;&#125;&#125;&gt;        &lt;Toolbar &#x2F;&gt;      &lt;&#x2F;MyContext.Provider&gt;    );  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为了防止这种情况，将 value 状态提升到父节点的 state 里：</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">class App extends React.Component &#123;  constructor(props) &#123;    super(props);    this.state &#x3D; &#123;      value: &#123;something: &#39;something&#39;&#125;,    &#125;;  &#125;  render() &#123;    return (      &lt;MyContext.Provider value&#x3D;&#123;this.state.value&#125;&gt;        &lt;Toolbar &#x2F;&gt;      &lt;&#x2F;MyContext.Provider&gt;    );  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>3.消费数据</p><ul><li>方式1：Class.contextType</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react"> &#x2F;&#x2F; 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。此属性能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。class MyClass extends React.Component &#123;  static contextType &#x3D; MyContext;  render() &#123;    let value &#x3D; this.context;    &#x2F;* 基于这个值进行渲染工作 *&#x2F;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方式2：Context.Consumer</li></ul><pre class="line-numbers language-react" data-language="react"><code class="language-react">&#x2F;&#x2F; 一个 React 组件可以订阅 context 的变更，此组件可以让你在函数式组件中可以订阅 context。&#x2F;&#x2F; 这种方法需要一个函数作为子元素（function as a child）。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。&lt;MyContext.Consumer&gt;  &#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;&lt;&#x2F;MyContext.Consumer&gt;&#x2F;&#x2F; or &lt;Consumer&gt;&#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;&lt;&#x2F;Consumer&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echarts学习笔记</title>
      <link href="/2021/07/17/echarts/"/>
      <url>/2021/07/17/echarts/</url>
      
        <content type="html"><![CDATA[<h3 id="一、柱状图（type为bar）"><a href="#一、柱状图（type为bar）" class="headerlink" title="一、柱状图（type为bar）"></a>一、柱状图（type为bar）</h3><h4 id="1-数据格式"><a href="#1-数据格式" class="headerlink" title="1.数据格式"></a>1.数据格式</h4><p>一维数组</p><h4 id="2-xAxis和yAxis"><a href="#2-xAxis和yAxis" class="headerlink" title="2.xAxis和yAxis"></a>2.xAxis和yAxis</h4><p>type为category时，需要指定data</p><p>type为value时，data在series中指定</p><h4 id="3-常见效果"><a href="#3-常见效果" class="headerlink" title="3.常见效果"></a>3.常见效果</h4><ul><li><p>标记：最大值、最小值、平均值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">markPoint：<span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">'max'</span>，      name<span class="token operator">:</span> <span class="token string">'最大值'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>      name<span class="token operator">:</span> <span class="token string">'最小值'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  markLine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'average'</span>，        name<span class="token operator">:</span> <span class="token string">'平均值'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>显示：</p><p>label：数值显示</p><p>barWidth： 柱宽度</p><p>横向柱状图：xAxis和yAxis配置互换</p></li></ul><h3 id="二、通用配置"><a href="#二、通用配置" class="headerlink" title="二、通用配置"></a>二、通用配置</h3><ul><li>title标题<ul><li>文字样式：textStyle</li><li>标题边框：borderWidth、borderColor、borderRadius</li><li>标题位置：left、top、right、bottom</li></ul></li><li>tooltip提示框组件<ul><li>触发类型：trigger<ul><li>item</li><li>axis</li></ul></li><li>触发时机：triggerOn<ul><li>mouseover</li><li>click</li></ul></li><li>格式化：formatter<ul><li>字符串模板</li><li>回调函数（参数：arg）</li></ul></li></ul></li><li>toolbox工具栏（导出图片、数据视图、数据区域缩放、重置、动态类型切换五个工具）<ul><li>feature（显示工具栏按钮）<ul><li>savaAsImage（导出图片）</li><li>dataView（数据视图）</li><li>dataZoom（数据区域缩放）</li><li>restore（重置）</li><li>magicType（动态类型切换）：如magicType： { type: [‘bar’, ‘line’]}</li></ul></li></ul></li><li>legend图例（用于筛选系列，需要和series配合使用）<ul><li>legend中的data是一个数组</li><li>legend中的data的值需要和series数组中某组数据的name值一致</li></ul></li></ul><h3 id="三、折线图（type为line）"><a href="#三、折线图（type为line）" class="headerlink" title="三、折线图（type为line）"></a>三、折线图（type为line）</h3><h4 id="1-数据格式-1"><a href="#1-数据格式-1" class="headerlink" title="1.数据格式"></a>1.数据格式</h4><p>一维数组</p><h4 id="2-常用效果"><a href="#2-常用效果" class="headerlink" title="2.常用效果"></a>2.常用效果</h4><ul><li>标记：最大值、最小值、平均值、标注区间<ul><li>markPoint</li><li>markLine</li><li>markArea</li></ul></li><li>线条控制：平滑、风格<ul><li>smooth、lineStyle </li></ul></li><li>填充风格<ul><li>areaStyle</li></ul></li><li>紧挨y轴边缘（设置在xAxis）<ul><li>boundaryGap</li></ul></li><li>缩放：脱离0值比例<ul><li>scale：true</li></ul></li><li>堆叠图<ul><li>stack：all</li><li>可以和areaStyle配合使用</li></ul></li></ul><h3 id="四、散点图（type为scatter）"><a href="#四、散点图（type为scatter）" class="headerlink" title="四、散点图（type为scatter）"></a>四、散点图（type为scatter）</h3><h4 id="1-数据格式-2"><a href="#1-数据格式-2" class="headerlink" title="1.数据格式"></a>1.数据格式</h4><p>二维数组</p><h4 id="2-基本的散点图"><a href="#2-基本的散点图" class="headerlink" title="2.基本的散点图"></a>2.基本的散点图</h4><ul><li>x轴和y轴type都是value</li><li>x轴和y轴的数据，是一个二维数组</li><li>type为scatter</li></ul><h4 id="3-常用效果"><a href="#3-常用效果" class="headerlink" title="3.常用效果"></a>3.常用效果</h4><ul><li>气泡图效果<ul><li>散点大小不同：symbolSize</li><li>散点的颜色不同：itemStyle.color</li></ul></li><li>涟漪动画效果<ul><li>type: effectScatter</li><li>showEffectOn: ‘emphasis’ 鼠标移入时才显示涟漪效果，默认值是render（渲染就显示涟漪效果）</li><li>rippleEffect: { scale: 10} 散点涟漪效果的范围</li></ul></li></ul><h3 id="五、直角坐标系的常用配置"><a href="#五、直角坐标系的常用配置" class="headerlink" title="五、直角坐标系的常用配置"></a>五、直角坐标系的常用配置</h3><p>直角坐标系的图表：柱状图（bar）、折线图（line）、散点图（scatter）</p><ul><li>grid网格（控制直角坐标系的布局和大小，x轴和y轴就是在grid的基础上进行绘制的）<ul><li>显示gird<ul><li>show</li></ul></li><li>grid的边框<ul><li>borderWidth、borderColor</li></ul></li><li>grid的位置和大小<ul><li>left</li><li>top</li><li>right</li><li>bottom</li></ul></li></ul></li><li>axis坐标轴（分为x轴和y轴）<ul><li>坐标轴类型type<ul><li>value：数值周，自动会从目标数据中读取数据</li><li>category：类目轴，该类型必须通过data设置类目数据</li></ul></li><li>显示位置position<ul><li>xAxis：可取值为top或bottom</li><li>yAxis：可取值为left或right</li></ul></li></ul></li><li>区域缩放dataZoom<ul><li>dataZoom用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有。dataZoom是一个数组，可以配置多个区域缩放器</li><li>类型type<ul><li>slider：滑块控制缩放</li><li>inside：内置，依靠鼠标滚轮或者双指缩放</li></ul></li><li>指明产生作用的轴<ul><li>xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可</li><li>yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可</li></ul></li><li>指明初始状态的缩放情况<ul><li>start：数据窗口范围的起始百分比</li><li>end：数据窗口范围的结束百分比</li></ul></li></ul></li></ul><h3 id="六、饼图（type为pie）"><a href="#六、饼图（type为pie）" class="headerlink" title="六、饼图（type为pie）"></a>六、饼图（type为pie）</h3><h4 id="1-数据格式-3"><a href="#1-数据格式-3" class="headerlink" title="1.数据格式"></a>1.数据格式</h4><p>json数据：data: [{name: ‘京东’，value: ‘9000’}]</p><h4 id="2-基本的饼图"><a href="#2-基本的饼图" class="headerlink" title="2.基本的饼图"></a>2.基本的饼图</h4><ul><li>数据是json数据格式</li><li>type为pie</li><li>无须配置xAxis和yAxis</li></ul><h4 id="3-饼图常见效果"><a href="#3-饼图常见效果" class="headerlink" title="3.饼图常见效果"></a>3.饼图常见效果</h4><ul><li>显示数值<ul><li>lable.formatter</li></ul></li><li>圆环<ul><li>设置两个半径 radius：[‘50%’, ‘70%’] 分别是内半径和外半径</li></ul></li><li>南丁格尔图<ul><li>roseType：’radius’</li></ul></li><li>选中效果<ul><li>选中模式 selectMode：single（可选中单个）\multiple（可选中多个）</li><li>选中偏移量 selectOffset：30</li></ul></li></ul><h3 id="七、地图（type：map）"><a href="#七、地图（type：map）" class="headerlink" title="七、地图（type：map）"></a>七、地图（type：map）</h3><h4 id="1-矢量地图的实现步骤"><a href="#1-矢量地图的实现步骤" class="headerlink" title="1.矢量地图的实现步骤"></a>1.矢量地图的实现步骤</h4><ul><li>Echarts最基本的代码结构<ul><li>引入js文件</li><li>带宽高的DOM容器</li><li>init初始化对象</li><li>setOption设置option</li></ul></li><li>准备中国的矢量地图json文件（<a href="http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5%EF%BC%89">http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5）</a></li><li>使用ajax获取json<ul><li>$.get(‘json/map/china.json’, function(chinaJson){})</li></ul></li><li>往echarts全局对象注册地图的json数据<ul><li>echarts.registerMap(‘chinaMap’, chinaJson)</li></ul></li><li>在geo下设置<ul><li>type:’map’</li><li>map:’chinaMap’</li></ul></li></ul><h4 id="2-常用配置"><a href="#2-常用配置" class="headerlink" title="2.常用配置"></a>2.常用配置</h4><ul><li>缩放拖动<ul><li>roam：true</li></ul></li><li>名称显示<ul><li>label</li></ul></li><li>初始缩放比例<ul><li>zoom：2（2倍）</li></ul></li><li>地图中心点<ul><li>center</li></ul></li></ul><h4 id="3-常见效果-1"><a href="#3-常见效果-1" class="headerlink" title="3.常见效果"></a>3.常见效果</h4><ul><li><p>不同城市颜色不同（如空气质量）</p><ol><li><p>显示基本的中国地图</p></li><li><p>城市的空气质量数据设置给series（此处的数据必须是[{name: cityName, value: ‘’}]的格式，其中name属性必须和省份名一致）</p></li><li><p>将series下的数据与geo关联起来</p><p>设置type: ‘map’，geoIndex:0</p></li><li><p>结合visualMap配合使用</p><p>visualMap: {min: 0, max: 40, range: { color: [‘white’, ‘red’]}}</p></li></ol></li><li><p>地图和散点图结合</p><ol><li><p>给series下配置散点图对象</p></li><li><p>准备好散点数据，设置给新对象的data（二维数组，地图坐标）</p></li><li><p>配置新对象的type为effectScatter</p></li><li><p>让散点图使用地图坐标系统</p><p>coordinateSystem: ‘geo’</p></li><li><p>让涟漪的效果更加明显</p><p>rippleEffect：{ scale：10 }</p></li></ol></li></ul><h3 id="八、雷达图（type：radar）"><a href="#八、雷达图（type：radar）" class="headerlink" title="八、雷达图（type：radar）"></a>八、雷达图（type：radar）</h3><h4 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1.实现步骤"></a>1.实现步骤</h4><ul><li>echarts最基本的代码结构</li><li>定义各个维度的最大值（在radar属性下）<ul><li>indicator：[{name: ‘易用性’, max: 100]}]</li></ul></li><li>准备具体产品的数据<ul><li>在series下设置data：[{name: ‘华为手机’, value: [80, 80, 90, 95, 85]}</li></ul></li><li>设置图表类型<ul><li>在series下设置type：radar</li></ul></li></ul><h4 id="2-常用配置-1"><a href="#2-常用配置-1" class="headerlink" title="2.常用配置"></a>2.常用配置</h4><ul><li>显示数值:<ul><li>label</li></ul></li><li>区域面积（阴影）<ul><li>areaStyle</li></ul></li><li>绘制类型<ul><li>shape: ‘circle’ 默认值 polygon</li></ul></li></ul><h3 id="九、仪表盘（type：guage）"><a href="#九、仪表盘（type：guage）" class="headerlink" title="九、仪表盘（type：guage）"></a>九、仪表盘（type：guage）</h3><h4 id="1-实现步骤-1"><a href="#1-实现步骤-1" class="headerlink" title="1.实现步骤"></a>1.实现步骤</h4><ul><li>echarts最基本的代码结构</li><li>准备数据，设置给series下的data<ul><li>data: [{value: 97}]</li></ul></li><li>图标类型<ul><li>在series下设置type：guage</li></ul></li></ul><h4 id="2-常用效果-1"><a href="#2-常用效果-1" class="headerlink" title="2.常用效果"></a>2.常用效果</h4><ul><li>数值范围<ul><li>max</li><li>min</li></ul></li><li>多个指针<ul><li>增加series下data数组中的元素</li></ul></li><li>多个指针颜色差异<ul><li>itemStyle</li></ul></li></ul><h3 id="十、主题"><a href="#十、主题" class="headerlink" title="十、主题"></a>十、主题</h3><h4 id="1-内置主题"><a href="#1-内置主题" class="headerlink" title="1.内置主题"></a>1.内置主题</h4><ul><li><p>echarts中默认内置了两套主题：light、dark</p></li><li><p>在初始化对象方法中init中可以指明</p><p>var chart = echarts.init(dom, ‘light’)</p><p>var chart = echarts.init(dom, ‘dark’)</p></li></ul><h4 id="2-自定义主题"><a href="#2-自定义主题" class="headerlink" title="2.自定义主题"></a>2.自定义主题</h4><ul><li>1.在官网主题编辑器中编辑主题</li><li>2.下载主题js文件</li><li>3.引入主题js文件</li><li>4.在init方法中使用主题</li></ul><h3 id="十一、调色盘"><a href="#十一、调色盘" class="headerlink" title="十一、调色盘"></a>十一、调色盘</h3><h4 id="1-它是一组颜色，图形、系列会自动从其中选择颜色"><a href="#1-它是一组颜色，图形、系列会自动从其中选择颜色" class="headerlink" title="1.它是一组颜色，图形、系列会自动从其中选择颜色"></a>1.它是一组颜色，图形、系列会自动从其中选择颜色</h4><ul><li><p>主题调色盘（主题js文件中全局注册的color）</p></li><li><p>全局调色盘</p><p>options：{</p><p>​    color： [‘red’, ‘green’, ‘blue’]</p><p>}</p></li><li><p>局部调色盘</p><p>series: [{</p><p>​    type: ‘bar’,</p><p>​    color: [‘red’, ‘green’, ‘blue’]</p><p>}]</p></li></ul><h4 id="2-调色盘的作用遵循就近原则"><a href="#2-调色盘的作用遵循就近原则" class="headerlink" title="2.调色盘的作用遵循就近原则"></a>2.调色盘的作用遵循就近原则</h4><h4 id="3-颜色渐变"><a href="#3-颜色渐变" class="headerlink" title="3.颜色渐变"></a>3.颜色渐变</h4><ul><li><p>线性渐变</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">itemStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'linear'</span><span class="token punctuation">,</span>      x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 在图元中的初始x位置</span>      y<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 在图元中的初始y位置</span>      x2<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      y2<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 1代表到底部，0.5在中间</span>        colorStops<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>          offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'red'</span> <span class="token comment">// 0%处的颜色 </span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>          offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'blue'</span> <span class="token comment">// 100%处的颜色</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>径向渐变</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">itemStyle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  color<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'radial'</span><span class="token punctuation">,</span>      x<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>       y<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>      r<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 扩散的半径</span>        colorStops<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>          offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'red'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">'blue'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="十二、样式"><a href="#十二、样式" class="headerlink" title="十二、样式"></a>十二、样式</h3><ul><li>直接样式<ul><li>itemStyle、textStyle、lineStyle、areaStyle、label</li></ul></li><li>高亮样式<ul><li>在emphasis中包裹itemStyle、textStyle、lineStyle、areaStyle、label</li></ul></li><li>优先级高，会覆盖主题中、调色盘的效果</li></ul><h3 id="十三、自适应"><a href="#十三、自适应" class="headerlink" title="十三、自适应"></a>十三、自适应</h3><p>当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化</p><ul><li><p>1.监听窗口大小变化事件</p></li><li><p>2.在事件处理函数中调用echarts实例对象的resize方法即可</p><p>window.onresize = myChart.resize</p></li></ul><h3 id="十四、加载动画"><a href="#十四、加载动画" class="headerlink" title="十四、加载动画"></a>十四、加载动画</h3><p>echarts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可</p><ul><li><p>显示加载动画</p><p>mCharts.showLoading()</p></li><li><p>隐藏加载动画</p><p>mCharts.hideLoading()</p></li></ul><h3 id="十五、增量动画"><a href="#十五、增量动画" class="headerlink" title="十五、增量动画"></a>十五、增量动画</h3><ul><li>增量动画的实现方式<ul><li>mCharts.setOption<ul><li>所有数据的更新都通过setOption实现</li><li>不用考虑数据到底产生了哪些变化</li><li>echarts会找到两组数据之间的差异然后通过合适的动画取实现数据的变化</li><li>新旧option的关系并不是相互覆盖的关系，而是相互整合的关系</li><li>我们在设置新的option的时候，只需要考虑到变化的部分就可以</li></ul></li></ul></li></ul><h3 id="十六、动画配置项"><a href="#十六、动画配置项" class="headerlink" title="十六、动画配置项"></a>十六、动画配置项</h3><ul><li><p>开启动画</p><ul><li>animation：true</li></ul></li><li><p>动画时长</p><ul><li>animationDuration：5000</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">animationDuration： <span class="token keyword">function</span>（arg） <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里的arg是所有需要动画效果的图元的索引，会根据不同形式的图元元素进行分组</span>  <span class="token keyword">return</span> arg <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>缓动动画</p><ul><li>animationEasing: ‘bounceOut’</li></ul></li><li><p>动画阈值</p><ul><li>animationThreshold： 8</li><li>单中形式的元素数量大于这个阈值会关闭动画</li></ul></li></ul><h3 id="十七、全局Echarts对象常用方法"><a href="#十七、全局Echarts对象常用方法" class="headerlink" title="十七、全局Echarts对象常用方法"></a>十七、全局Echarts对象常用方法</h3><ul><li><p>init方法</p><ul><li>初始化Echarts实例对象</li><li>使用主题（第二个参数）</li></ul></li><li><p>registerTheme方法</p><ul><li>注册主题</li><li>只有注册过的主题，才能在init方法中使用该主题</li></ul></li><li><p>registerMap方法</p><ul><li><p>注册地图数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'json/map/china.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ChinaJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  echarts<span class="token punctuation">.</span><span class="token function">registerMap</span><span class="token punctuation">(</span><span class="token string">'china'</span><span class="token punctuation">,</span> chinaJson<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>geo组件使用地图数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  geo<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'map'</span><span class="token punctuation">,</span>    map<span class="token operator">:</span> <span class="token string">'china'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>connect方法</p><ul><li>一个页面中可以有多个独立的图表</li><li>每一个图表对应一个Echarts实例对象</li><li>connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组<ul><li>保存图片的自动拼接（saveAsImage）</li><li>刷新按钮</li><li>重置按钮</li><li>提示框联动、图例选择、数据范围修改等等</li></ul></li></ul></li></ul><h3 id="十八、echartsInstance实例常用方法"><a href="#十八、echartsInstance实例常用方法" class="headerlink" title="十八、echartsInstance实例常用方法"></a>十八、echartsInstance实例常用方法</h3><ul><li><p>setOption方法</p><ul><li>设置或修改图表实例的配置项以及数据</li><li>多次调用setOption方法<ul><li>合并新旧配置</li><li>增量动画</li></ul></li></ul></li><li><p>resize方法</p><ul><li>重新计算和绘制图表</li><li>一般和window对象的resize事件结合使用<ul><li>window.onresize = mEcharts.resize</li></ul></li></ul></li><li><p>on\off方法</p><ul><li>绑定或者解绑事件处理函数</li><li>鼠标事件<ul><li>常见事件：click、dbclick、mousedown、mousemove、mouseup等</li></ul></li><li>Echarts事件<ul><li>常见事件：legendselectchanged、datazoom、pieselectchanged、ma’pselectchanged</li></ul></li></ul></li><li><p>dispatchAction</p><ul><li><p>触发某些行为</p></li><li><p>使用代码模拟用户的行为</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mCharts<span class="token punctuation">.</span><span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">'hightlight'</span><span class="token punctuation">,</span> <span class="token comment">// 事件类型</span>  seriesIndex<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 图表索引(系列)</span>  dataIndex<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 图表中哪一项高亮</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>clear</p><ul><li>清空当前实例，会移除实例中所有的组件和图表</li><li>清空之后可以再次setOption</li></ul></li><li><p>dispose方法</p><ul><li>销毁实例</li><li>销毁后实例无法再被使用</li></ul></li></ul><h3 id="十九、websocket的基本使用"><a href="#十九、websocket的基本使用" class="headerlink" title="十九、websocket的基本使用"></a>十九、websocket的基本使用</h3><ul><li><p>后端</p><ul><li><p>安装包</p><ul><li>npm i ws</li></ul></li><li><p>创建对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>server</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  port<span class="token operator">:</span> <span class="token string">'8080'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>监听事件</p><ul><li><p>连接事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有客户端连接'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>接受数据事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'有客户端连接'</span><span class="token punctuation">)</span>  client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'客户端发送数据过来了'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送数据</p><ul><li>client.send(‘hello socket from back-end’)</li></ul></li></ul></li></ul></li><li><p>前端</p><ul><li><p>创建对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:8080'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>监听事件</p><ul><li>连接成功事件<ul><li>ws.onopen = () =&gt; {}</li></ul></li><li>接受数据事件<ul><li>ws.onmessage = msg =&gt; {}</li></ul></li><li>关闭连接事件<ul><li>ws.onclose = () =&gt; {}</li></ul></li></ul></li><li><p>发送数据</p><ul><li>ws.send</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端可视化库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>d3相关笔记</title>
      <link href="/2021/07/14/d3/"/>
      <url>/2021/07/14/d3/</url>
      
        <content type="html"><![CDATA[<h3 id="一-使用d3查询svg"><a href="#一-使用d3查询svg" class="headerlink" title="一.使用d3查询svg"></a>一.使用d3查询svg</h3><p>d3.select()、d3.selectAll()</p><h3 id="二-使用d3设置svg中的属性"><a href="#二-使用d3设置svg中的属性" class="headerlink" title="二.使用d3设置svg中的属性"></a>二.使用d3设置svg中的属性</h3><p>d3.attr()</p><p>常见的属性：</p><ul><li>id、class</li><li>x，y，cx，cy（cx、cy是圆的xy坐标）</li><li>fill（颜色填充color）、stroke（边框border）</li><li>height、width、r（圆的半径）</li><li>transform（translate、rotate、scale）</li></ul><h3 id="三-使用d3添加、删除svg元素"><a href="#三-使用d3添加、删除svg元素" class="headerlink" title="三.使用d3添加、删除svg元素"></a>三.使用d3添加、删除svg元素</h3><p>element.append()、element.remove()</p><h3 id="四-d3的比例尺"><a href="#四-d3的比例尺" class="headerlink" title="四.d3的比例尺"></a>四.d3的比例尺</h3><h4 id="1-d3-scaleLinear-：线性比例尺"><a href="#1-d3-scaleLinear-：线性比例尺" class="headerlink" title="1.d3.scaleLinear()：线性比例尺"></a>1.d3.scaleLinear()：线性比例尺</h4><p>domain:：连续型 range：连续型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> xScale <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span>min_d<span class="token punctuation">,</span> max_d<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span class="token keyword">const</span> yScale <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> innerWidth<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>d3.max(数据，回调：如何提取数据的值)：求出数据某一属性的最大值</p><h4 id="2-d3-scaleBand-：序数比例尺"><a href="#2-d3-scaleBand-：序数比例尺" class="headerlink" title="2.d3.scaleBand()：序数比例尺"></a>2.d3.scaleBand()：序数比例尺</h4><p>domain：离散型 range：连续性</p><p>可以理解为用domain将range分割</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> scale_b <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleBand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 离散型</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-d3-scaleOrdinal-：序数比例尺"><a href="#3-d3-scaleOrdinal-：序数比例尺" class="headerlink" title="3.d3.scaleOrdinal()：序数比例尺"></a>3.d3.scaleOrdinal()：序数比例尺</h4><p>domain：离散型 range：离散型</p><p>可以简单理解为map映射</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> scaleO <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 离散型</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 离散型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成颜色比例尺</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> color <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleOrdinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span>naiveKeys<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>schemeSet2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值"><a href="#4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值" class="headerlink" title="4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)"></a>4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)</h4><p>domain：连续型 range：离散型</p><p>可以理解为scaleBand的逆变换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> scaleQ <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleQuantize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 离散型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-d3-scaleTime-：时间比例尺"><a href="#5-d3-scaleTime-：时间比例尺" class="headerlink" title="5.d3.scaleTime()：时间比例尺"></a>5.d3.scaleTime()：时间比例尺</h4><p>domain：连续型，是时间 range：连续，是刻度</p><p>类似于d3.scaleLinear()线性比例尺，只不过输入域变成了时间轴</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> scaleT <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 连续型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="6-颜色比例尺"><a href="#6-颜色比例尺" class="headerlink" title="6.颜色比例尺"></a>6.颜色比例尺</h4><p>d3提供了一些颜色比例尺，10就是10种颜色</p><p>①Categorical系列——离散型颜色<br>d3.schemeCategory10 // 10就是10种颜色</p><p><img src="/css/images/d3/category10.png" alt="category10"></p><p>d3.schemeAccent</p><p><img src="/css/images/d3/Accent.png" alt="Accent"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义一个序数颜色比例尺</span><span class="token keyword">const</span> color <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>schemeCategory10<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②Diverging——连续型颜色（渐变颜色）</p><p>方式一：d3.<strong>interpolateBrBG</strong>(<em>t</em>)——t =&gt; [0, 1]</p><h3 id="五-Data-Join"><a href="#五-Data-Join" class="headerlink" title="五.Data Join"></a>五.Data Join</h3><h4 id="1-本质上是将数据与图元进行绑定"><a href="#1-本质上是将数据与图元进行绑定" class="headerlink" title="1.本质上是将数据与图元进行绑定"></a>1.本质上是将数据与图元进行绑定</h4><p>d3.selectAll(.class类名).data(data)</p><h4 id="2-d3绑定数据的三个状态"><a href="#2-d3绑定数据的三个状态" class="headerlink" title="2.d3绑定数据的三个状态"></a>2.d3绑定数据的三个状态</h4><p>enter:</p><ul><li><p>有数据没有图元</p></li><li><p>d3会自动搞清楚哪些数据是新增的</p></li><li><p>根据新增的数据生成对应的图元</p></li><li><p>生成图元的占位，占位的内容需要通过append添加</p></li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'.class'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'rect'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>update:</p><ul><li><p>有图元有数据</p></li><li><p>update作为实际可视化任务最常用的状态，经常被单独封装为一个函数</p></li><li><p>updateSelection.merge(enterSelection).attr().attr()</p><ul><li>将两个selection合并到一起操作</li><li>enterSelection需要至少append()图元</li></ul></li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">durantion</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> <span class="token function">xScale</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exit</p><ul><li><p>有图元没数据</p></li><li><p>d3会自动搞清楚哪些图元是不绑定数据的</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">const p &#x3D; d3.selectAll(&#39;.class&#39;).data(data).exit().remove()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-读取数据"><a href="#3-读取数据" class="headerlink" title="3.读取数据"></a>3.读取数据</h4><p>d3.csv(‘path/tp/data.csv’).then(res =&gt; {})</p><h3 id="六-path"><a href="#六-path" class="headerlink" title="六.path"></a>六.path</h3><h4 id="1-path元素的形状是通过属性d来定义的"><a href="#1-path元素的形状是通过属性d来定义的" class="headerlink" title="1.path元素的形状是通过属性d来定义的"></a>1.path元素的形状是通过属性d来定义的</h4><h4 id="2-d3-Path生成器"><a href="#2-d3-Path生成器" class="headerlink" title="2.d3 Path生成器"></a>2.d3 Path生成器</h4><ul><li>d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5) —-用于折线图</li><li>d3.geoPath().projection() —-用于地图</li><li>d3.area() —-用于主题河流</li><li>d3.arc().innerRadius().outerRadius() —-用于饼图</li><li>d3.lineRadial().angle().radius() —-极坐标系版本的d3.line()</li></ul><h4 id="3-d3-line"><a href="#3-d3-line" class="headerlink" title="3.d3.line()"></a>3.d3.line()</h4><p>const line = d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5)</p><p>使用line:</p><p>d3.select(‘path’).datum(data) // 给特定一个图元绑定一个数据，data是给一批图元绑定一批数据</p><p>.attr(‘d’, line) // 给path配置line</p><h3 id="七-interaction"><a href="#七-interaction" class="headerlink" title="七.interaction"></a>七.interaction</h3><h4 id="1-地图数据的表达-Topojson-amp-Geojson"><a href="#1-地图数据的表达-Topojson-amp-Geojson" class="headerlink" title="1.地图数据的表达: Topojson &amp; Geojson"></a>1.地图数据的表达: Topojson &amp; Geojson</h4><h4 id="2-json数据的读取"><a href="#2-json数据的读取" class="headerlink" title="2.json数据的读取"></a>2.json数据的读取</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">d3<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">'path/to/data.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>… … …<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-topojson转geojson"><a href="#3-topojson转geojson" class="headerlink" title="3.topojson转geojson"></a>3.topojson转geojson</h4><p>借助topojson.js库</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">geojson <span class="token operator">=</span> topojson<span class="token punctuation">.</span><span class="token function">feature</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>countries<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-地图数据的可视化"><a href="#4-地图数据的可视化" class="headerlink" title="4.地图数据的可视化"></a>4.地图数据的可视化</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> projection <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">geoNaturalEarth1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pathGenerator <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">geoPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">projection</span><span class="token punctuation">(</span>projection<span class="token punctuation">)</span><span class="token comment">// geo适应宽高</span>projection<span class="token punctuation">.</span><span class="token function">fitSize</span><span class="token punctuation">(</span><span class="token punctuation">[</span>innerWidth<span class="token punctuation">,</span> innerHeight<span class="token punctuation">]</span><span class="token punctuation">,</span> geojson<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// path使用geo</span>g<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>geojson<span class="token punctuation">.</span>features<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span>pathGenerator  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-事件"><a href="#5-事件" class="headerlink" title="5.事件"></a>5.事件</h4><p>事件的设置对应于D3中的.on(‘eventName’, callBack) </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">d3<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>图元.on(事件类型, 触发动作) </p><h4 id="6-d3-tip"><a href="#6-d3-tip" class="headerlink" title="6.d3-tip"></a>6.d3-tip</h4><p>tooltip库，自动在‘合适’的位置显示对话框</p><h3 id="八-stack-堆叠"><a href="#八-stack-堆叠" class="headerlink" title="八.stack(堆叠)"></a>八.stack(堆叠)</h3><h4 id="1-d3-stack"><a href="#1-d3-stack" class="headerlink" title="1.d3.stack()"></a>1.d3.stack()</h4><p>本质上是d3.js提供的用于数据预处理的接口（生成堆叠数据）</p><h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> stackData <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>naiveKeys<span class="token punctuation">)</span> <span class="token comment">// 需要堆叠哪些字段的数据</span><span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span>stackOrderNone<span class="token punctuation">)</span> <span class="token comment">// 怎么排序 stackOrderNone：按原生数据的顺序 stackAscending: 升序排序 stackDescending: 降序排序</span><span class="token punctuation">(</span>naiveData<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九-tree"><a href="#九-tree" class="headerlink" title="九.tree"></a>九.tree</h3><h4 id="1-层级数据预处理d3-hierarchy"><a href="#1-层级数据预处理d3-hierarchy" class="headerlink" title="1.层级数据预处理d3.hierarchy"></a>1.层级数据预处理d3.hierarchy</h4><ul><li>d3.hierarchy</li></ul><ul><li>保持数据的原始结构，并将输入层级数据转换成D3中的hierarcy对象(result instanceof d3.hierarchy)，同时引入: </li><li>height （* 不是逐层递减）、depth、children (原始结构) parent、（data 原始数据的映射）</li></ul><ul><li>•d3.hierarchy可作为一个‘中间结果’，继续输入到更多D3.js提供的数据预处理接口中</li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> root <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">hierarchy</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-层级数据预处理d3-tree"><a href="#2-层级数据预处理d3-tree" class="headerlink" title="2.层级数据预处理d3.tree()"></a>2.层级数据预处理d3.tree()</h4><ul><li><p>d3.tree().size([innerHeight, innerWidth])</p></li><li><p>返回一个函数</p></li><li><p>接受参数为d3.hierarchy</p></li><li><p>函数会根据设置的size将树形结构的每个节点映射到空间中‘合适’的位置（添加横纵坐标节点）</p></li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">root <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">[</span>innerHeight<span class="token punctuation">,</span> innerWidth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-root-links-和-d3-linkHorizontal"><a href="#3-root-links-和-d3-linkHorizontal" class="headerlink" title="3.root.links()和 d3.linkHorizontal()"></a>3.root.links()和 d3.linkHorizontal()</h4><ul><li><p>root.links()返回树形结构中存在的所有‘链接’(带有source和target树形)，作为data join的参数，供后续设置三次贝塞尔曲线的x和y使用</p></li><li><p>d3.linkHorizontal()生成一个从source到target的三次贝塞尔曲线。.x(…)与.y(…)分别表示如何在source与target中取横纵坐标值。默认生成的是纵向的树形图，横纵坐标值取相反的值将图形翻转过来</p></li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">g<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">links</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"fill"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"stroke"</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"stroke-width"</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">linkHorizontal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-root-descendants"><a href="#4-root-descendants" class="headerlink" title="4.root.descendants()"></a>4.root.descendants()</h4><ul><li>root.descendants()返回层级结构中的所有节点，广度优先（层次优先），返回的内容本质上是对象的数组</li></ul> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">g<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">descendants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>children <span class="token operator">?</span> d<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">:</span> d<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'font-size'</span><span class="token punctuation">,</span> <span class="token string">'0.8em'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'text-anchor'</span><span class="token punctuation">,</span> <span class="token parameter">d</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token string">'end'</span> <span class="token operator">:</span> <span class="token string">'start'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  ​</p>]]></content>
      
      
      <categories>
          
          <category> 前端可视化库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> d3js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
