{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo1.png","path":"medias/logo1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/404/data.js","path":"libs/404/data.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/404/bodymovin.js","path":"libs/404/bodymovin.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/7.jpeg","path":"medias/banner/7.jpeg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/images/d3/Accent.png","path":"css/images/d3/Accent.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/images/d3/category10.png","path":"css/images/d3/category10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1322ea343fdfe9202f4adee16ab939bf5020fb8f","modified":1634174963920},{"_id":"source/404/index.md","hash":"f856d43418c22a2e0acda0dc8dfc338c5f591fb4","modified":1633947728096},{"_id":"source/about/index.md","hash":"64e5c8f7a85a56901fc9933819166691c4b9405b","modified":1633947611008},{"_id":"source/_posts/echarts.md","hash":"059c379416e2e5e044d66181ec797652efba9043","modified":1634174676537},{"_id":"source/_posts/d3.md","hash":"5b2ce760d36ab67d16c2771e5f2fea102021fae2","modified":1634175521858},{"_id":"source/_posts/svg.md","hash":"076ade0f068720fd93ae5efff7552bb639ac96cc","modified":1634007704120},{"_id":"source/_posts/react.md","hash":"f67e6336fb5ae333db43b5392bd6ffdd82d1611e","modified":1634174567096},{"_id":"source/_posts/.DS_Store","hash":"6a93131a0f1b4b3d9a87381df67b8479a3099557","modified":1633967286344},{"_id":"source/categories/index.md","hash":"4f7d18516ccfef716cde6a0bbacbfdd026bca636","modified":1633967054888},{"_id":"source/contact/index.md","hash":"a35f736aafe98684cf3656a769dcb58cf08602d9","modified":1633967103582},{"_id":"source/tags/index.md","hash":"2174b6bda01163c45fd2e4451484f9a27a8c9d5c","modified":1633967131503},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1633941310176},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1633941310176},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b1e2d8146b74ae4fe695a9a6a2576e3fdaf5043c","modified":1634010241260},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1633941310177},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"86d963a92486a52001d0cb79ab39ed963d4727e4","modified":1634026114266},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1633941310176},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a191ac31cdeed997713cb031e46be1c5171822cd","modified":1633941310177},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"bb583b880bebd29bdba0487068db60b37c2fdebf","modified":1633941310177},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1633941310177},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9ce5e25ef9fdbfd877717c99c93483e6bbb97bfd","modified":1633948848572},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1633949152365},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"f421840a8076ebe6a53c85483d6a8e8634af9cc0","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1633941310183},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1633941310183},{"_id":"themes/hexo-theme-matery/source/favicon.ico","hash":"0240f94b974b77da139423d0a9456d8af57aab36","modified":1633946083363},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1633941310185},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"218c4b6ea200533a68f4d76ae04cfce84029c179","modified":1634008776640},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"bee96ada718a8a1b5acd3a0ba7e48423fdae1dff","modified":1634026120979},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"04fd4a5b45d3ca38bd83c270014bd43f13cd18c4","modified":1633950269635},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1633941310178},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"3b725258ccdfd193d8aae24c726a9a3a2a924a84","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"1e5c0c6acef6462e63455b4cff172c342a424dbc","modified":1633949497319},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"4002adc615f6d3959993dcb62004a07adfc3fe4f","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1633941310179},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1633941310182},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1633941310180},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1633941310181},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1633941310180},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1633941310184},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1633941310181},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1633941310184},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1633941310179},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1633941310184},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"5f4d076c01ca377ff4c86a9f4f44dcdb6ed47f93","modified":1633966631838},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1633941310184},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/libs/.DS_Store","hash":"f24eb76645c2d8280f57463d8f702018e6674e40","modified":1633948586811},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"160aa0cd903b498205fafccc7036a07ec62a1664","modified":1633947205012},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"9ae9d8e59ba4aa3be8c6721ecfab5d392e62b61c","modified":1634026750316},{"_id":"themes/hexo-theme-matery/source/medias/logo1.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1633941310000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1633941310226},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1633941310185},{"_id":"themes/hexo-theme-matery/source/css/images/.DS_Store","hash":"5c940d750f93a11e365f89b00f33c63348110ef8","modified":1634174968182},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"3d7a494663e84ec1d489a376c97a582760e12339","modified":1634006804554},{"_id":"themes/hexo-theme-matery/source/libs/404/.DS_Store","hash":"c241eb1293b90c4da070dd7e275fd35a4bfdb789","modified":1633967197999},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1633941310186},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1633941310186},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1633941310186},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1633941310201},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1633941310202},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1633941310208},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1633941310207},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1633941310208},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1633941310208},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1633941310205},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1633941310210},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1633941310213},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1633941310213},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1633941310214},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/banner/7.jpeg","hash":"95deef251bc6995697c748933016fa39985f3586","modified":1633949972517},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1633941310220},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1633941310221},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1633941310221},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1633941310221},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1633941310223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1633941310222},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1633941310223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1633941310223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1633941310224},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1633941310223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1633941310225},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1633941310225},{"_id":"themes/hexo-theme-matery/source/css/images/d3/Accent.png","hash":"162b9c845c8d6d191308c8e862a530b87e54cd27","modified":1625898838000},{"_id":"themes/hexo-theme-matery/source/css/images/d3/category10.png","hash":"4d8abb428de64e0bdcd46dcad936558ca4b96f6d","modified":1625887594000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1633941310192},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1633941310193},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1633941310193},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1633941310193},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1633941310209},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1633941310212},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1633941310208},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1633941310208},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1633941310202},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1633941310215},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1633941310216},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1633941310217},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1633941310217},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1633941310220},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1633941310220},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1633941310220},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1633941310221},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1633941310222},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1633941310223},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1633941310222},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1633941310222},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1633941310225},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1633941310224},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1633941310225},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"860e10caee0f71fcfbb9a2a121dd6d965fe65345","modified":1633946760477},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1633941310187},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1633941310191},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1633941310192},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1633941310192},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1633941310200},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1633941310186},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1633941310200},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1633941310219},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1633941310211},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1633941310210},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1633941310216},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1633941310215},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1633941310218},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1633941310218},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"8266caa03ac527f67eccb011e85519f5247fb121","modified":1633946760902},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1633941310193},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1633941310194},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1633941310200},{"_id":"themes/hexo-theme-matery/source/libs/404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1499821912000},{"_id":"themes/hexo-theme-matery/source/libs/404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1499821912000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1633941310218},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1633941310214},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1633941310190},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1633941310205},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1633941310207},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1633941310198},{"_id":"public/search.xml","hash":"8ec6e14725c956472f5161fbaaab9fcc7b710be1","modified":1634175440033},{"_id":"public/404/index.html","hash":"487ddfd9f2a1da1e52f279b0eed1c93672b13044","modified":1634175440033},{"_id":"public/categories/index.html","hash":"e77e835f8e9176c551e058614b2827b95a657241","modified":1634175440033},{"_id":"public/contact/index.html","hash":"9ddc8c6a45c15a5000d532405a8a25acbbf2d7ad","modified":1634175440033},{"_id":"public/about/index.html","hash":"cfb115c7e87f0e013931fd1bb6629c3fa9d1d5da","modified":1634175440033},{"_id":"public/tags/index.html","hash":"b2ecd55e70e0d6d3fa856b29925f26eb1f76fde1","modified":1634175440033},{"_id":"public/2021/09/22/svg/index.html","hash":"b62192d8a7df180b9ece985381eb01f33a7744a5","modified":1634175440033},{"_id":"public/2021/08/25/react/index.html","hash":"08961ede4a420d119bfb4a772a17d842bdabd8f2","modified":1634175440033},{"_id":"public/2021/07/17/echarts/index.html","hash":"a22e6d8cc46b607aeac6500ea28e349183305f31","modified":1634175440033},{"_id":"public/2021/07/14/d3/index.html","hash":"833cc7574cacd95d4e1c7120d9d93acc0a6aa82e","modified":1634175440033},{"_id":"public/archives/index.html","hash":"2eb36e5ccfc636d46d631aaca6f8e01ea3fa2f75","modified":1634175440033},{"_id":"public/archives/2021/index.html","hash":"5ec90014e4cc20a588361be0c34df2bc28ea1a54","modified":1634175440033},{"_id":"public/archives/2021/07/index.html","hash":"c98b87364ee86d0a257f88c29ba3f1c466426b30","modified":1634175440033},{"_id":"public/archives/2021/08/index.html","hash":"44123e394a27f8e9a2ce3fc4951e02b887f99424","modified":1634175440033},{"_id":"public/archives/2021/09/index.html","hash":"c807f09ab31e2acd07f2ace8fc0b09b4ebb65065","modified":1634175440033},{"_id":"public/categories/前端可视化库/index.html","hash":"eebaaa49c1fd1af0af19d9063f57540287d329d1","modified":1634175440033},{"_id":"public/categories/前端框架/index.html","hash":"66dd4b76fbf164f47ffca9604480d07d4dfc8d89","modified":1634175440033},{"_id":"public/index.html","hash":"a67ba34fbacce376dc4c17c06e126c46cf2fd6ef","modified":1634175440033},{"_id":"public/tags/d3js/index.html","hash":"411889e423b89a32f9e282a41df45dc2555a41f2","modified":1634175440033},{"_id":"public/tags/react/index.html","hash":"55d653eb9e14c1cb232cf775e83d7748d87b04c8","modified":1634175440033},{"_id":"public/tags/echarts/index.html","hash":"9ab1f68e3eb0ad5e05d775fee4f87a8e9a10f352","modified":1634175440033},{"_id":"public/tags/svg/index.html","hash":"47a50d33c1c4e279d3cee592159516b78f962d5e","modified":1634175440033},{"_id":"public/favicon.ico","hash":"0240f94b974b77da139423d0a9456d8af57aab36","modified":1634175440033},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1634175440033},{"_id":"public/medias/avatar.jpg","hash":"160aa0cd903b498205fafccc7036a07ec62a1664","modified":1634175440033},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1634175440033},{"_id":"public/medias/logo1.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1634175440033},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1634175440033},{"_id":"public/medias/logo.png","hash":"3d7a494663e84ec1d489a376c97a582760e12339","modified":1634175440033},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1634175440033},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1634175440033},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1634175440033},{"_id":"public/medias/banner/7.jpeg","hash":"95deef251bc6995697c748933016fa39985f3586","modified":1634175440033},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1634175440033},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1634175440033},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1634175440033},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1634175440033},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1634175440033},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1634175440033},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1634175440033},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1634175440033},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1634175440033},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1634175440033},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1634175440033},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1634175440033},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1634175440033},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1634175440033},{"_id":"public/css/images/d3/Accent.png","hash":"162b9c845c8d6d191308c8e862a530b87e54cd27","modified":1634175440033},{"_id":"public/css/images/d3/category10.png","hash":"4d8abb428de64e0bdcd46dcad936558ca4b96f6d","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1634175440033},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1634175440033},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1634175440033},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1634175440033},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1634175440033},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1634175440033},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1634175440033},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1634175440033},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1634175440033},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1634175440033},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1634175440033},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1634175440033},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1634175440033},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1634175440033},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1634175440033},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1634175440033},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1634175440033},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1634175440033},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1634175440033},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1634175440033},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1634175440033},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1634175440033},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1634175440033},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1634175440033},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1634175440033},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1634175440033},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1634175440033},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1634175440033},{"_id":"public/medias/reward/wechat.png","hash":"860e10caee0f71fcfbb9a2a121dd6d965fe65345","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1634175440033},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1634175440033},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1634175440033},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1634175440033},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1634175440033},{"_id":"public/medias/reward/alipay.jpg","hash":"8266caa03ac527f67eccb011e85519f5247fb121","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1634175440033},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1634175440033},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1634175440033},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1634175440033},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1634175440033},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1634175440033},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1634175440033},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1634175440033},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1634175440033},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1634175440033},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1634175440033},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1634175440033},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1634175440033},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1634175440033},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1634175440033},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1634175440033},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1634175440033},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1634175440033},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1634175440033},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1634175440033},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1634175440033},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1634175440033},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1634175440033},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1634175440033},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1634175440033},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1634175440033},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1634175440033},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1634175440033},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1634175440033},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1634175440033},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1634175440033},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1634175440033},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1634175440033},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1634175440033},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1634175440033},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1634175440033},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1634175440033},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1634175440033},{"_id":"public/css/matery.css","hash":"5f4d076c01ca377ff4c86a9f4f44dcdb6ed47f93","modified":1634175440033},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1634175440033},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1634175440033},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1634175440033},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1634175440033},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1634175440033},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1634175440033},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1634175440033},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1634175440033},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1634175440033},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1634175440033},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1634175440033},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1634175440033},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1634175440033},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1634175440033},{"_id":"public/libs/404/bodymovin.js","hash":"0101a4545f219753bb617e9f1794444694b3e7d0","modified":1634175440033},{"_id":"public/libs/404/data.js","hash":"a9ba4005f96055774d3ff6977bd420d46da42da7","modified":1634175440033},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1634175440033},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1634175440033},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1634175440033}],"Category":[{"name":"前端可视化库","_id":"ckuq9v3pa0004gxuq7erxdrxl"},{"name":"前端框架","_id":"ckuq9v3ph000hgxuq4avi7co3"}],"Data":[],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-10-11T10:22:08.096Z","path":"404/index.html","comments":1,"_id":"ckuq9v3oz0000gxuq8zn2axcf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-10-11T10:43:03.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-10-11 18:43:03\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-10-11T15:44:14.888Z","path":"categories/index.html","comments":1,"_id":"ckuq9v3p70002gxuq0xg0ahc7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"联系小的","date":"2021-10-11T10:20:51.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: 联系小的\ndate: 2021-10-11 18:20:51\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-10-11T15:45:03.582Z","path":"contact/index.html","comments":1,"_id":"ckuq9v3pc0006gxuq3jqk7jfb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"有关于我","date":"2021-10-11T10:17:45.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 有关于我\ndate: 2021-10-11 18:17:45\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-10-11T10:20:11.008Z","path":"about/index.html","comments":1,"_id":"ckuq9v3pc0007gxuq86gqa96r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"🏷️标签","date":"2021-10-11T10:20:39.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 🏷️标签\ndate: 2021-10-11 18:20:39\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-10-11T15:45:31.503Z","path":"tags/index.html","comments":1,"_id":"ckuq9v3pd0008gxuq1avv9cfl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"d3相关笔记","keywords":"d3","_content":"### 一.使用d3查询svg\n\nd3.select()、d3.selectAll()\n\n### 二.使用d3设置svg中的属性\n\nd3.attr()\n\n常见的属性：\n\n- id、class\n- x，y，cx，cy（cx、cy是圆的xy坐标）\n- fill（颜色填充color）、stroke（边框border）\n- height、width、r（圆的半径）\n- transform（translate、rotate、scale）\n\n### 三.使用d3添加、删除svg元素\n\nelement.append()、element.remove()\n\n### 四.d3的比例尺\n\n#### 1.d3.scaleLinear()：线性比例尺\n\ndomain:：连续型 range：连续型\n\n```javascript\nconst xScale = d3.scaleLinear()\n.domain([min_d, max_d]) // 连续型\n.range(min, max) // 连续型\n\nconst yScale = d3.scaleLinear()\n.domain([0, d3.max(data, item => item.value)])\n.range([0, innerWidth])\n```\n\nd3.max(数据，回调：如何提取数据的值)：求出数据某一属性的最大值\n\n#### 2.d3.scaleBand()：序数比例尺\n\ndomain：离散型 range：连续性\n\n可以理解为用domain将range分割\n\n```javascript\nconst scale_b = d3.scaleBand()\n.domian([1,2,3,4]) // 离散型\n.range([0, 100]) // 连续型\n```\n\n#### 3.d3.scaleOrdinal()：序数比例尺\n\ndomain：离散型 range：离散型\n\n可以简单理解为map映射\n\n```javascript\nconst scaleO = d3.scaleOrdinal()\n.domain(['a','b','c']) // 离散型\n.range([10, 20, 30]) // 离散型\n```\n\n生成颜色比例尺\n\n```javascript\nconst color = d3.scaleOrdinal().domain(naiveKeys).range(d3.schemeSet2)\n```\n\n\n\n#### 4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)\n\ndomain：连续型 range：离散型\n\n可以理解为scaleBand的逆变换\n\n```javascript\nconst scaleQ = d3.scaleQuantize()\n.domain([0, 10]) // 连续型\n.range(['a', 'b', 'c']) // 离散型\n```\n\n#### 5.d3.scaleTime()：时间比例尺\n\ndomain：连续型，是时间 range：连续，是刻度\n\n类似于d3.scaleLinear()线性比例尺，只不过输入域变成了时间轴\n\n```javascript\nconst scaleT = d3.scaleTime()\n.domain([new Date(2020, 01, 01), new Date(2021, 01, 01)]) // 连续型\n.range([0, 100]) // 连续型\n```\n\n#### 6.颜色比例尺\n\nd3提供了一些颜色比例尺，10就是10种颜色\n\n①Categorical系列——离散型颜色\nd3.schemeCategory10 // 10就是10种颜色\n\n![category10](/css/images/d3/category10.png)\n\nd3.schemeAccent\n\n![Accent](/css/images/d3/Accent.png)\n\n```javascript\n// 定义一个序数颜色比例尺\nconst color = d3.scaleLinear(d3.schemeCategory10)\n```\n\n②Diverging——连续型颜色（渐变颜色）\n\n方式一：d3.**interpolateBrBG**(*t*)——t => [0, 1]\n\n### 五.Data Join\n\n#### 1.本质上是将数据与图元进行绑定\n\nd3.selectAll(.class类名).data(data)\n\n#### 2.d3绑定数据的三个状态\n\nenter:\n\n- 有数据没有图元\n\n- d3会自动搞清楚哪些数据是新增的\n\n- 根据新增的数据生成对应的图元\n\n- 生成图元的占位，占位的内容需要通过append添加\n\n ```javascript\n  const p = d3.selectAll('.class').data(data).enter().append('rect').attr(...)\n  ```\nupdate:\n\n- 有图元有数据\n\n- update作为实际可视化任务最常用的状态，经常被单独封装为一个函数\n\n- updateSelection.merge(enterSelection).attr().attr()\n\n  - 将两个selection合并到一起操作\n  - enterSelection需要至少append()图元\n\n ```javascript\n  d3.selectAll(.class).data(data).update().transition().durantion(3000).attr('width', d => xScale(d.value))\n  ```\nexit\n\n- 有图元没数据\n\n- d3会自动搞清楚哪些图元是不绑定数据的\n\n ```\n  const p = d3.selectAll('.class').data(data).exit().remove()\n  ```\n\n#### 3.读取数据\n\nd3.csv('path/tp/data.csv').then(res => {})\n\n### 六.path\n\n#### 1.path元素的形状是通过属性d来定义的\n\n#### 2.d3 Path生成器\n\n- d3.line().x(d => xScale(xValue)).y(d => yScale(yValue)).curve(d3.curveCardinal.tension(0.5) ----用于折线图\n- d3.geoPath().projection() ----用于地图\n- d3.area() ----用于主题河流\n- d3.arc().innerRadius().outerRadius() ----用于饼图\n- d3.lineRadial().angle().radius() ----极坐标系版本的d3.line()\n\n#### 3.d3.line()\n\nconst line = d3.line().x(d => xScale(xValue)).y(d => yScale(yValue)).curve(d3.curveCardinal.tension(0.5)\n\n使用line:\n\nd3.select('path').datum(data) // 给特定一个图元绑定一个数据，data是给一批图元绑定一批数据\n\n.attr('d', line) // 给path配置line\n\n### 七.interaction\n\n#### 1.地图数据的表达: Topojson & Geojson\n\n#### 2.json数据的读取\n\n```javascript\nd3.json('path/to/data.json').then( data => {… … …} ) \n```\n\n#### 3.topojson转geojson\n\n借助topojson.js库\n\n```javascript\ngeojson = topojson.feature(data, data.objects.countries)\n```\n\n#### 4.地图数据的可视化\n\n```javascript\nconst projection = d3.geoNaturalEarth1();\nconst pathGenerator = d3.geoPath().projection(projection)\n// geo适应宽高\nprojection.fitSize([innerWidth, innerHeight], geojson);\n// path使用geo\ng.selectAll(path).data(geojson.features).join()\n\t.attr('d',pathGenerator  )\n```\n\n#### 5.事件\n\n事件的设置对应于D3中的.on(‘eventName’, callBack) \n\n```javascript\nd3.selectAll('path').on('click', function () {\n  d3.select(this).attr()\n})\n```\n\n图元.on(事件类型, 触发动作) \n\n#### 6.d3-tip\n\ntooltip库，自动在‘合适’的位置显示对话框\n\n### 八.stack(堆叠)\n\n#### 1.d3.stack()\n\n本质上是d3.js提供的用于数据预处理的接口（生成堆叠数据）\n\n#### 2.语法\n\n```javascript\nconst stackData = d3.stack()\n\t.keys(naiveKeys) // 需要堆叠哪些字段的数据\n\t.order(d3.stackOrderNone) // 怎么排序 stackOrderNone：按原生数据的顺序 stackAscending: 升序排序 stackDescending: 降序排序\n\t(naiveData)\n```\n\n### 九.tree\n\n#### 1.层级数据预处理d3.hierarchy\n\n- d3.hierarchy\n\n\n- 保持数据的原始结构，并将输入层级数据转换成D3中的hierarcy对象(result instanceof d3.hierarchy)，同时引入: \n- height （* 不是逐层递减）、depth、children (原始结构) parent、（data 原始数据的映射）\n\n\n- •d3.hierarchy可作为一个‘中间结果’，继续输入到更多D3.js提供的数据预处理接口中\n\n ```javascript\n  const root = d3.hierarchy(data)\n  ```\n\n#### 2.层级数据预处理d3.tree()\n\n- d3.tree().size([innerHeight, innerWidth])\n\n- 返回一个函数\n\n- 接受参数为d3.hierarchy\n\n- 函数会根据设置的size将树形结构的每个节点映射到空间中‘合适’的位置（添加横纵坐标节点）\n\n ```javascript\n  root = d3.tree().size([innerHeight, innerWidth])(root)\n  ```\n\n#### 3.root.links()和 d3.linkHorizontal()\n\n- root.links()返回树形结构中存在的所有‘链接’(带有source和target树形)，作为data join的参数，供后续设置三次贝塞尔曲线的x和y使用\n\n- d3.linkHorizontal()生成一个从source到target的三次贝塞尔曲线。.x(…)与.y(…)分别表示如何在source与target中取横纵坐标值。默认生成的是纵向的树形图，横纵坐标值取相反的值将图形翻转过来\n\n ```javascript\n  g.selectAll(\"path\")\n  \t.data(root.links())\n  \t.join(\"path\")\n  \t.attr(\"fill\", \"none\")\n  \t.attr(\"stroke\", \"black\")\n  \t.attr(\"stroke-width\", 1.5)\n  \t.attr(\"d\", d3.linkHorizontal().x(d => d.y).y(d => d.x));\n  ```\n\n#### 4.root.descendants()\n\n- root.descendants()返回层级结构中的所有节点，广度优先（层次优先），返回的内容本质上是对象的数组\n\n ```javascript\n  g.selectAll('text')\n  \t.data(root.descendants())\n  \t.join('text')\n  \t.text(d => d.data.name)\n  \t.attr('x', d => d.children ? d.y - 8 : d.y + 8)\n  \t.attr('y', d => d.x + 5)\n  \t.attr('font-size', '0.8em')\n  \t.attr('text-anchor', d => d.children ? 'end' : 'start')\n  ```\n\n  ​","source":"_posts/d3.md","raw":"---\ntitle: d3相关笔记\ntag: d3js\nkeywords: d3\ncategories: 前端可视化库\n---\n### 一.使用d3查询svg\n\nd3.select()、d3.selectAll()\n\n### 二.使用d3设置svg中的属性\n\nd3.attr()\n\n常见的属性：\n\n- id、class\n- x，y，cx，cy（cx、cy是圆的xy坐标）\n- fill（颜色填充color）、stroke（边框border）\n- height、width、r（圆的半径）\n- transform（translate、rotate、scale）\n\n### 三.使用d3添加、删除svg元素\n\nelement.append()、element.remove()\n\n### 四.d3的比例尺\n\n#### 1.d3.scaleLinear()：线性比例尺\n\ndomain:：连续型 range：连续型\n\n```javascript\nconst xScale = d3.scaleLinear()\n.domain([min_d, max_d]) // 连续型\n.range(min, max) // 连续型\n\nconst yScale = d3.scaleLinear()\n.domain([0, d3.max(data, item => item.value)])\n.range([0, innerWidth])\n```\n\nd3.max(数据，回调：如何提取数据的值)：求出数据某一属性的最大值\n\n#### 2.d3.scaleBand()：序数比例尺\n\ndomain：离散型 range：连续性\n\n可以理解为用domain将range分割\n\n```javascript\nconst scale_b = d3.scaleBand()\n.domian([1,2,3,4]) // 离散型\n.range([0, 100]) // 连续型\n```\n\n#### 3.d3.scaleOrdinal()：序数比例尺\n\ndomain：离散型 range：离散型\n\n可以简单理解为map映射\n\n```javascript\nconst scaleO = d3.scaleOrdinal()\n.domain(['a','b','c']) // 离散型\n.range([10, 20, 30]) // 离散型\n```\n\n生成颜色比例尺\n\n```javascript\nconst color = d3.scaleOrdinal().domain(naiveKeys).range(d3.schemeSet2)\n```\n\n\n\n#### 4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)\n\ndomain：连续型 range：离散型\n\n可以理解为scaleBand的逆变换\n\n```javascript\nconst scaleQ = d3.scaleQuantize()\n.domain([0, 10]) // 连续型\n.range(['a', 'b', 'c']) // 离散型\n```\n\n#### 5.d3.scaleTime()：时间比例尺\n\ndomain：连续型，是时间 range：连续，是刻度\n\n类似于d3.scaleLinear()线性比例尺，只不过输入域变成了时间轴\n\n```javascript\nconst scaleT = d3.scaleTime()\n.domain([new Date(2020, 01, 01), new Date(2021, 01, 01)]) // 连续型\n.range([0, 100]) // 连续型\n```\n\n#### 6.颜色比例尺\n\nd3提供了一些颜色比例尺，10就是10种颜色\n\n①Categorical系列——离散型颜色\nd3.schemeCategory10 // 10就是10种颜色\n\n![category10](/css/images/d3/category10.png)\n\nd3.schemeAccent\n\n![Accent](/css/images/d3/Accent.png)\n\n```javascript\n// 定义一个序数颜色比例尺\nconst color = d3.scaleLinear(d3.schemeCategory10)\n```\n\n②Diverging——连续型颜色（渐变颜色）\n\n方式一：d3.**interpolateBrBG**(*t*)——t => [0, 1]\n\n### 五.Data Join\n\n#### 1.本质上是将数据与图元进行绑定\n\nd3.selectAll(.class类名).data(data)\n\n#### 2.d3绑定数据的三个状态\n\nenter:\n\n- 有数据没有图元\n\n- d3会自动搞清楚哪些数据是新增的\n\n- 根据新增的数据生成对应的图元\n\n- 生成图元的占位，占位的内容需要通过append添加\n\n ```javascript\n  const p = d3.selectAll('.class').data(data).enter().append('rect').attr(...)\n  ```\nupdate:\n\n- 有图元有数据\n\n- update作为实际可视化任务最常用的状态，经常被单独封装为一个函数\n\n- updateSelection.merge(enterSelection).attr().attr()\n\n  - 将两个selection合并到一起操作\n  - enterSelection需要至少append()图元\n\n ```javascript\n  d3.selectAll(.class).data(data).update().transition().durantion(3000).attr('width', d => xScale(d.value))\n  ```\nexit\n\n- 有图元没数据\n\n- d3会自动搞清楚哪些图元是不绑定数据的\n\n ```\n  const p = d3.selectAll('.class').data(data).exit().remove()\n  ```\n\n#### 3.读取数据\n\nd3.csv('path/tp/data.csv').then(res => {})\n\n### 六.path\n\n#### 1.path元素的形状是通过属性d来定义的\n\n#### 2.d3 Path生成器\n\n- d3.line().x(d => xScale(xValue)).y(d => yScale(yValue)).curve(d3.curveCardinal.tension(0.5) ----用于折线图\n- d3.geoPath().projection() ----用于地图\n- d3.area() ----用于主题河流\n- d3.arc().innerRadius().outerRadius() ----用于饼图\n- d3.lineRadial().angle().radius() ----极坐标系版本的d3.line()\n\n#### 3.d3.line()\n\nconst line = d3.line().x(d => xScale(xValue)).y(d => yScale(yValue)).curve(d3.curveCardinal.tension(0.5)\n\n使用line:\n\nd3.select('path').datum(data) // 给特定一个图元绑定一个数据，data是给一批图元绑定一批数据\n\n.attr('d', line) // 给path配置line\n\n### 七.interaction\n\n#### 1.地图数据的表达: Topojson & Geojson\n\n#### 2.json数据的读取\n\n```javascript\nd3.json('path/to/data.json').then( data => {… … …} ) \n```\n\n#### 3.topojson转geojson\n\n借助topojson.js库\n\n```javascript\ngeojson = topojson.feature(data, data.objects.countries)\n```\n\n#### 4.地图数据的可视化\n\n```javascript\nconst projection = d3.geoNaturalEarth1();\nconst pathGenerator = d3.geoPath().projection(projection)\n// geo适应宽高\nprojection.fitSize([innerWidth, innerHeight], geojson);\n// path使用geo\ng.selectAll(path).data(geojson.features).join()\n\t.attr('d',pathGenerator  )\n```\n\n#### 5.事件\n\n事件的设置对应于D3中的.on(‘eventName’, callBack) \n\n```javascript\nd3.selectAll('path').on('click', function () {\n  d3.select(this).attr()\n})\n```\n\n图元.on(事件类型, 触发动作) \n\n#### 6.d3-tip\n\ntooltip库，自动在‘合适’的位置显示对话框\n\n### 八.stack(堆叠)\n\n#### 1.d3.stack()\n\n本质上是d3.js提供的用于数据预处理的接口（生成堆叠数据）\n\n#### 2.语法\n\n```javascript\nconst stackData = d3.stack()\n\t.keys(naiveKeys) // 需要堆叠哪些字段的数据\n\t.order(d3.stackOrderNone) // 怎么排序 stackOrderNone：按原生数据的顺序 stackAscending: 升序排序 stackDescending: 降序排序\n\t(naiveData)\n```\n\n### 九.tree\n\n#### 1.层级数据预处理d3.hierarchy\n\n- d3.hierarchy\n\n\n- 保持数据的原始结构，并将输入层级数据转换成D3中的hierarcy对象(result instanceof d3.hierarchy)，同时引入: \n- height （* 不是逐层递减）、depth、children (原始结构) parent、（data 原始数据的映射）\n\n\n- •d3.hierarchy可作为一个‘中间结果’，继续输入到更多D3.js提供的数据预处理接口中\n\n ```javascript\n  const root = d3.hierarchy(data)\n  ```\n\n#### 2.层级数据预处理d3.tree()\n\n- d3.tree().size([innerHeight, innerWidth])\n\n- 返回一个函数\n\n- 接受参数为d3.hierarchy\n\n- 函数会根据设置的size将树形结构的每个节点映射到空间中‘合适’的位置（添加横纵坐标节点）\n\n ```javascript\n  root = d3.tree().size([innerHeight, innerWidth])(root)\n  ```\n\n#### 3.root.links()和 d3.linkHorizontal()\n\n- root.links()返回树形结构中存在的所有‘链接’(带有source和target树形)，作为data join的参数，供后续设置三次贝塞尔曲线的x和y使用\n\n- d3.linkHorizontal()生成一个从source到target的三次贝塞尔曲线。.x(…)与.y(…)分别表示如何在source与target中取横纵坐标值。默认生成的是纵向的树形图，横纵坐标值取相反的值将图形翻转过来\n\n ```javascript\n  g.selectAll(\"path\")\n  \t.data(root.links())\n  \t.join(\"path\")\n  \t.attr(\"fill\", \"none\")\n  \t.attr(\"stroke\", \"black\")\n  \t.attr(\"stroke-width\", 1.5)\n  \t.attr(\"d\", d3.linkHorizontal().x(d => d.y).y(d => d.x));\n  ```\n\n#### 4.root.descendants()\n\n- root.descendants()返回层级结构中的所有节点，广度优先（层次优先），返回的内容本质上是对象的数组\n\n ```javascript\n  g.selectAll('text')\n  \t.data(root.descendants())\n  \t.join('text')\n  \t.text(d => d.data.name)\n  \t.attr('x', d => d.children ? d.y - 8 : d.y + 8)\n  \t.attr('y', d => d.x + 5)\n  \t.attr('font-size', '0.8em')\n  \t.attr('text-anchor', d => d.children ? 'end' : 'start')\n  ```\n\n  ​","slug":"d3","published":1,"date":"2021-07-14T06:42:56.000Z","updated":"2021-10-14T01:38:41.858Z","_id":"ckuq9v3p20001gxuqcqh08a67","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一-使用d3查询svg\"><a href=\"#一-使用d3查询svg\" class=\"headerlink\" title=\"一.使用d3查询svg\"></a>一.使用d3查询svg</h3><p>d3.select()、d3.selectAll()</p>\n<h3 id=\"二-使用d3设置svg中的属性\"><a href=\"#二-使用d3设置svg中的属性\" class=\"headerlink\" title=\"二.使用d3设置svg中的属性\"></a>二.使用d3设置svg中的属性</h3><p>d3.attr()</p>\n<p>常见的属性：</p>\n<ul>\n<li>id、class</li>\n<li>x，y，cx，cy（cx、cy是圆的xy坐标）</li>\n<li>fill（颜色填充color）、stroke（边框border）</li>\n<li>height、width、r（圆的半径）</li>\n<li>transform（translate、rotate、scale）</li>\n</ul>\n<h3 id=\"三-使用d3添加、删除svg元素\"><a href=\"#三-使用d3添加、删除svg元素\" class=\"headerlink\" title=\"三.使用d3添加、删除svg元素\"></a>三.使用d3添加、删除svg元素</h3><p>element.append()、element.remove()</p>\n<h3 id=\"四-d3的比例尺\"><a href=\"#四-d3的比例尺\" class=\"headerlink\" title=\"四.d3的比例尺\"></a>四.d3的比例尺</h3><h4 id=\"1-d3-scaleLinear-：线性比例尺\"><a href=\"#1-d3-scaleLinear-：线性比例尺\" class=\"headerlink\" title=\"1.d3.scaleLinear()：线性比例尺\"></a>1.d3.scaleLinear()：线性比例尺</h4><p>domain:：连续型 range：连续型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> xScale <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>min_d<span class=\"token punctuation\">,</span> max_d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n\n<span class=\"token keyword\">const</span> yScale <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> innerWidth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>d3.max(数据，回调：如何提取数据的值)：求出数据某一属性的最大值</p>\n<h4 id=\"2-d3-scaleBand-：序数比例尺\"><a href=\"#2-d3-scaleBand-：序数比例尺\" class=\"headerlink\" title=\"2.d3.scaleBand()：序数比例尺\"></a>2.d3.scaleBand()：序数比例尺</h4><p>domain：离散型 range：连续性</p>\n<p>可以理解为用domain将range分割</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scale_b <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleBand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-d3-scaleOrdinal-：序数比例尺\"><a href=\"#3-d3-scaleOrdinal-：序数比例尺\" class=\"headerlink\" title=\"3.d3.scaleOrdinal()：序数比例尺\"></a>3.d3.scaleOrdinal()：序数比例尺</h4><p>domain：离散型 range：离散型</p>\n<p>可以简单理解为map映射</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleO <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>生成颜色比例尺</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span>naiveKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>schemeSet2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值\"><a href=\"#4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值\" class=\"headerlink\" title=\"4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)\"></a>4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)</h4><p>domain：连续型 range：离散型</p>\n<p>可以理解为scaleBand的逆变换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleQ <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleQuantize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-d3-scaleTime-：时间比例尺\"><a href=\"#5-d3-scaleTime-：时间比例尺\" class=\"headerlink\" title=\"5.d3.scaleTime()：时间比例尺\"></a>5.d3.scaleTime()：时间比例尺</h4><p>domain：连续型，是时间 range：连续，是刻度</p>\n<p>类似于d3.scaleLinear()线性比例尺，只不过输入域变成了时间轴</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleT <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-颜色比例尺\"><a href=\"#6-颜色比例尺\" class=\"headerlink\" title=\"6.颜色比例尺\"></a>6.颜色比例尺</h4><p>d3提供了一些颜色比例尺，10就是10种颜色</p>\n<p>①Categorical系列——离散型颜色<br>d3.schemeCategory10 // 10就是10种颜色</p>\n<p><img src=\"/css/images/d3/category10.png\" alt=\"category10\"></p>\n<p>d3.schemeAccent</p>\n<p><img src=\"/css/images/d3/Accent.png\" alt=\"Accent\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个序数颜色比例尺</span>\n<span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>schemeCategory10<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>②Diverging——连续型颜色（渐变颜色）</p>\n<p>方式一：d3.<strong>interpolateBrBG</strong>(<em>t</em>)——t =&gt; [0, 1]</p>\n<h3 id=\"五-Data-Join\"><a href=\"#五-Data-Join\" class=\"headerlink\" title=\"五.Data Join\"></a>五.Data Join</h3><h4 id=\"1-本质上是将数据与图元进行绑定\"><a href=\"#1-本质上是将数据与图元进行绑定\" class=\"headerlink\" title=\"1.本质上是将数据与图元进行绑定\"></a>1.本质上是将数据与图元进行绑定</h4><p>d3.selectAll(.class类名).data(data)</p>\n<h4 id=\"2-d3绑定数据的三个状态\"><a href=\"#2-d3绑定数据的三个状态\" class=\"headerlink\" title=\"2.d3绑定数据的三个状态\"></a>2.d3绑定数据的三个状态</h4><p>enter:</p>\n<ul>\n<li><p>有数据没有图元</p>\n</li>\n<li><p>d3会自动搞清楚哪些数据是新增的</p>\n</li>\n<li><p>根据新增的数据生成对应的图元</p>\n</li>\n<li><p>生成图元的占位，占位的内容需要通过append添加</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>update:</p>\n<ul>\n<li><p>有图元有数据</p>\n</li>\n<li><p>update作为实际可视化任务最常用的状态，经常被单独封装为一个函数</p>\n</li>\n<li><p>updateSelection.merge(enterSelection).attr().attr()</p>\n<ul>\n<li>将两个selection合并到一起操作</li>\n<li>enterSelection需要至少append()图元</li>\n</ul>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">durantion</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> <span class=\"token function\">xScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>exit</p>\n<ul>\n<li><p>有图元没数据</p>\n</li>\n<li><p>d3会自动搞清楚哪些图元是不绑定数据的</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">const p &#x3D; d3.selectAll(&#39;.class&#39;).data(data).exit().remove()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-读取数据\"><a href=\"#3-读取数据\" class=\"headerlink\" title=\"3.读取数据\"></a>3.读取数据</h4><p>d3.csv(‘path/tp/data.csv’).then(res =&gt; {})</p>\n<h3 id=\"六-path\"><a href=\"#六-path\" class=\"headerlink\" title=\"六.path\"></a>六.path</h3><h4 id=\"1-path元素的形状是通过属性d来定义的\"><a href=\"#1-path元素的形状是通过属性d来定义的\" class=\"headerlink\" title=\"1.path元素的形状是通过属性d来定义的\"></a>1.path元素的形状是通过属性d来定义的</h4><h4 id=\"2-d3-Path生成器\"><a href=\"#2-d3-Path生成器\" class=\"headerlink\" title=\"2.d3 Path生成器\"></a>2.d3 Path生成器</h4><ul>\n<li>d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5) —-用于折线图</li>\n<li>d3.geoPath().projection() —-用于地图</li>\n<li>d3.area() —-用于主题河流</li>\n<li>d3.arc().innerRadius().outerRadius() —-用于饼图</li>\n<li>d3.lineRadial().angle().radius() —-极坐标系版本的d3.line()</li>\n</ul>\n<h4 id=\"3-d3-line\"><a href=\"#3-d3-line\" class=\"headerlink\" title=\"3.d3.line()\"></a>3.d3.line()</h4><p>const line = d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5)</p>\n<p>使用line:</p>\n<p>d3.select(‘path’).datum(data) // 给特定一个图元绑定一个数据，data是给一批图元绑定一批数据</p>\n<p>.attr(‘d’, line) // 给path配置line</p>\n<h3 id=\"七-interaction\"><a href=\"#七-interaction\" class=\"headerlink\" title=\"七.interaction\"></a>七.interaction</h3><h4 id=\"1-地图数据的表达-Topojson-amp-Geojson\"><a href=\"#1-地图数据的表达-Topojson-amp-Geojson\" class=\"headerlink\" title=\"1.地图数据的表达: Topojson &amp; Geojson\"></a>1.地图数据的表达: Topojson &amp; Geojson</h4><h4 id=\"2-json数据的读取\"><a href=\"#2-json数据的读取\" class=\"headerlink\" title=\"2.json数据的读取\"></a>2.json数据的读取</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/data.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>… … …<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-topojson转geojson\"><a href=\"#3-topojson转geojson\" class=\"headerlink\" title=\"3.topojson转geojson\"></a>3.topojson转geojson</h4><p>借助topojson.js库</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">geojson <span class=\"token operator\">=</span> topojson<span class=\"token punctuation\">.</span><span class=\"token function\">feature</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>countries<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-地图数据的可视化\"><a href=\"#4-地图数据的可视化\" class=\"headerlink\" title=\"4.地图数据的可视化\"></a>4.地图数据的可视化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> projection <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">geoNaturalEarth1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pathGenerator <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">geoPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>projection<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// geo适应宽高</span>\nprojection<span class=\"token punctuation\">.</span><span class=\"token function\">fitSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>innerWidth<span class=\"token punctuation\">,</span> innerHeight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> geojson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// path使用geo</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>geojson<span class=\"token punctuation\">.</span>features<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span>pathGenerator  <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-事件\"><a href=\"#5-事件\" class=\"headerlink\" title=\"5.事件\"></a>5.事件</h4><p>事件的设置对应于D3中的.on(‘eventName’, callBack) </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>图元.on(事件类型, 触发动作) </p>\n<h4 id=\"6-d3-tip\"><a href=\"#6-d3-tip\" class=\"headerlink\" title=\"6.d3-tip\"></a>6.d3-tip</h4><p>tooltip库，自动在‘合适’的位置显示对话框</p>\n<h3 id=\"八-stack-堆叠\"><a href=\"#八-stack-堆叠\" class=\"headerlink\" title=\"八.stack(堆叠)\"></a>八.stack(堆叠)</h3><h4 id=\"1-d3-stack\"><a href=\"#1-d3-stack\" class=\"headerlink\" title=\"1.d3.stack()\"></a>1.d3.stack()</h4><p>本质上是d3.js提供的用于数据预处理的接口（生成堆叠数据）</p>\n<h4 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stackData <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>naiveKeys<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要堆叠哪些字段的数据</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>stackOrderNone<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 怎么排序 stackOrderNone：按原生数据的顺序 stackAscending: 升序排序 stackDescending: 降序排序</span>\n\t<span class=\"token punctuation\">(</span>naiveData<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"九-tree\"><a href=\"#九-tree\" class=\"headerlink\" title=\"九.tree\"></a>九.tree</h3><h4 id=\"1-层级数据预处理d3-hierarchy\"><a href=\"#1-层级数据预处理d3-hierarchy\" class=\"headerlink\" title=\"1.层级数据预处理d3.hierarchy\"></a>1.层级数据预处理d3.hierarchy</h4><ul>\n<li>d3.hierarchy</li>\n</ul>\n<ul>\n<li>保持数据的原始结构，并将输入层级数据转换成D3中的hierarcy对象(result instanceof d3.hierarchy)，同时引入: </li>\n<li>height （* 不是逐层递减）、depth、children (原始结构) parent、（data 原始数据的映射）</li>\n</ul>\n<ul>\n<li>•d3.hierarchy可作为一个‘中间结果’，继续输入到更多D3.js提供的数据预处理接口中</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">hierarchy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-层级数据预处理d3-tree\"><a href=\"#2-层级数据预处理d3-tree\" class=\"headerlink\" title=\"2.层级数据预处理d3.tree()\"></a>2.层级数据预处理d3.tree()</h4><ul>\n<li><p>d3.tree().size([innerHeight, innerWidth])</p>\n</li>\n<li><p>返回一个函数</p>\n</li>\n<li><p>接受参数为d3.hierarchy</p>\n</li>\n<li><p>函数会根据设置的size将树形结构的每个节点映射到空间中‘合适’的位置（添加横纵坐标节点）</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">root <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>innerHeight<span class=\"token punctuation\">,</span> innerWidth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-root-links-和-d3-linkHorizontal\"><a href=\"#3-root-links-和-d3-linkHorizontal\" class=\"headerlink\" title=\"3.root.links()和 d3.linkHorizontal()\"></a>3.root.links()和 d3.linkHorizontal()</h4><ul>\n<li><p>root.links()返回树形结构中存在的所有‘链接’(带有source和target树形)，作为data join的参数，供后续设置三次贝塞尔曲线的x和y使用</p>\n</li>\n<li><p>d3.linkHorizontal()生成一个从source到target的三次贝塞尔曲线。.x(…)与.y(…)分别表示如何在source与target中取横纵坐标值。默认生成的是纵向的树形图，横纵坐标值取相反的值将图形翻转过来</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">g<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">linkHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-root-descendants\"><a href=\"#4-root-descendants\" class=\"headerlink\" title=\"4.root.descendants()\"></a>4.root.descendants()</h4><ul>\n<li>root.descendants()返回层级结构中的所有节点，广度优先（层次优先），返回的内容本质上是对象的数组</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">g<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">descendants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>children <span class=\"token operator\">?</span> d<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">8</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.8em'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text-anchor'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>children <span class=\"token operator\">?</span> <span class=\"token string\">'end'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  ​</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-使用d3查询svg\"><a href=\"#一-使用d3查询svg\" class=\"headerlink\" title=\"一.使用d3查询svg\"></a>一.使用d3查询svg</h3><p>d3.select()、d3.selectAll()</p>\n<h3 id=\"二-使用d3设置svg中的属性\"><a href=\"#二-使用d3设置svg中的属性\" class=\"headerlink\" title=\"二.使用d3设置svg中的属性\"></a>二.使用d3设置svg中的属性</h3><p>d3.attr()</p>\n<p>常见的属性：</p>\n<ul>\n<li>id、class</li>\n<li>x，y，cx，cy（cx、cy是圆的xy坐标）</li>\n<li>fill（颜色填充color）、stroke（边框border）</li>\n<li>height、width、r（圆的半径）</li>\n<li>transform（translate、rotate、scale）</li>\n</ul>\n<h3 id=\"三-使用d3添加、删除svg元素\"><a href=\"#三-使用d3添加、删除svg元素\" class=\"headerlink\" title=\"三.使用d3添加、删除svg元素\"></a>三.使用d3添加、删除svg元素</h3><p>element.append()、element.remove()</p>\n<h3 id=\"四-d3的比例尺\"><a href=\"#四-d3的比例尺\" class=\"headerlink\" title=\"四.d3的比例尺\"></a>四.d3的比例尺</h3><h4 id=\"1-d3-scaleLinear-：线性比例尺\"><a href=\"#1-d3-scaleLinear-：线性比例尺\" class=\"headerlink\" title=\"1.d3.scaleLinear()：线性比例尺\"></a>1.d3.scaleLinear()：线性比例尺</h4><p>domain:：连续型 range：连续型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> xScale <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>min_d<span class=\"token punctuation\">,</span> max_d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n\n<span class=\"token keyword\">const</span> yScale <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> innerWidth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>d3.max(数据，回调：如何提取数据的值)：求出数据某一属性的最大值</p>\n<h4 id=\"2-d3-scaleBand-：序数比例尺\"><a href=\"#2-d3-scaleBand-：序数比例尺\" class=\"headerlink\" title=\"2.d3.scaleBand()：序数比例尺\"></a>2.d3.scaleBand()：序数比例尺</h4><p>domain：离散型 range：连续性</p>\n<p>可以理解为用domain将range分割</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scale_b <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleBand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-d3-scaleOrdinal-：序数比例尺\"><a href=\"#3-d3-scaleOrdinal-：序数比例尺\" class=\"headerlink\" title=\"3.d3.scaleOrdinal()：序数比例尺\"></a>3.d3.scaleOrdinal()：序数比例尺</h4><p>domain：离散型 range：离散型</p>\n<p>可以简单理解为map映射</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleO <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>生成颜色比例尺</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleOrdinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span>naiveKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>schemeSet2<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h4 id=\"4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值\"><a href=\"#4-d3-scaleQuantize-：量化比例尺-把连续性的值转换为离散型的值\" class=\"headerlink\" title=\"4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)\"></a>4.d3.scaleQuantize()：量化比例尺(把连续性的值转换为离散型的值)</h4><p>domain：连续型 range：离散型</p>\n<p>可以理解为scaleBand的逆变换</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleQ <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleQuantize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 离散型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-d3-scaleTime-：时间比例尺\"><a href=\"#5-d3-scaleTime-：时间比例尺\" class=\"headerlink\" title=\"5.d3.scaleTime()：时间比例尺\"></a>5.d3.scaleTime()：时间比例尺</h4><p>domain：连续型，是时间 range：连续，是刻度</p>\n<p>类似于d3.scaleLinear()线性比例尺，只不过输入域变成了时间轴</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> scaleT <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 连续型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-颜色比例尺\"><a href=\"#6-颜色比例尺\" class=\"headerlink\" title=\"6.颜色比例尺\"></a>6.颜色比例尺</h4><p>d3提供了一些颜色比例尺，10就是10种颜色</p>\n<p>①Categorical系列——离散型颜色<br>d3.schemeCategory10 // 10就是10种颜色</p>\n<p><img src=\"/css/images/d3/category10.png\" alt=\"category10\"></p>\n<p>d3.schemeAccent</p>\n<p><img src=\"/css/images/d3/Accent.png\" alt=\"Accent\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 定义一个序数颜色比例尺</span>\n<span class=\"token keyword\">const</span> color <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">scaleLinear</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>schemeCategory10<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>②Diverging——连续型颜色（渐变颜色）</p>\n<p>方式一：d3.<strong>interpolateBrBG</strong>(<em>t</em>)——t =&gt; [0, 1]</p>\n<h3 id=\"五-Data-Join\"><a href=\"#五-Data-Join\" class=\"headerlink\" title=\"五.Data Join\"></a>五.Data Join</h3><h4 id=\"1-本质上是将数据与图元进行绑定\"><a href=\"#1-本质上是将数据与图元进行绑定\" class=\"headerlink\" title=\"1.本质上是将数据与图元进行绑定\"></a>1.本质上是将数据与图元进行绑定</h4><p>d3.selectAll(.class类名).data(data)</p>\n<h4 id=\"2-d3绑定数据的三个状态\"><a href=\"#2-d3绑定数据的三个状态\" class=\"headerlink\" title=\"2.d3绑定数据的三个状态\"></a>2.d3绑定数据的三个状态</h4><p>enter:</p>\n<ul>\n<li><p>有数据没有图元</p>\n</li>\n<li><p>d3会自动搞清楚哪些数据是新增的</p>\n</li>\n<li><p>根据新增的数据生成对应的图元</p>\n</li>\n<li><p>生成图元的占位，占位的内容需要通过append添加</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>update:</p>\n<ul>\n<li><p>有图元有数据</p>\n</li>\n<li><p>update作为实际可视化任务最常用的状态，经常被单独封装为一个函数</p>\n</li>\n<li><p>updateSelection.merge(enterSelection).attr().attr()</p>\n<ul>\n<li>将两个selection合并到一起操作</li>\n<li>enterSelection需要至少append()图元</li>\n</ul>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">durantion</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> <span class=\"token function\">xScale</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>exit</p>\n<ul>\n<li><p>有图元没数据</p>\n</li>\n<li><p>d3会自动搞清楚哪些图元是不绑定数据的</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">const p &#x3D; d3.selectAll(&#39;.class&#39;).data(data).exit().remove()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-读取数据\"><a href=\"#3-读取数据\" class=\"headerlink\" title=\"3.读取数据\"></a>3.读取数据</h4><p>d3.csv(‘path/tp/data.csv’).then(res =&gt; {})</p>\n<h3 id=\"六-path\"><a href=\"#六-path\" class=\"headerlink\" title=\"六.path\"></a>六.path</h3><h4 id=\"1-path元素的形状是通过属性d来定义的\"><a href=\"#1-path元素的形状是通过属性d来定义的\" class=\"headerlink\" title=\"1.path元素的形状是通过属性d来定义的\"></a>1.path元素的形状是通过属性d来定义的</h4><h4 id=\"2-d3-Path生成器\"><a href=\"#2-d3-Path生成器\" class=\"headerlink\" title=\"2.d3 Path生成器\"></a>2.d3 Path生成器</h4><ul>\n<li>d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5) —-用于折线图</li>\n<li>d3.geoPath().projection() —-用于地图</li>\n<li>d3.area() —-用于主题河流</li>\n<li>d3.arc().innerRadius().outerRadius() —-用于饼图</li>\n<li>d3.lineRadial().angle().radius() —-极坐标系版本的d3.line()</li>\n</ul>\n<h4 id=\"3-d3-line\"><a href=\"#3-d3-line\" class=\"headerlink\" title=\"3.d3.line()\"></a>3.d3.line()</h4><p>const line = d3.line().x(d =&gt; xScale(xValue)).y(d =&gt; yScale(yValue)).curve(d3.curveCardinal.tension(0.5)</p>\n<p>使用line:</p>\n<p>d3.select(‘path’).datum(data) // 给特定一个图元绑定一个数据，data是给一批图元绑定一批数据</p>\n<p>.attr(‘d’, line) // 给path配置line</p>\n<h3 id=\"七-interaction\"><a href=\"#七-interaction\" class=\"headerlink\" title=\"七.interaction\"></a>七.interaction</h3><h4 id=\"1-地图数据的表达-Topojson-amp-Geojson\"><a href=\"#1-地图数据的表达-Topojson-amp-Geojson\" class=\"headerlink\" title=\"1.地图数据的表达: Topojson &amp; Geojson\"></a>1.地图数据的表达: Topojson &amp; Geojson</h4><h4 id=\"2-json数据的读取\"><a href=\"#2-json数据的读取\" class=\"headerlink\" title=\"2.json数据的读取\"></a>2.json数据的读取</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/data.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>… … …<span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-topojson转geojson\"><a href=\"#3-topojson转geojson\" class=\"headerlink\" title=\"3.topojson转geojson\"></a>3.topojson转geojson</h4><p>借助topojson.js库</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">geojson <span class=\"token operator\">=</span> topojson<span class=\"token punctuation\">.</span><span class=\"token function\">feature</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>countries<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"4-地图数据的可视化\"><a href=\"#4-地图数据的可视化\" class=\"headerlink\" title=\"4.地图数据的可视化\"></a>4.地图数据的可视化</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> projection <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">geoNaturalEarth1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pathGenerator <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">geoPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">projection</span><span class=\"token punctuation\">(</span>projection<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// geo适应宽高</span>\nprojection<span class=\"token punctuation\">.</span><span class=\"token function\">fitSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>innerWidth<span class=\"token punctuation\">,</span> innerHeight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> geojson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// path使用geo</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>geojson<span class=\"token punctuation\">.</span>features<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span>pathGenerator  <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"5-事件\"><a href=\"#5-事件\" class=\"headerlink\" title=\"5.事件\"></a>5.事件</h4><p>事件的设置对应于D3中的.on(‘eventName’, callBack) </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">d3<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  d3<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>图元.on(事件类型, 触发动作) </p>\n<h4 id=\"6-d3-tip\"><a href=\"#6-d3-tip\" class=\"headerlink\" title=\"6.d3-tip\"></a>6.d3-tip</h4><p>tooltip库，自动在‘合适’的位置显示对话框</p>\n<h3 id=\"八-stack-堆叠\"><a href=\"#八-stack-堆叠\" class=\"headerlink\" title=\"八.stack(堆叠)\"></a>八.stack(堆叠)</h3><h4 id=\"1-d3-stack\"><a href=\"#1-d3-stack\" class=\"headerlink\" title=\"1.d3.stack()\"></a>1.d3.stack()</h4><p>本质上是d3.js提供的用于数据预处理的接口（生成堆叠数据）</p>\n<h4 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2.语法\"></a>2.语法</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stackData <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>naiveKeys<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要堆叠哪些字段的数据</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">order</span><span class=\"token punctuation\">(</span>d3<span class=\"token punctuation\">.</span>stackOrderNone<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 怎么排序 stackOrderNone：按原生数据的顺序 stackAscending: 升序排序 stackDescending: 降序排序</span>\n\t<span class=\"token punctuation\">(</span>naiveData<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"九-tree\"><a href=\"#九-tree\" class=\"headerlink\" title=\"九.tree\"></a>九.tree</h3><h4 id=\"1-层级数据预处理d3-hierarchy\"><a href=\"#1-层级数据预处理d3-hierarchy\" class=\"headerlink\" title=\"1.层级数据预处理d3.hierarchy\"></a>1.层级数据预处理d3.hierarchy</h4><ul>\n<li>d3.hierarchy</li>\n</ul>\n<ul>\n<li>保持数据的原始结构，并将输入层级数据转换成D3中的hierarcy对象(result instanceof d3.hierarchy)，同时引入: </li>\n<li>height （* 不是逐层递减）、depth、children (原始结构) parent、（data 原始数据的映射）</li>\n</ul>\n<ul>\n<li>•d3.hierarchy可作为一个‘中间结果’，继续输入到更多D3.js提供的数据预处理接口中</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">hierarchy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-层级数据预处理d3-tree\"><a href=\"#2-层级数据预处理d3-tree\" class=\"headerlink\" title=\"2.层级数据预处理d3.tree()\"></a>2.层级数据预处理d3.tree()</h4><ul>\n<li><p>d3.tree().size([innerHeight, innerWidth])</p>\n</li>\n<li><p>返回一个函数</p>\n</li>\n<li><p>接受参数为d3.hierarchy</p>\n</li>\n<li><p>函数会根据设置的size将树形结构的每个节点映射到空间中‘合适’的位置（添加横纵坐标节点）</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">root <span class=\"token operator\">=</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">tree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>innerHeight<span class=\"token punctuation\">,</span> innerWidth<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-root-links-和-d3-linkHorizontal\"><a href=\"#3-root-links-和-d3-linkHorizontal\" class=\"headerlink\" title=\"3.root.links()和 d3.linkHorizontal()\"></a>3.root.links()和 d3.linkHorizontal()</h4><ul>\n<li><p>root.links()返回树形结构中存在的所有‘链接’(带有source和target树形)，作为data join的参数，供后续设置三次贝塞尔曲线的x和y使用</p>\n</li>\n<li><p>d3.linkHorizontal()生成一个从source到target的三次贝塞尔曲线。.x(…)与.y(…)分别表示如何在source与target中取横纵坐标值。默认生成的是纵向的树形图，横纵坐标值取相反的值将图形翻转过来</p>\n</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">g<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fill\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d\"</span><span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">.</span><span class=\"token function\">linkHorizontal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-root-descendants\"><a href=\"#4-root-descendants\" class=\"headerlink\" title=\"4.root.descendants()\"></a>4.root.descendants()</h4><ul>\n<li>root.descendants()返回层级结构中的所有节点，广度优先（层次优先），返回的内容本质上是对象的数组</li>\n</ul>\n <pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">g<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">descendants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>children <span class=\"token operator\">?</span> d<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token number\">8</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.8em'</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text-anchor'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">d</span> <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>children <span class=\"token operator\">?</span> <span class=\"token string\">'end'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  ​</p>\n"},{"title":"echarts学习笔记","keywords":"echarts","_content":"### 一、柱状图（type为bar）\n\n#### 1.数据格式\n\n一维数组\n\n#### 2.xAxis和yAxis\n\ntype为category时，需要指定data\n\ntype为value时，data在series中指定\n\n#### 3.常见效果\n\n- 标记：最大值、最小值、平均值\n\n  ```javascript\n  markPoint：{\n    data: [\n      {\n        type: 'max'，\n        name: '最大值'\n      },\n      {\n        type: 'min',\n        name: '最小值'\n      }\n    ]\n  },\n    markLine: {\n      data: [\n        {\n          type: 'average'，\n          name: '平均值'\n        }\n      ]\n    }\n  ```\n\n\n- 显示：\n\n  label：数值显示\n\n  barWidth： 柱宽度\n\n  横向柱状图：xAxis和yAxis配置互换\n\n### 二、通用配置\n\n- title标题\n  - 文字样式：textStyle\n  - 标题边框：borderWidth、borderColor、borderRadius\n  - 标题位置：left、top、right、bottom\n- tooltip提示框组件\n  - 触发类型：trigger\n    - item\n    - axis\n  - 触发时机：triggerOn\n    - mouseover\n    - click\n  - 格式化：formatter\n    - 字符串模板\n    - 回调函数（参数：arg）\n- toolbox工具栏（导出图片、数据视图、数据区域缩放、重置、动态类型切换五个工具）\n  - feature（显示工具栏按钮）\n    - savaAsImage（导出图片）\n    - dataView（数据视图）\n    - dataZoom（数据区域缩放）\n    - restore（重置）\n    - magicType（动态类型切换）：如magicType： { type: ['bar', 'line']}\n- legend图例（用于筛选系列，需要和series配合使用）\n  - legend中的data是一个数组\n  - legend中的data的值需要和series数组中某组数据的name值一致\n\n### 三、折线图（type为line）\n\n#### 1.数据格式\n\n一维数组\n\n#### 2.常用效果\n\n- 标记：最大值、最小值、平均值、标注区间\n  - markPoint\n  - markLine\n  - markArea\n- 线条控制：平滑、风格\n  - smooth、lineStyle \n- 填充风格\n  - areaStyle\n- 紧挨y轴边缘（设置在xAxis）\n  - boundaryGap\n- 缩放：脱离0值比例\n  - scale：true\n- 堆叠图\n  - stack：all\n  - 可以和areaStyle配合使用\n\n### 四、散点图（type为scatter）\n\n#### 1.数据格式\n\n二维数组\n\n#### 2.基本的散点图\n\n- x轴和y轴type都是value\n- x轴和y轴的数据，是一个二维数组\n- type为scatter\n\n#### 3.常用效果\n\n- 气泡图效果\n  - 散点大小不同：symbolSize\n  - 散点的颜色不同：itemStyle.color\n- 涟漪动画效果\n  - type: effectScatter\n  - showEffectOn: 'emphasis' 鼠标移入时才显示涟漪效果，默认值是render（渲染就显示涟漪效果）\n  - rippleEffect: { scale: 10} 散点涟漪效果的范围\n\n### 五、直角坐标系的常用配置\n\n直角坐标系的图表：柱状图（bar）、折线图（line）、散点图（scatter）\n\n- grid网格（控制直角坐标系的布局和大小，x轴和y轴就是在grid的基础上进行绘制的）\n  - 显示gird\n    - show\n  - grid的边框\n    - borderWidth、borderColor\n  - grid的位置和大小\n    - left\n    - top\n    - right\n    - bottom\n- axis坐标轴（分为x轴和y轴）\n  - 坐标轴类型type\n    - value：数值周，自动会从目标数据中读取数据\n    - category：类目轴，该类型必须通过data设置类目数据\n  - 显示位置position\n    - xAxis：可取值为top或bottom\n    - yAxis：可取值为left或right\n- 区域缩放dataZoom\n  - dataZoom用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有。dataZoom是一个数组，可以配置多个区域缩放器\n  - 类型type\n    - slider：滑块控制缩放\n    - inside：内置，依靠鼠标滚轮或者双指缩放\n  - 指明产生作用的轴\n    - xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可\n    - yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可\n  - 指明初始状态的缩放情况\n    - start：数据窗口范围的起始百分比\n    - end：数据窗口范围的结束百分比\n\n### 六、饼图（type为pie）\n\n#### 1.数据格式\n\njson数据：data: [{name: '京东'，value: '9000'}]\n\n#### 2.基本的饼图\n\n- 数据是json数据格式\n- type为pie\n- 无须配置xAxis和yAxis\n\n#### 3.饼图常见效果\n\n- 显示数值\n  - lable.formatter\n- 圆环\n  - 设置两个半径 radius：['50%', '70%'] 分别是内半径和外半径\n- 南丁格尔图\n  - roseType：'radius'\n- 选中效果\n  - 选中模式 selectMode：single（可选中单个）\\multiple（可选中多个）\n  - 选中偏移量 selectOffset：30\n\n### 七、地图（type：map）\n\n#### 1.矢量地图的实现步骤\n\n- Echarts最基本的代码结构\n  - 引入js文件\n  - 带宽高的DOM容器\n  - init初始化对象\n  - setOption设置option\n- 准备中国的矢量地图json文件（http://datav.aliyun.com/tools/atlas/index.html#&lat=30.332329214580188&lng=106.72278672066881&zoom=3.5）\n- 使用ajax获取json\n  - $.get('json/map/china.json', function(chinaJson){})\n- 往echarts全局对象注册地图的json数据\n  - echarts.registerMap('chinaMap', chinaJson)\n- 在geo下设置\n  - type:'map'\n  - map:'chinaMap'\n\n#### 2.常用配置\n\n- 缩放拖动\n  - roam：true\n- 名称显示\n  - label\n- 初始缩放比例\n  - zoom：2（2倍）\n- 地图中心点\n  - center\n\n#### 3.常见效果\n\n- 不同城市颜色不同（如空气质量）\n\n  1. 显示基本的中国地图\n\n  2. 城市的空气质量数据设置给series（此处的数据必须是[{name: cityName, value: ''}]的格式，其中name属性必须和省份名一致）\n\n  3. 将series下的数据与geo关联起来\n\n     设置type: 'map'，geoIndex:0\n\n  4. 结合visualMap配合使用\n\n     visualMap: {min: 0, max: 40, range: { color: ['white', 'red']}}\n\n- 地图和散点图结合\n\n  1. 给series下配置散点图对象\n\n  2. 准备好散点数据，设置给新对象的data（二维数组，地图坐标）\n\n  3. 配置新对象的type为effectScatter\n\n  4. 让散点图使用地图坐标系统\n\n     coordinateSystem: 'geo'\n\n  5. 让涟漪的效果更加明显\n\n     rippleEffect：{ scale：10 }\n\n### 八、雷达图（type：radar）\n\n#### 1.实现步骤\n\n- echarts最基本的代码结构\n- 定义各个维度的最大值（在radar属性下）\n  - indicator：[{name: '易用性', max: 100]}]\n- 准备具体产品的数据\n  - 在series下设置data：[{name: '华为手机', value: [80, 80, 90, 95, 85]}\n- 设置图表类型\n  - 在series下设置type：radar\n\n#### 2.常用配置\n\n- 显示数值:\n  - label\n- 区域面积（阴影）\n  - areaStyle\n- 绘制类型\n  - shape: 'circle' 默认值 polygon\n\n### 九、仪表盘（type：guage）\n\n#### 1.实现步骤\n\n- echarts最基本的代码结构\n- 准备数据，设置给series下的data\n  - data: [{value: 97}]\n- 图标类型\n  - 在series下设置type：guage\n\n#### 2.常用效果\n\n- 数值范围\n  - max\n  - min\n- 多个指针\n  - 增加series下data数组中的元素\n- 多个指针颜色差异\n  - itemStyle\n\n### 十、主题\n\n#### 1.内置主题\n\n- echarts中默认内置了两套主题：light、dark\n\n- 在初始化对象方法中init中可以指明\n\n  var chart = echarts.init(dom, 'light')\n\n  var chart = echarts.init(dom, 'dark')\n\n#### 2.自定义主题\n\n- 1.在官网主题编辑器中编辑主题\n- 2.下载主题js文件\n- 3.引入主题js文件\n- 4.在init方法中使用主题\n\n### 十一、调色盘\n\n#### 1.它是一组颜色，图形、系列会自动从其中选择颜色\n\n- 主题调色盘（主题js文件中全局注册的color）\n\n- 全局调色盘\n\n  options：{\n\n  ​\tcolor： ['red', 'green', 'blue']\n\n  }\n\n- 局部调色盘\n\n  series: [{\n\n  ​\ttype: 'bar',\n\n  ​\tcolor: ['red', 'green', 'blue']\n\n  }]\n\n#### 2.调色盘的作用遵循就近原则\n\n#### 3.颜色渐变\n\n- 线性渐变\n\n  ```javascript\n  itemStyle: {\n    color: {\n      type: 'linear',\n        x: 0, // 在图元中的初始x位置\n        y: 0, // 在图元中的初始y位置\n        x2: 0,\n        y2: 1, // 1代表到底部，0.5在中间\n          colorStops: [{\n            offset: 0, color: 'red' // 0%处的颜色 \n          },{\n            offset: 1, color: 'blue' // 100%处的颜色\n          }]\n    }\n  }\n  ```\n\n- 径向渐变\n\n  ```javascript\n  itemStyle: {\n    color: {\n      type: 'radial',\n        x: 0.5, \n        y: 0.5,\n        r: 0.5, // 扩散的半径\n          colorStops: [{\n            offset: 0, color: 'red'\n          }, {\n            offset: 1, color: 'blue'\n          }]\n    }\n  }\n  ```\n\n### 十二、样式\n\n- 直接样式\n  - itemStyle、textStyle、lineStyle、areaStyle、label\n- 高亮样式\n  - 在emphasis中包裹itemStyle、textStyle、lineStyle、areaStyle、label\n- 优先级高，会覆盖主题中、调色盘的效果\n\n### 十三、自适应\n\n当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化\n\n- 1.监听窗口大小变化事件\n\n- 2.在事件处理函数中调用echarts实例对象的resize方法即可\n\n  window.onresize = myChart.resize\n\n### 十四、加载动画\n\necharts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可\n\n- 显示加载动画\n\n  mCharts.showLoading()\n\n- 隐藏加载动画\n\n  mCharts.hideLoading()\n\n### 十五、增量动画\n\n- 增量动画的实现方式\n  - mCharts.setOption\n    - 所有数据的更新都通过setOption实现\n    - 不用考虑数据到底产生了哪些变化\n    - echarts会找到两组数据之间的差异然后通过合适的动画取实现数据的变化\n    - 新旧option的关系并不是相互覆盖的关系，而是相互整合的关系\n    - 我们在设置新的option的时候，只需要考虑到变化的部分就可以\n\n### 十六、动画配置项\n\n- 开启动画\n\n  - animation：true\n\n- 动画时长\n\n  - animationDuration：5000\n\n  ```javascript\n    animationDuration： function（arg） {\n      // 这里的arg是所有需要动画效果的图元的索引，会根据不同形式的图元元素进行分组\n      return arg * 10\n    }\n    ```\n\n- 缓动动画\n\n  - animationEasing: 'bounceOut'\n\n- 动画阈值\n\n  - animationThreshold： 8\n  - 单中形式的元素数量大于这个阈值会关闭动画\n\n### 十七、全局Echarts对象常用方法\n\n- init方法\n\n  - 初始化Echarts实例对象\n  - 使用主题（第二个参数）\n\n- registerTheme方法\n\n  - 注册主题\n  - 只有注册过的主题，才能在init方法中使用该主题\n\n- registerMap方法\n\n  - 注册地图数据\n\n    ```javascript\n      $.get('json/map/china.json', function(ChinaJson) {\n        echarts.registerMap('china', chinaJson)\n      })\n      ```\n\n  - geo组件使用地图数据\n\n    ```javascript\n      var option = {\n        geo: {\n          type: 'map',\n          map: 'china'\n        }\n      }\n      ```\n\n- connect方法\n\n  - 一个页面中可以有多个独立的图表\n  - 每一个图表对应一个Echarts实例对象\n  - connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组\n    - 保存图片的自动拼接（saveAsImage）\n    - 刷新按钮\n    - 重置按钮\n    - 提示框联动、图例选择、数据范围修改等等\n\n### 十八、echartsInstance实例常用方法\n\n- setOption方法\n\n  - 设置或修改图表实例的配置项以及数据\n  - 多次调用setOption方法\n    - 合并新旧配置\n    - 增量动画\n\n- resize方法\n\n  - 重新计算和绘制图表\n  - 一般和window对象的resize事件结合使用\n    - window.onresize = mEcharts.resize\n\n- on\\off方法\n\n  - 绑定或者解绑事件处理函数\n  - 鼠标事件\n    - 常见事件：click、dbclick、mousedown、mousemove、mouseup等\n  - Echarts事件\n    - 常见事件：legendselectchanged、datazoom、pieselectchanged、ma'pselectchanged\n\n- dispatchAction\n\n  - 触发某些行为\n\n  - 使用代码模拟用户的行为\n\n  ```javascript\n    mCharts.dispatchAction({\n      type: 'hightlight', // 事件类型\n      seriesIndex: 0, // 图表索引(系列)\n      dataIndex: 1 // 图表中哪一项高亮\n    })\n    ```\n\n- clear\n\n  - 清空当前实例，会移除实例中所有的组件和图表\n  - 清空之后可以再次setOption\n\n- dispose方法\n\n  - 销毁实例\n  - 销毁后实例无法再被使用\n\n### 十九、websocket的基本使用\n\n- 后端\n\n  - 安装包\n\n    - npm i ws\n\n  - 创建对象\n\n    ```javascript\n      const webSocket = require('ws')\n      const wss = new WebSocket.server({\n        port: '8080'\n      })\n      ```\n\n  - 监听事件\n\n    - 连接事件\n\n      ```javascript\n        wss.on('connection', client => {\n          console.log('有客户端连接')\n        })\n        ```\n\n    - 接受数据事件\n\n      ```javascript\n        wss.on('connection', client => {\n          console.log('有客户端连接')\n          client.on('message', msg => {\n            console.log('客户端发送数据过来了')\n          })\n        })\n        ```\n\n    - 发送数据\n\n      - client.send('hello socket from back-end')\n\n- 前端\n\n  - 创建对象\n\n    ```javascript\n      const ws = new WebSocket('ws://localhost:8080')\n      ```\n\n  - 监听事件\n\n    - 连接成功事件\n      - ws.onopen = () => {}\n    - 接受数据事件\n      - ws.onmessage = msg => {}\n    - 关闭连接事件\n      - ws.onclose = () => {}\n\n  - 发送数据\n\n    - ws.send","source":"_posts/echarts.md","raw":"---\ntitle: echarts学习笔记\ntag: echarts\nkeywords: echarts\ncategories: 前端可视化库\n---\n### 一、柱状图（type为bar）\n\n#### 1.数据格式\n\n一维数组\n\n#### 2.xAxis和yAxis\n\ntype为category时，需要指定data\n\ntype为value时，data在series中指定\n\n#### 3.常见效果\n\n- 标记：最大值、最小值、平均值\n\n  ```javascript\n  markPoint：{\n    data: [\n      {\n        type: 'max'，\n        name: '最大值'\n      },\n      {\n        type: 'min',\n        name: '最小值'\n      }\n    ]\n  },\n    markLine: {\n      data: [\n        {\n          type: 'average'，\n          name: '平均值'\n        }\n      ]\n    }\n  ```\n\n\n- 显示：\n\n  label：数值显示\n\n  barWidth： 柱宽度\n\n  横向柱状图：xAxis和yAxis配置互换\n\n### 二、通用配置\n\n- title标题\n  - 文字样式：textStyle\n  - 标题边框：borderWidth、borderColor、borderRadius\n  - 标题位置：left、top、right、bottom\n- tooltip提示框组件\n  - 触发类型：trigger\n    - item\n    - axis\n  - 触发时机：triggerOn\n    - mouseover\n    - click\n  - 格式化：formatter\n    - 字符串模板\n    - 回调函数（参数：arg）\n- toolbox工具栏（导出图片、数据视图、数据区域缩放、重置、动态类型切换五个工具）\n  - feature（显示工具栏按钮）\n    - savaAsImage（导出图片）\n    - dataView（数据视图）\n    - dataZoom（数据区域缩放）\n    - restore（重置）\n    - magicType（动态类型切换）：如magicType： { type: ['bar', 'line']}\n- legend图例（用于筛选系列，需要和series配合使用）\n  - legend中的data是一个数组\n  - legend中的data的值需要和series数组中某组数据的name值一致\n\n### 三、折线图（type为line）\n\n#### 1.数据格式\n\n一维数组\n\n#### 2.常用效果\n\n- 标记：最大值、最小值、平均值、标注区间\n  - markPoint\n  - markLine\n  - markArea\n- 线条控制：平滑、风格\n  - smooth、lineStyle \n- 填充风格\n  - areaStyle\n- 紧挨y轴边缘（设置在xAxis）\n  - boundaryGap\n- 缩放：脱离0值比例\n  - scale：true\n- 堆叠图\n  - stack：all\n  - 可以和areaStyle配合使用\n\n### 四、散点图（type为scatter）\n\n#### 1.数据格式\n\n二维数组\n\n#### 2.基本的散点图\n\n- x轴和y轴type都是value\n- x轴和y轴的数据，是一个二维数组\n- type为scatter\n\n#### 3.常用效果\n\n- 气泡图效果\n  - 散点大小不同：symbolSize\n  - 散点的颜色不同：itemStyle.color\n- 涟漪动画效果\n  - type: effectScatter\n  - showEffectOn: 'emphasis' 鼠标移入时才显示涟漪效果，默认值是render（渲染就显示涟漪效果）\n  - rippleEffect: { scale: 10} 散点涟漪效果的范围\n\n### 五、直角坐标系的常用配置\n\n直角坐标系的图表：柱状图（bar）、折线图（line）、散点图（scatter）\n\n- grid网格（控制直角坐标系的布局和大小，x轴和y轴就是在grid的基础上进行绘制的）\n  - 显示gird\n    - show\n  - grid的边框\n    - borderWidth、borderColor\n  - grid的位置和大小\n    - left\n    - top\n    - right\n    - bottom\n- axis坐标轴（分为x轴和y轴）\n  - 坐标轴类型type\n    - value：数值周，自动会从目标数据中读取数据\n    - category：类目轴，该类型必须通过data设置类目数据\n  - 显示位置position\n    - xAxis：可取值为top或bottom\n    - yAxis：可取值为left或right\n- 区域缩放dataZoom\n  - dataZoom用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有。dataZoom是一个数组，可以配置多个区域缩放器\n  - 类型type\n    - slider：滑块控制缩放\n    - inside：内置，依靠鼠标滚轮或者双指缩放\n  - 指明产生作用的轴\n    - xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可\n    - yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可\n  - 指明初始状态的缩放情况\n    - start：数据窗口范围的起始百分比\n    - end：数据窗口范围的结束百分比\n\n### 六、饼图（type为pie）\n\n#### 1.数据格式\n\njson数据：data: [{name: '京东'，value: '9000'}]\n\n#### 2.基本的饼图\n\n- 数据是json数据格式\n- type为pie\n- 无须配置xAxis和yAxis\n\n#### 3.饼图常见效果\n\n- 显示数值\n  - lable.formatter\n- 圆环\n  - 设置两个半径 radius：['50%', '70%'] 分别是内半径和外半径\n- 南丁格尔图\n  - roseType：'radius'\n- 选中效果\n  - 选中模式 selectMode：single（可选中单个）\\multiple（可选中多个）\n  - 选中偏移量 selectOffset：30\n\n### 七、地图（type：map）\n\n#### 1.矢量地图的实现步骤\n\n- Echarts最基本的代码结构\n  - 引入js文件\n  - 带宽高的DOM容器\n  - init初始化对象\n  - setOption设置option\n- 准备中国的矢量地图json文件（http://datav.aliyun.com/tools/atlas/index.html#&lat=30.332329214580188&lng=106.72278672066881&zoom=3.5）\n- 使用ajax获取json\n  - $.get('json/map/china.json', function(chinaJson){})\n- 往echarts全局对象注册地图的json数据\n  - echarts.registerMap('chinaMap', chinaJson)\n- 在geo下设置\n  - type:'map'\n  - map:'chinaMap'\n\n#### 2.常用配置\n\n- 缩放拖动\n  - roam：true\n- 名称显示\n  - label\n- 初始缩放比例\n  - zoom：2（2倍）\n- 地图中心点\n  - center\n\n#### 3.常见效果\n\n- 不同城市颜色不同（如空气质量）\n\n  1. 显示基本的中国地图\n\n  2. 城市的空气质量数据设置给series（此处的数据必须是[{name: cityName, value: ''}]的格式，其中name属性必须和省份名一致）\n\n  3. 将series下的数据与geo关联起来\n\n     设置type: 'map'，geoIndex:0\n\n  4. 结合visualMap配合使用\n\n     visualMap: {min: 0, max: 40, range: { color: ['white', 'red']}}\n\n- 地图和散点图结合\n\n  1. 给series下配置散点图对象\n\n  2. 准备好散点数据，设置给新对象的data（二维数组，地图坐标）\n\n  3. 配置新对象的type为effectScatter\n\n  4. 让散点图使用地图坐标系统\n\n     coordinateSystem: 'geo'\n\n  5. 让涟漪的效果更加明显\n\n     rippleEffect：{ scale：10 }\n\n### 八、雷达图（type：radar）\n\n#### 1.实现步骤\n\n- echarts最基本的代码结构\n- 定义各个维度的最大值（在radar属性下）\n  - indicator：[{name: '易用性', max: 100]}]\n- 准备具体产品的数据\n  - 在series下设置data：[{name: '华为手机', value: [80, 80, 90, 95, 85]}\n- 设置图表类型\n  - 在series下设置type：radar\n\n#### 2.常用配置\n\n- 显示数值:\n  - label\n- 区域面积（阴影）\n  - areaStyle\n- 绘制类型\n  - shape: 'circle' 默认值 polygon\n\n### 九、仪表盘（type：guage）\n\n#### 1.实现步骤\n\n- echarts最基本的代码结构\n- 准备数据，设置给series下的data\n  - data: [{value: 97}]\n- 图标类型\n  - 在series下设置type：guage\n\n#### 2.常用效果\n\n- 数值范围\n  - max\n  - min\n- 多个指针\n  - 增加series下data数组中的元素\n- 多个指针颜色差异\n  - itemStyle\n\n### 十、主题\n\n#### 1.内置主题\n\n- echarts中默认内置了两套主题：light、dark\n\n- 在初始化对象方法中init中可以指明\n\n  var chart = echarts.init(dom, 'light')\n\n  var chart = echarts.init(dom, 'dark')\n\n#### 2.自定义主题\n\n- 1.在官网主题编辑器中编辑主题\n- 2.下载主题js文件\n- 3.引入主题js文件\n- 4.在init方法中使用主题\n\n### 十一、调色盘\n\n#### 1.它是一组颜色，图形、系列会自动从其中选择颜色\n\n- 主题调色盘（主题js文件中全局注册的color）\n\n- 全局调色盘\n\n  options：{\n\n  ​\tcolor： ['red', 'green', 'blue']\n\n  }\n\n- 局部调色盘\n\n  series: [{\n\n  ​\ttype: 'bar',\n\n  ​\tcolor: ['red', 'green', 'blue']\n\n  }]\n\n#### 2.调色盘的作用遵循就近原则\n\n#### 3.颜色渐变\n\n- 线性渐变\n\n  ```javascript\n  itemStyle: {\n    color: {\n      type: 'linear',\n        x: 0, // 在图元中的初始x位置\n        y: 0, // 在图元中的初始y位置\n        x2: 0,\n        y2: 1, // 1代表到底部，0.5在中间\n          colorStops: [{\n            offset: 0, color: 'red' // 0%处的颜色 \n          },{\n            offset: 1, color: 'blue' // 100%处的颜色\n          }]\n    }\n  }\n  ```\n\n- 径向渐变\n\n  ```javascript\n  itemStyle: {\n    color: {\n      type: 'radial',\n        x: 0.5, \n        y: 0.5,\n        r: 0.5, // 扩散的半径\n          colorStops: [{\n            offset: 0, color: 'red'\n          }, {\n            offset: 1, color: 'blue'\n          }]\n    }\n  }\n  ```\n\n### 十二、样式\n\n- 直接样式\n  - itemStyle、textStyle、lineStyle、areaStyle、label\n- 高亮样式\n  - 在emphasis中包裹itemStyle、textStyle、lineStyle、areaStyle、label\n- 优先级高，会覆盖主题中、调色盘的效果\n\n### 十三、自适应\n\n当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化\n\n- 1.监听窗口大小变化事件\n\n- 2.在事件处理函数中调用echarts实例对象的resize方法即可\n\n  window.onresize = myChart.resize\n\n### 十四、加载动画\n\necharts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可\n\n- 显示加载动画\n\n  mCharts.showLoading()\n\n- 隐藏加载动画\n\n  mCharts.hideLoading()\n\n### 十五、增量动画\n\n- 增量动画的实现方式\n  - mCharts.setOption\n    - 所有数据的更新都通过setOption实现\n    - 不用考虑数据到底产生了哪些变化\n    - echarts会找到两组数据之间的差异然后通过合适的动画取实现数据的变化\n    - 新旧option的关系并不是相互覆盖的关系，而是相互整合的关系\n    - 我们在设置新的option的时候，只需要考虑到变化的部分就可以\n\n### 十六、动画配置项\n\n- 开启动画\n\n  - animation：true\n\n- 动画时长\n\n  - animationDuration：5000\n\n  ```javascript\n    animationDuration： function（arg） {\n      // 这里的arg是所有需要动画效果的图元的索引，会根据不同形式的图元元素进行分组\n      return arg * 10\n    }\n    ```\n\n- 缓动动画\n\n  - animationEasing: 'bounceOut'\n\n- 动画阈值\n\n  - animationThreshold： 8\n  - 单中形式的元素数量大于这个阈值会关闭动画\n\n### 十七、全局Echarts对象常用方法\n\n- init方法\n\n  - 初始化Echarts实例对象\n  - 使用主题（第二个参数）\n\n- registerTheme方法\n\n  - 注册主题\n  - 只有注册过的主题，才能在init方法中使用该主题\n\n- registerMap方法\n\n  - 注册地图数据\n\n    ```javascript\n      $.get('json/map/china.json', function(ChinaJson) {\n        echarts.registerMap('china', chinaJson)\n      })\n      ```\n\n  - geo组件使用地图数据\n\n    ```javascript\n      var option = {\n        geo: {\n          type: 'map',\n          map: 'china'\n        }\n      }\n      ```\n\n- connect方法\n\n  - 一个页面中可以有多个独立的图表\n  - 每一个图表对应一个Echarts实例对象\n  - connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组\n    - 保存图片的自动拼接（saveAsImage）\n    - 刷新按钮\n    - 重置按钮\n    - 提示框联动、图例选择、数据范围修改等等\n\n### 十八、echartsInstance实例常用方法\n\n- setOption方法\n\n  - 设置或修改图表实例的配置项以及数据\n  - 多次调用setOption方法\n    - 合并新旧配置\n    - 增量动画\n\n- resize方法\n\n  - 重新计算和绘制图表\n  - 一般和window对象的resize事件结合使用\n    - window.onresize = mEcharts.resize\n\n- on\\off方法\n\n  - 绑定或者解绑事件处理函数\n  - 鼠标事件\n    - 常见事件：click、dbclick、mousedown、mousemove、mouseup等\n  - Echarts事件\n    - 常见事件：legendselectchanged、datazoom、pieselectchanged、ma'pselectchanged\n\n- dispatchAction\n\n  - 触发某些行为\n\n  - 使用代码模拟用户的行为\n\n  ```javascript\n    mCharts.dispatchAction({\n      type: 'hightlight', // 事件类型\n      seriesIndex: 0, // 图表索引(系列)\n      dataIndex: 1 // 图表中哪一项高亮\n    })\n    ```\n\n- clear\n\n  - 清空当前实例，会移除实例中所有的组件和图表\n  - 清空之后可以再次setOption\n\n- dispose方法\n\n  - 销毁实例\n  - 销毁后实例无法再被使用\n\n### 十九、websocket的基本使用\n\n- 后端\n\n  - 安装包\n\n    - npm i ws\n\n  - 创建对象\n\n    ```javascript\n      const webSocket = require('ws')\n      const wss = new WebSocket.server({\n        port: '8080'\n      })\n      ```\n\n  - 监听事件\n\n    - 连接事件\n\n      ```javascript\n        wss.on('connection', client => {\n          console.log('有客户端连接')\n        })\n        ```\n\n    - 接受数据事件\n\n      ```javascript\n        wss.on('connection', client => {\n          console.log('有客户端连接')\n          client.on('message', msg => {\n            console.log('客户端发送数据过来了')\n          })\n        })\n        ```\n\n    - 发送数据\n\n      - client.send('hello socket from back-end')\n\n- 前端\n\n  - 创建对象\n\n    ```javascript\n      const ws = new WebSocket('ws://localhost:8080')\n      ```\n\n  - 监听事件\n\n    - 连接成功事件\n      - ws.onopen = () => {}\n    - 接受数据事件\n      - ws.onmessage = msg => {}\n    - 关闭连接事件\n      - ws.onclose = () => {}\n\n  - 发送数据\n\n    - ws.send","slug":"echarts","published":1,"date":"2021-07-17T08:49:18.000Z","updated":"2021-10-14T01:24:36.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq9v3p80003gxuqf2ds51p9","content":"<h3 id=\"一、柱状图（type为bar）\"><a href=\"#一、柱状图（type为bar）\" class=\"headerlink\" title=\"一、柱状图（type为bar）\"></a>一、柱状图（type为bar）</h3><h4 id=\"1-数据格式\"><a href=\"#1-数据格式\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>一维数组</p>\n<h4 id=\"2-xAxis和yAxis\"><a href=\"#2-xAxis和yAxis\" class=\"headerlink\" title=\"2.xAxis和yAxis\"></a>2.xAxis和yAxis</h4><p>type为category时，需要指定data</p>\n<p>type为value时，data在series中指定</p>\n<h4 id=\"3-常见效果\"><a href=\"#3-常见效果\" class=\"headerlink\" title=\"3.常见效果\"></a>3.常见效果</h4><ul>\n<li><p>标记：最大值、最小值、平均值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">markPoint：<span class=\"token punctuation\">&#123;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'max'</span>，\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'最大值'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'min'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'最小值'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  markLine<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'average'</span>，\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'平均值'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li><p>显示：</p>\n<p>label：数值显示</p>\n<p>barWidth： 柱宽度</p>\n<p>横向柱状图：xAxis和yAxis配置互换</p>\n</li>\n</ul>\n<h3 id=\"二、通用配置\"><a href=\"#二、通用配置\" class=\"headerlink\" title=\"二、通用配置\"></a>二、通用配置</h3><ul>\n<li>title标题<ul>\n<li>文字样式：textStyle</li>\n<li>标题边框：borderWidth、borderColor、borderRadius</li>\n<li>标题位置：left、top、right、bottom</li>\n</ul>\n</li>\n<li>tooltip提示框组件<ul>\n<li>触发类型：trigger<ul>\n<li>item</li>\n<li>axis</li>\n</ul>\n</li>\n<li>触发时机：triggerOn<ul>\n<li>mouseover</li>\n<li>click</li>\n</ul>\n</li>\n<li>格式化：formatter<ul>\n<li>字符串模板</li>\n<li>回调函数（参数：arg）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>toolbox工具栏（导出图片、数据视图、数据区域缩放、重置、动态类型切换五个工具）<ul>\n<li>feature（显示工具栏按钮）<ul>\n<li>savaAsImage（导出图片）</li>\n<li>dataView（数据视图）</li>\n<li>dataZoom（数据区域缩放）</li>\n<li>restore（重置）</li>\n<li>magicType（动态类型切换）：如magicType： { type: [‘bar’, ‘line’]}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>legend图例（用于筛选系列，需要和series配合使用）<ul>\n<li>legend中的data是一个数组</li>\n<li>legend中的data的值需要和series数组中某组数据的name值一致</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、折线图（type为line）\"><a href=\"#三、折线图（type为line）\" class=\"headerlink\" title=\"三、折线图（type为line）\"></a>三、折线图（type为line）</h3><h4 id=\"1-数据格式-1\"><a href=\"#1-数据格式-1\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>一维数组</p>\n<h4 id=\"2-常用效果\"><a href=\"#2-常用效果\" class=\"headerlink\" title=\"2.常用效果\"></a>2.常用效果</h4><ul>\n<li>标记：最大值、最小值、平均值、标注区间<ul>\n<li>markPoint</li>\n<li>markLine</li>\n<li>markArea</li>\n</ul>\n</li>\n<li>线条控制：平滑、风格<ul>\n<li>smooth、lineStyle </li>\n</ul>\n</li>\n<li>填充风格<ul>\n<li>areaStyle</li>\n</ul>\n</li>\n<li>紧挨y轴边缘（设置在xAxis）<ul>\n<li>boundaryGap</li>\n</ul>\n</li>\n<li>缩放：脱离0值比例<ul>\n<li>scale：true</li>\n</ul>\n</li>\n<li>堆叠图<ul>\n<li>stack：all</li>\n<li>可以和areaStyle配合使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、散点图（type为scatter）\"><a href=\"#四、散点图（type为scatter）\" class=\"headerlink\" title=\"四、散点图（type为scatter）\"></a>四、散点图（type为scatter）</h3><h4 id=\"1-数据格式-2\"><a href=\"#1-数据格式-2\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>二维数组</p>\n<h4 id=\"2-基本的散点图\"><a href=\"#2-基本的散点图\" class=\"headerlink\" title=\"2.基本的散点图\"></a>2.基本的散点图</h4><ul>\n<li>x轴和y轴type都是value</li>\n<li>x轴和y轴的数据，是一个二维数组</li>\n<li>type为scatter</li>\n</ul>\n<h4 id=\"3-常用效果\"><a href=\"#3-常用效果\" class=\"headerlink\" title=\"3.常用效果\"></a>3.常用效果</h4><ul>\n<li>气泡图效果<ul>\n<li>散点大小不同：symbolSize</li>\n<li>散点的颜色不同：itemStyle.color</li>\n</ul>\n</li>\n<li>涟漪动画效果<ul>\n<li>type: effectScatter</li>\n<li>showEffectOn: ‘emphasis’ 鼠标移入时才显示涟漪效果，默认值是render（渲染就显示涟漪效果）</li>\n<li>rippleEffect: { scale: 10} 散点涟漪效果的范围</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、直角坐标系的常用配置\"><a href=\"#五、直角坐标系的常用配置\" class=\"headerlink\" title=\"五、直角坐标系的常用配置\"></a>五、直角坐标系的常用配置</h3><p>直角坐标系的图表：柱状图（bar）、折线图（line）、散点图（scatter）</p>\n<ul>\n<li>grid网格（控制直角坐标系的布局和大小，x轴和y轴就是在grid的基础上进行绘制的）<ul>\n<li>显示gird<ul>\n<li>show</li>\n</ul>\n</li>\n<li>grid的边框<ul>\n<li>borderWidth、borderColor</li>\n</ul>\n</li>\n<li>grid的位置和大小<ul>\n<li>left</li>\n<li>top</li>\n<li>right</li>\n<li>bottom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>axis坐标轴（分为x轴和y轴）<ul>\n<li>坐标轴类型type<ul>\n<li>value：数值周，自动会从目标数据中读取数据</li>\n<li>category：类目轴，该类型必须通过data设置类目数据</li>\n</ul>\n</li>\n<li>显示位置position<ul>\n<li>xAxis：可取值为top或bottom</li>\n<li>yAxis：可取值为left或right</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>区域缩放dataZoom<ul>\n<li>dataZoom用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有。dataZoom是一个数组，可以配置多个区域缩放器</li>\n<li>类型type<ul>\n<li>slider：滑块控制缩放</li>\n<li>inside：内置，依靠鼠标滚轮或者双指缩放</li>\n</ul>\n</li>\n<li>指明产生作用的轴<ul>\n<li>xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可</li>\n<li>yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可</li>\n</ul>\n</li>\n<li>指明初始状态的缩放情况<ul>\n<li>start：数据窗口范围的起始百分比</li>\n<li>end：数据窗口范围的结束百分比</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、饼图（type为pie）\"><a href=\"#六、饼图（type为pie）\" class=\"headerlink\" title=\"六、饼图（type为pie）\"></a>六、饼图（type为pie）</h3><h4 id=\"1-数据格式-3\"><a href=\"#1-数据格式-3\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>json数据：data: [{name: ‘京东’，value: ‘9000’}]</p>\n<h4 id=\"2-基本的饼图\"><a href=\"#2-基本的饼图\" class=\"headerlink\" title=\"2.基本的饼图\"></a>2.基本的饼图</h4><ul>\n<li>数据是json数据格式</li>\n<li>type为pie</li>\n<li>无须配置xAxis和yAxis</li>\n</ul>\n<h4 id=\"3-饼图常见效果\"><a href=\"#3-饼图常见效果\" class=\"headerlink\" title=\"3.饼图常见效果\"></a>3.饼图常见效果</h4><ul>\n<li>显示数值<ul>\n<li>lable.formatter</li>\n</ul>\n</li>\n<li>圆环<ul>\n<li>设置两个半径 radius：[‘50%’, ‘70%’] 分别是内半径和外半径</li>\n</ul>\n</li>\n<li>南丁格尔图<ul>\n<li>roseType：’radius’</li>\n</ul>\n</li>\n<li>选中效果<ul>\n<li>选中模式 selectMode：single（可选中单个）\\multiple（可选中多个）</li>\n<li>选中偏移量 selectOffset：30</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七、地图（type：map）\"><a href=\"#七、地图（type：map）\" class=\"headerlink\" title=\"七、地图（type：map）\"></a>七、地图（type：map）</h3><h4 id=\"1-矢量地图的实现步骤\"><a href=\"#1-矢量地图的实现步骤\" class=\"headerlink\" title=\"1.矢量地图的实现步骤\"></a>1.矢量地图的实现步骤</h4><ul>\n<li>Echarts最基本的代码结构<ul>\n<li>引入js文件</li>\n<li>带宽高的DOM容器</li>\n<li>init初始化对象</li>\n<li>setOption设置option</li>\n</ul>\n</li>\n<li>准备中国的矢量地图json文件（<a href=\"http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5%EF%BC%89\">http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5）</a></li>\n<li>使用ajax获取json<ul>\n<li>$.get(‘json/map/china.json’, function(chinaJson){})</li>\n</ul>\n</li>\n<li>往echarts全局对象注册地图的json数据<ul>\n<li>echarts.registerMap(‘chinaMap’, chinaJson)</li>\n</ul>\n</li>\n<li>在geo下设置<ul>\n<li>type:’map’</li>\n<li>map:’chinaMap’</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用配置\"><a href=\"#2-常用配置\" class=\"headerlink\" title=\"2.常用配置\"></a>2.常用配置</h4><ul>\n<li>缩放拖动<ul>\n<li>roam：true</li>\n</ul>\n</li>\n<li>名称显示<ul>\n<li>label</li>\n</ul>\n</li>\n<li>初始缩放比例<ul>\n<li>zoom：2（2倍）</li>\n</ul>\n</li>\n<li>地图中心点<ul>\n<li>center</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-常见效果-1\"><a href=\"#3-常见效果-1\" class=\"headerlink\" title=\"3.常见效果\"></a>3.常见效果</h4><ul>\n<li><p>不同城市颜色不同（如空气质量）</p>\n<ol>\n<li><p>显示基本的中国地图</p>\n</li>\n<li><p>城市的空气质量数据设置给series（此处的数据必须是[{name: cityName, value: ‘’}]的格式，其中name属性必须和省份名一致）</p>\n</li>\n<li><p>将series下的数据与geo关联起来</p>\n<p>设置type: ‘map’，geoIndex:0</p>\n</li>\n<li><p>结合visualMap配合使用</p>\n<p>visualMap: {min: 0, max: 40, range: { color: [‘white’, ‘red’]}}</p>\n</li>\n</ol>\n</li>\n<li><p>地图和散点图结合</p>\n<ol>\n<li><p>给series下配置散点图对象</p>\n</li>\n<li><p>准备好散点数据，设置给新对象的data（二维数组，地图坐标）</p>\n</li>\n<li><p>配置新对象的type为effectScatter</p>\n</li>\n<li><p>让散点图使用地图坐标系统</p>\n<p>coordinateSystem: ‘geo’</p>\n</li>\n<li><p>让涟漪的效果更加明显</p>\n<p>rippleEffect：{ scale：10 }</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"八、雷达图（type：radar）\"><a href=\"#八、雷达图（type：radar）\" class=\"headerlink\" title=\"八、雷达图（type：radar）\"></a>八、雷达图（type：radar）</h3><h4 id=\"1-实现步骤\"><a href=\"#1-实现步骤\" class=\"headerlink\" title=\"1.实现步骤\"></a>1.实现步骤</h4><ul>\n<li>echarts最基本的代码结构</li>\n<li>定义各个维度的最大值（在radar属性下）<ul>\n<li>indicator：[{name: ‘易用性’, max: 100]}]</li>\n</ul>\n</li>\n<li>准备具体产品的数据<ul>\n<li>在series下设置data：[{name: ‘华为手机’, value: [80, 80, 90, 95, 85]}</li>\n</ul>\n</li>\n<li>设置图表类型<ul>\n<li>在series下设置type：radar</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用配置-1\"><a href=\"#2-常用配置-1\" class=\"headerlink\" title=\"2.常用配置\"></a>2.常用配置</h4><ul>\n<li>显示数值:<ul>\n<li>label</li>\n</ul>\n</li>\n<li>区域面积（阴影）<ul>\n<li>areaStyle</li>\n</ul>\n</li>\n<li>绘制类型<ul>\n<li>shape: ‘circle’ 默认值 polygon</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"九、仪表盘（type：guage）\"><a href=\"#九、仪表盘（type：guage）\" class=\"headerlink\" title=\"九、仪表盘（type：guage）\"></a>九、仪表盘（type：guage）</h3><h4 id=\"1-实现步骤-1\"><a href=\"#1-实现步骤-1\" class=\"headerlink\" title=\"1.实现步骤\"></a>1.实现步骤</h4><ul>\n<li>echarts最基本的代码结构</li>\n<li>准备数据，设置给series下的data<ul>\n<li>data: [{value: 97}]</li>\n</ul>\n</li>\n<li>图标类型<ul>\n<li>在series下设置type：guage</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用效果-1\"><a href=\"#2-常用效果-1\" class=\"headerlink\" title=\"2.常用效果\"></a>2.常用效果</h4><ul>\n<li>数值范围<ul>\n<li>max</li>\n<li>min</li>\n</ul>\n</li>\n<li>多个指针<ul>\n<li>增加series下data数组中的元素</li>\n</ul>\n</li>\n<li>多个指针颜色差异<ul>\n<li>itemStyle</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十、主题\"><a href=\"#十、主题\" class=\"headerlink\" title=\"十、主题\"></a>十、主题</h3><h4 id=\"1-内置主题\"><a href=\"#1-内置主题\" class=\"headerlink\" title=\"1.内置主题\"></a>1.内置主题</h4><ul>\n<li><p>echarts中默认内置了两套主题：light、dark</p>\n</li>\n<li><p>在初始化对象方法中init中可以指明</p>\n<p>var chart = echarts.init(dom, ‘light’)</p>\n<p>var chart = echarts.init(dom, ‘dark’)</p>\n</li>\n</ul>\n<h4 id=\"2-自定义主题\"><a href=\"#2-自定义主题\" class=\"headerlink\" title=\"2.自定义主题\"></a>2.自定义主题</h4><ul>\n<li>1.在官网主题编辑器中编辑主题</li>\n<li>2.下载主题js文件</li>\n<li>3.引入主题js文件</li>\n<li>4.在init方法中使用主题</li>\n</ul>\n<h3 id=\"十一、调色盘\"><a href=\"#十一、调色盘\" class=\"headerlink\" title=\"十一、调色盘\"></a>十一、调色盘</h3><h4 id=\"1-它是一组颜色，图形、系列会自动从其中选择颜色\"><a href=\"#1-它是一组颜色，图形、系列会自动从其中选择颜色\" class=\"headerlink\" title=\"1.它是一组颜色，图形、系列会自动从其中选择颜色\"></a>1.它是一组颜色，图形、系列会自动从其中选择颜色</h4><ul>\n<li><p>主题调色盘（主题js文件中全局注册的color）</p>\n</li>\n<li><p>全局调色盘</p>\n<p>options：{</p>\n<p>​    color： [‘red’, ‘green’, ‘blue’]</p>\n<p>}</p>\n</li>\n<li><p>局部调色盘</p>\n<p>series: [{</p>\n<p>​    type: ‘bar’,</p>\n<p>​    color: [‘red’, ‘green’, ‘blue’]</p>\n<p>}]</p>\n</li>\n</ul>\n<h4 id=\"2-调色盘的作用遵循就近原则\"><a href=\"#2-调色盘的作用遵循就近原则\" class=\"headerlink\" title=\"2.调色盘的作用遵循就近原则\"></a>2.调色盘的作用遵循就近原则</h4><h4 id=\"3-颜色渐变\"><a href=\"#3-颜色渐变\" class=\"headerlink\" title=\"3.颜色渐变\"></a>3.颜色渐变</h4><ul>\n<li><p>线性渐变</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'linear'</span><span class=\"token punctuation\">,</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在图元中的初始x位置</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在图元中的初始y位置</span>\n      x2<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      y2<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1代表到底部，0.5在中间</span>\n        colorStops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token comment\">// 0%处的颜色 </span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token comment\">// 100%处的颜色</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>径向渐变</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'radial'</span><span class=\"token punctuation\">,</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> \n      y<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n      r<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 扩散的半径</span>\n        colorStops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"十二、样式\"><a href=\"#十二、样式\" class=\"headerlink\" title=\"十二、样式\"></a>十二、样式</h3><ul>\n<li>直接样式<ul>\n<li>itemStyle、textStyle、lineStyle、areaStyle、label</li>\n</ul>\n</li>\n<li>高亮样式<ul>\n<li>在emphasis中包裹itemStyle、textStyle、lineStyle、areaStyle、label</li>\n</ul>\n</li>\n<li>优先级高，会覆盖主题中、调色盘的效果</li>\n</ul>\n<h3 id=\"十三、自适应\"><a href=\"#十三、自适应\" class=\"headerlink\" title=\"十三、自适应\"></a>十三、自适应</h3><p>当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化</p>\n<ul>\n<li><p>1.监听窗口大小变化事件</p>\n</li>\n<li><p>2.在事件处理函数中调用echarts实例对象的resize方法即可</p>\n<p>window.onresize = myChart.resize</p>\n</li>\n</ul>\n<h3 id=\"十四、加载动画\"><a href=\"#十四、加载动画\" class=\"headerlink\" title=\"十四、加载动画\"></a>十四、加载动画</h3><p>echarts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可</p>\n<ul>\n<li><p>显示加载动画</p>\n<p>mCharts.showLoading()</p>\n</li>\n<li><p>隐藏加载动画</p>\n<p>mCharts.hideLoading()</p>\n</li>\n</ul>\n<h3 id=\"十五、增量动画\"><a href=\"#十五、增量动画\" class=\"headerlink\" title=\"十五、增量动画\"></a>十五、增量动画</h3><ul>\n<li>增量动画的实现方式<ul>\n<li>mCharts.setOption<ul>\n<li>所有数据的更新都通过setOption实现</li>\n<li>不用考虑数据到底产生了哪些变化</li>\n<li>echarts会找到两组数据之间的差异然后通过合适的动画取实现数据的变化</li>\n<li>新旧option的关系并不是相互覆盖的关系，而是相互整合的关系</li>\n<li>我们在设置新的option的时候，只需要考虑到变化的部分就可以</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十六、动画配置项\"><a href=\"#十六、动画配置项\" class=\"headerlink\" title=\"十六、动画配置项\"></a>十六、动画配置项</h3><ul>\n<li><p>开启动画</p>\n<ul>\n<li>animation：true</li>\n</ul>\n</li>\n<li><p>动画时长</p>\n<ul>\n<li>animationDuration：5000</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">animationDuration： <span class=\"token keyword\">function</span>（arg） <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 这里的arg是所有需要动画效果的图元的索引，会根据不同形式的图元元素进行分组</span>\n  <span class=\"token keyword\">return</span> arg <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>缓动动画</p>\n<ul>\n<li>animationEasing: ‘bounceOut’</li>\n</ul>\n</li>\n<li><p>动画阈值</p>\n<ul>\n<li>animationThreshold： 8</li>\n<li>单中形式的元素数量大于这个阈值会关闭动画</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十七、全局Echarts对象常用方法\"><a href=\"#十七、全局Echarts对象常用方法\" class=\"headerlink\" title=\"十七、全局Echarts对象常用方法\"></a>十七、全局Echarts对象常用方法</h3><ul>\n<li><p>init方法</p>\n<ul>\n<li>初始化Echarts实例对象</li>\n<li>使用主题（第二个参数）</li>\n</ul>\n</li>\n<li><p>registerTheme方法</p>\n<ul>\n<li>注册主题</li>\n<li>只有注册过的主题，才能在init方法中使用该主题</li>\n</ul>\n</li>\n<li><p>registerMap方法</p>\n<ul>\n<li><p>注册地图数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json/map/china.json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ChinaJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  echarts<span class=\"token punctuation\">.</span><span class=\"token function\">registerMap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'china'</span><span class=\"token punctuation\">,</span> chinaJson<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>geo组件使用地图数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  geo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'map'</span><span class=\"token punctuation\">,</span>\n    map<span class=\"token operator\">:</span> <span class=\"token string\">'china'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>connect方法</p>\n<ul>\n<li>一个页面中可以有多个独立的图表</li>\n<li>每一个图表对应一个Echarts实例对象</li>\n<li>connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组<ul>\n<li>保存图片的自动拼接（saveAsImage）</li>\n<li>刷新按钮</li>\n<li>重置按钮</li>\n<li>提示框联动、图例选择、数据范围修改等等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十八、echartsInstance实例常用方法\"><a href=\"#十八、echartsInstance实例常用方法\" class=\"headerlink\" title=\"十八、echartsInstance实例常用方法\"></a>十八、echartsInstance实例常用方法</h3><ul>\n<li><p>setOption方法</p>\n<ul>\n<li>设置或修改图表实例的配置项以及数据</li>\n<li>多次调用setOption方法<ul>\n<li>合并新旧配置</li>\n<li>增量动画</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>resize方法</p>\n<ul>\n<li>重新计算和绘制图表</li>\n<li>一般和window对象的resize事件结合使用<ul>\n<li>window.onresize = mEcharts.resize</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>on\\off方法</p>\n<ul>\n<li>绑定或者解绑事件处理函数</li>\n<li>鼠标事件<ul>\n<li>常见事件：click、dbclick、mousedown、mousemove、mouseup等</li>\n</ul>\n</li>\n<li>Echarts事件<ul>\n<li>常见事件：legendselectchanged、datazoom、pieselectchanged、ma’pselectchanged</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>dispatchAction</p>\n<ul>\n<li><p>触发某些行为</p>\n</li>\n<li><p>使用代码模拟用户的行为</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">mCharts<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'hightlight'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 事件类型</span>\n  seriesIndex<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 图表索引(系列)</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 图表中哪一项高亮</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>clear</p>\n<ul>\n<li>清空当前实例，会移除实例中所有的组件和图表</li>\n<li>清空之后可以再次setOption</li>\n</ul>\n</li>\n<li><p>dispose方法</p>\n<ul>\n<li>销毁实例</li>\n<li>销毁后实例无法再被使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十九、websocket的基本使用\"><a href=\"#十九、websocket的基本使用\" class=\"headerlink\" title=\"十九、websocket的基本使用\"></a>十九、websocket的基本使用</h3><ul>\n<li><p>后端</p>\n<ul>\n<li><p>安装包</p>\n<ul>\n<li>npm i ws</li>\n</ul>\n</li>\n<li><p>创建对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> webSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">'8080'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>监听事件</p>\n<ul>\n<li><p>连接事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">wss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有客户端连接'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>接受数据事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">wss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有客户端连接'</span><span class=\"token punctuation\">)</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'客户端发送数据过来了'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>发送数据</p>\n<ul>\n<li>client.send(‘hello socket from back-end’)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>前端</p>\n<ul>\n<li><p>创建对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:8080'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听事件</p>\n<ul>\n<li>连接成功事件<ul>\n<li>ws.onopen = () =&gt; {}</li>\n</ul>\n</li>\n<li>接受数据事件<ul>\n<li>ws.onmessage = msg =&gt; {}</li>\n</ul>\n</li>\n<li>关闭连接事件<ul>\n<li>ws.onclose = () =&gt; {}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>发送数据</p>\n<ul>\n<li>ws.send</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、柱状图（type为bar）\"><a href=\"#一、柱状图（type为bar）\" class=\"headerlink\" title=\"一、柱状图（type为bar）\"></a>一、柱状图（type为bar）</h3><h4 id=\"1-数据格式\"><a href=\"#1-数据格式\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>一维数组</p>\n<h4 id=\"2-xAxis和yAxis\"><a href=\"#2-xAxis和yAxis\" class=\"headerlink\" title=\"2.xAxis和yAxis\"></a>2.xAxis和yAxis</h4><p>type为category时，需要指定data</p>\n<p>type为value时，data在series中指定</p>\n<h4 id=\"3-常见效果\"><a href=\"#3-常见效果\" class=\"headerlink\" title=\"3.常见效果\"></a>3.常见效果</h4><ul>\n<li><p>标记：最大值、最小值、平均值</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">markPoint：<span class=\"token punctuation\">&#123;</span>\n  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'max'</span>，\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'最大值'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'min'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'最小值'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  markLine<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        type<span class=\"token operator\">:</span> <span class=\"token string\">'average'</span>，\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'平均值'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<ul>\n<li><p>显示：</p>\n<p>label：数值显示</p>\n<p>barWidth： 柱宽度</p>\n<p>横向柱状图：xAxis和yAxis配置互换</p>\n</li>\n</ul>\n<h3 id=\"二、通用配置\"><a href=\"#二、通用配置\" class=\"headerlink\" title=\"二、通用配置\"></a>二、通用配置</h3><ul>\n<li>title标题<ul>\n<li>文字样式：textStyle</li>\n<li>标题边框：borderWidth、borderColor、borderRadius</li>\n<li>标题位置：left、top、right、bottom</li>\n</ul>\n</li>\n<li>tooltip提示框组件<ul>\n<li>触发类型：trigger<ul>\n<li>item</li>\n<li>axis</li>\n</ul>\n</li>\n<li>触发时机：triggerOn<ul>\n<li>mouseover</li>\n<li>click</li>\n</ul>\n</li>\n<li>格式化：formatter<ul>\n<li>字符串模板</li>\n<li>回调函数（参数：arg）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>toolbox工具栏（导出图片、数据视图、数据区域缩放、重置、动态类型切换五个工具）<ul>\n<li>feature（显示工具栏按钮）<ul>\n<li>savaAsImage（导出图片）</li>\n<li>dataView（数据视图）</li>\n<li>dataZoom（数据区域缩放）</li>\n<li>restore（重置）</li>\n<li>magicType（动态类型切换）：如magicType： { type: [‘bar’, ‘line’]}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>legend图例（用于筛选系列，需要和series配合使用）<ul>\n<li>legend中的data是一个数组</li>\n<li>legend中的data的值需要和series数组中某组数据的name值一致</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、折线图（type为line）\"><a href=\"#三、折线图（type为line）\" class=\"headerlink\" title=\"三、折线图（type为line）\"></a>三、折线图（type为line）</h3><h4 id=\"1-数据格式-1\"><a href=\"#1-数据格式-1\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>一维数组</p>\n<h4 id=\"2-常用效果\"><a href=\"#2-常用效果\" class=\"headerlink\" title=\"2.常用效果\"></a>2.常用效果</h4><ul>\n<li>标记：最大值、最小值、平均值、标注区间<ul>\n<li>markPoint</li>\n<li>markLine</li>\n<li>markArea</li>\n</ul>\n</li>\n<li>线条控制：平滑、风格<ul>\n<li>smooth、lineStyle </li>\n</ul>\n</li>\n<li>填充风格<ul>\n<li>areaStyle</li>\n</ul>\n</li>\n<li>紧挨y轴边缘（设置在xAxis）<ul>\n<li>boundaryGap</li>\n</ul>\n</li>\n<li>缩放：脱离0值比例<ul>\n<li>scale：true</li>\n</ul>\n</li>\n<li>堆叠图<ul>\n<li>stack：all</li>\n<li>可以和areaStyle配合使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"四、散点图（type为scatter）\"><a href=\"#四、散点图（type为scatter）\" class=\"headerlink\" title=\"四、散点图（type为scatter）\"></a>四、散点图（type为scatter）</h3><h4 id=\"1-数据格式-2\"><a href=\"#1-数据格式-2\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>二维数组</p>\n<h4 id=\"2-基本的散点图\"><a href=\"#2-基本的散点图\" class=\"headerlink\" title=\"2.基本的散点图\"></a>2.基本的散点图</h4><ul>\n<li>x轴和y轴type都是value</li>\n<li>x轴和y轴的数据，是一个二维数组</li>\n<li>type为scatter</li>\n</ul>\n<h4 id=\"3-常用效果\"><a href=\"#3-常用效果\" class=\"headerlink\" title=\"3.常用效果\"></a>3.常用效果</h4><ul>\n<li>气泡图效果<ul>\n<li>散点大小不同：symbolSize</li>\n<li>散点的颜色不同：itemStyle.color</li>\n</ul>\n</li>\n<li>涟漪动画效果<ul>\n<li>type: effectScatter</li>\n<li>showEffectOn: ‘emphasis’ 鼠标移入时才显示涟漪效果，默认值是render（渲染就显示涟漪效果）</li>\n<li>rippleEffect: { scale: 10} 散点涟漪效果的范围</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、直角坐标系的常用配置\"><a href=\"#五、直角坐标系的常用配置\" class=\"headerlink\" title=\"五、直角坐标系的常用配置\"></a>五、直角坐标系的常用配置</h3><p>直角坐标系的图表：柱状图（bar）、折线图（line）、散点图（scatter）</p>\n<ul>\n<li>grid网格（控制直角坐标系的布局和大小，x轴和y轴就是在grid的基础上进行绘制的）<ul>\n<li>显示gird<ul>\n<li>show</li>\n</ul>\n</li>\n<li>grid的边框<ul>\n<li>borderWidth、borderColor</li>\n</ul>\n</li>\n<li>grid的位置和大小<ul>\n<li>left</li>\n<li>top</li>\n<li>right</li>\n<li>bottom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>axis坐标轴（分为x轴和y轴）<ul>\n<li>坐标轴类型type<ul>\n<li>value：数值周，自动会从目标数据中读取数据</li>\n<li>category：类目轴，该类型必须通过data设置类目数据</li>\n</ul>\n</li>\n<li>显示位置position<ul>\n<li>xAxis：可取值为top或bottom</li>\n<li>yAxis：可取值为left或right</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>区域缩放dataZoom<ul>\n<li>dataZoom用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有。dataZoom是一个数组，可以配置多个区域缩放器</li>\n<li>类型type<ul>\n<li>slider：滑块控制缩放</li>\n<li>inside：内置，依靠鼠标滚轮或者双指缩放</li>\n</ul>\n</li>\n<li>指明产生作用的轴<ul>\n<li>xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可</li>\n<li>yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可</li>\n</ul>\n</li>\n<li>指明初始状态的缩放情况<ul>\n<li>start：数据窗口范围的起始百分比</li>\n<li>end：数据窗口范围的结束百分比</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、饼图（type为pie）\"><a href=\"#六、饼图（type为pie）\" class=\"headerlink\" title=\"六、饼图（type为pie）\"></a>六、饼图（type为pie）</h3><h4 id=\"1-数据格式-3\"><a href=\"#1-数据格式-3\" class=\"headerlink\" title=\"1.数据格式\"></a>1.数据格式</h4><p>json数据：data: [{name: ‘京东’，value: ‘9000’}]</p>\n<h4 id=\"2-基本的饼图\"><a href=\"#2-基本的饼图\" class=\"headerlink\" title=\"2.基本的饼图\"></a>2.基本的饼图</h4><ul>\n<li>数据是json数据格式</li>\n<li>type为pie</li>\n<li>无须配置xAxis和yAxis</li>\n</ul>\n<h4 id=\"3-饼图常见效果\"><a href=\"#3-饼图常见效果\" class=\"headerlink\" title=\"3.饼图常见效果\"></a>3.饼图常见效果</h4><ul>\n<li>显示数值<ul>\n<li>lable.formatter</li>\n</ul>\n</li>\n<li>圆环<ul>\n<li>设置两个半径 radius：[‘50%’, ‘70%’] 分别是内半径和外半径</li>\n</ul>\n</li>\n<li>南丁格尔图<ul>\n<li>roseType：’radius’</li>\n</ul>\n</li>\n<li>选中效果<ul>\n<li>选中模式 selectMode：single（可选中单个）\\multiple（可选中多个）</li>\n<li>选中偏移量 selectOffset：30</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七、地图（type：map）\"><a href=\"#七、地图（type：map）\" class=\"headerlink\" title=\"七、地图（type：map）\"></a>七、地图（type：map）</h3><h4 id=\"1-矢量地图的实现步骤\"><a href=\"#1-矢量地图的实现步骤\" class=\"headerlink\" title=\"1.矢量地图的实现步骤\"></a>1.矢量地图的实现步骤</h4><ul>\n<li>Echarts最基本的代码结构<ul>\n<li>引入js文件</li>\n<li>带宽高的DOM容器</li>\n<li>init初始化对象</li>\n<li>setOption设置option</li>\n</ul>\n</li>\n<li>准备中国的矢量地图json文件（<a href=\"http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5%EF%BC%89\">http://datav.aliyun.com/tools/atlas/index.html#&amp;lat=30.332329214580188&amp;lng=106.72278672066881&amp;zoom=3.5）</a></li>\n<li>使用ajax获取json<ul>\n<li>$.get(‘json/map/china.json’, function(chinaJson){})</li>\n</ul>\n</li>\n<li>往echarts全局对象注册地图的json数据<ul>\n<li>echarts.registerMap(‘chinaMap’, chinaJson)</li>\n</ul>\n</li>\n<li>在geo下设置<ul>\n<li>type:’map’</li>\n<li>map:’chinaMap’</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用配置\"><a href=\"#2-常用配置\" class=\"headerlink\" title=\"2.常用配置\"></a>2.常用配置</h4><ul>\n<li>缩放拖动<ul>\n<li>roam：true</li>\n</ul>\n</li>\n<li>名称显示<ul>\n<li>label</li>\n</ul>\n</li>\n<li>初始缩放比例<ul>\n<li>zoom：2（2倍）</li>\n</ul>\n</li>\n<li>地图中心点<ul>\n<li>center</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-常见效果-1\"><a href=\"#3-常见效果-1\" class=\"headerlink\" title=\"3.常见效果\"></a>3.常见效果</h4><ul>\n<li><p>不同城市颜色不同（如空气质量）</p>\n<ol>\n<li><p>显示基本的中国地图</p>\n</li>\n<li><p>城市的空气质量数据设置给series（此处的数据必须是[{name: cityName, value: ‘’}]的格式，其中name属性必须和省份名一致）</p>\n</li>\n<li><p>将series下的数据与geo关联起来</p>\n<p>设置type: ‘map’，geoIndex:0</p>\n</li>\n<li><p>结合visualMap配合使用</p>\n<p>visualMap: {min: 0, max: 40, range: { color: [‘white’, ‘red’]}}</p>\n</li>\n</ol>\n</li>\n<li><p>地图和散点图结合</p>\n<ol>\n<li><p>给series下配置散点图对象</p>\n</li>\n<li><p>准备好散点数据，设置给新对象的data（二维数组，地图坐标）</p>\n</li>\n<li><p>配置新对象的type为effectScatter</p>\n</li>\n<li><p>让散点图使用地图坐标系统</p>\n<p>coordinateSystem: ‘geo’</p>\n</li>\n<li><p>让涟漪的效果更加明显</p>\n<p>rippleEffect：{ scale：10 }</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"八、雷达图（type：radar）\"><a href=\"#八、雷达图（type：radar）\" class=\"headerlink\" title=\"八、雷达图（type：radar）\"></a>八、雷达图（type：radar）</h3><h4 id=\"1-实现步骤\"><a href=\"#1-实现步骤\" class=\"headerlink\" title=\"1.实现步骤\"></a>1.实现步骤</h4><ul>\n<li>echarts最基本的代码结构</li>\n<li>定义各个维度的最大值（在radar属性下）<ul>\n<li>indicator：[{name: ‘易用性’, max: 100]}]</li>\n</ul>\n</li>\n<li>准备具体产品的数据<ul>\n<li>在series下设置data：[{name: ‘华为手机’, value: [80, 80, 90, 95, 85]}</li>\n</ul>\n</li>\n<li>设置图表类型<ul>\n<li>在series下设置type：radar</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用配置-1\"><a href=\"#2-常用配置-1\" class=\"headerlink\" title=\"2.常用配置\"></a>2.常用配置</h4><ul>\n<li>显示数值:<ul>\n<li>label</li>\n</ul>\n</li>\n<li>区域面积（阴影）<ul>\n<li>areaStyle</li>\n</ul>\n</li>\n<li>绘制类型<ul>\n<li>shape: ‘circle’ 默认值 polygon</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"九、仪表盘（type：guage）\"><a href=\"#九、仪表盘（type：guage）\" class=\"headerlink\" title=\"九、仪表盘（type：guage）\"></a>九、仪表盘（type：guage）</h3><h4 id=\"1-实现步骤-1\"><a href=\"#1-实现步骤-1\" class=\"headerlink\" title=\"1.实现步骤\"></a>1.实现步骤</h4><ul>\n<li>echarts最基本的代码结构</li>\n<li>准备数据，设置给series下的data<ul>\n<li>data: [{value: 97}]</li>\n</ul>\n</li>\n<li>图标类型<ul>\n<li>在series下设置type：guage</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-常用效果-1\"><a href=\"#2-常用效果-1\" class=\"headerlink\" title=\"2.常用效果\"></a>2.常用效果</h4><ul>\n<li>数值范围<ul>\n<li>max</li>\n<li>min</li>\n</ul>\n</li>\n<li>多个指针<ul>\n<li>增加series下data数组中的元素</li>\n</ul>\n</li>\n<li>多个指针颜色差异<ul>\n<li>itemStyle</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十、主题\"><a href=\"#十、主题\" class=\"headerlink\" title=\"十、主题\"></a>十、主题</h3><h4 id=\"1-内置主题\"><a href=\"#1-内置主题\" class=\"headerlink\" title=\"1.内置主题\"></a>1.内置主题</h4><ul>\n<li><p>echarts中默认内置了两套主题：light、dark</p>\n</li>\n<li><p>在初始化对象方法中init中可以指明</p>\n<p>var chart = echarts.init(dom, ‘light’)</p>\n<p>var chart = echarts.init(dom, ‘dark’)</p>\n</li>\n</ul>\n<h4 id=\"2-自定义主题\"><a href=\"#2-自定义主题\" class=\"headerlink\" title=\"2.自定义主题\"></a>2.自定义主题</h4><ul>\n<li>1.在官网主题编辑器中编辑主题</li>\n<li>2.下载主题js文件</li>\n<li>3.引入主题js文件</li>\n<li>4.在init方法中使用主题</li>\n</ul>\n<h3 id=\"十一、调色盘\"><a href=\"#十一、调色盘\" class=\"headerlink\" title=\"十一、调色盘\"></a>十一、调色盘</h3><h4 id=\"1-它是一组颜色，图形、系列会自动从其中选择颜色\"><a href=\"#1-它是一组颜色，图形、系列会自动从其中选择颜色\" class=\"headerlink\" title=\"1.它是一组颜色，图形、系列会自动从其中选择颜色\"></a>1.它是一组颜色，图形、系列会自动从其中选择颜色</h4><ul>\n<li><p>主题调色盘（主题js文件中全局注册的color）</p>\n</li>\n<li><p>全局调色盘</p>\n<p>options：{</p>\n<p>​    color： [‘red’, ‘green’, ‘blue’]</p>\n<p>}</p>\n</li>\n<li><p>局部调色盘</p>\n<p>series: [{</p>\n<p>​    type: ‘bar’,</p>\n<p>​    color: [‘red’, ‘green’, ‘blue’]</p>\n<p>}]</p>\n</li>\n</ul>\n<h4 id=\"2-调色盘的作用遵循就近原则\"><a href=\"#2-调色盘的作用遵循就近原则\" class=\"headerlink\" title=\"2.调色盘的作用遵循就近原则\"></a>2.调色盘的作用遵循就近原则</h4><h4 id=\"3-颜色渐变\"><a href=\"#3-颜色渐变\" class=\"headerlink\" title=\"3.颜色渐变\"></a>3.颜色渐变</h4><ul>\n<li><p>线性渐变</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'linear'</span><span class=\"token punctuation\">,</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在图元中的初始x位置</span>\n      y<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 在图元中的初始y位置</span>\n      x2<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      y2<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 1代表到底部，0.5在中间</span>\n        colorStops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span> <span class=\"token comment\">// 0%处的颜色 </span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span> <span class=\"token comment\">// 100%处的颜色</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>径向渐变</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">itemStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  color<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'radial'</span><span class=\"token punctuation\">,</span>\n      x<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> \n      y<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n      r<span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 扩散的半径</span>\n        colorStops<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n          offset<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"十二、样式\"><a href=\"#十二、样式\" class=\"headerlink\" title=\"十二、样式\"></a>十二、样式</h3><ul>\n<li>直接样式<ul>\n<li>itemStyle、textStyle、lineStyle、areaStyle、label</li>\n</ul>\n</li>\n<li>高亮样式<ul>\n<li>在emphasis中包裹itemStyle、textStyle、lineStyle、areaStyle、label</li>\n</ul>\n</li>\n<li>优先级高，会覆盖主题中、调色盘的效果</li>\n</ul>\n<h3 id=\"十三、自适应\"><a href=\"#十三、自适应\" class=\"headerlink\" title=\"十三、自适应\"></a>十三、自适应</h3><p>当浏览器的大小发生变化的时候，如果想让图表也能随之适配变化</p>\n<ul>\n<li><p>1.监听窗口大小变化事件</p>\n</li>\n<li><p>2.在事件处理函数中调用echarts实例对象的resize方法即可</p>\n<p>window.onresize = myChart.resize</p>\n</li>\n</ul>\n<h3 id=\"十四、加载动画\"><a href=\"#十四、加载动画\" class=\"headerlink\" title=\"十四、加载动画\"></a>十四、加载动画</h3><p>echarts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可</p>\n<ul>\n<li><p>显示加载动画</p>\n<p>mCharts.showLoading()</p>\n</li>\n<li><p>隐藏加载动画</p>\n<p>mCharts.hideLoading()</p>\n</li>\n</ul>\n<h3 id=\"十五、增量动画\"><a href=\"#十五、增量动画\" class=\"headerlink\" title=\"十五、增量动画\"></a>十五、增量动画</h3><ul>\n<li>增量动画的实现方式<ul>\n<li>mCharts.setOption<ul>\n<li>所有数据的更新都通过setOption实现</li>\n<li>不用考虑数据到底产生了哪些变化</li>\n<li>echarts会找到两组数据之间的差异然后通过合适的动画取实现数据的变化</li>\n<li>新旧option的关系并不是相互覆盖的关系，而是相互整合的关系</li>\n<li>我们在设置新的option的时候，只需要考虑到变化的部分就可以</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十六、动画配置项\"><a href=\"#十六、动画配置项\" class=\"headerlink\" title=\"十六、动画配置项\"></a>十六、动画配置项</h3><ul>\n<li><p>开启动画</p>\n<ul>\n<li>animation：true</li>\n</ul>\n</li>\n<li><p>动画时长</p>\n<ul>\n<li>animationDuration：5000</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">animationDuration： <span class=\"token keyword\">function</span>（arg） <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 这里的arg是所有需要动画效果的图元的索引，会根据不同形式的图元元素进行分组</span>\n  <span class=\"token keyword\">return</span> arg <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>缓动动画</p>\n<ul>\n<li>animationEasing: ‘bounceOut’</li>\n</ul>\n</li>\n<li><p>动画阈值</p>\n<ul>\n<li>animationThreshold： 8</li>\n<li>单中形式的元素数量大于这个阈值会关闭动画</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十七、全局Echarts对象常用方法\"><a href=\"#十七、全局Echarts对象常用方法\" class=\"headerlink\" title=\"十七、全局Echarts对象常用方法\"></a>十七、全局Echarts对象常用方法</h3><ul>\n<li><p>init方法</p>\n<ul>\n<li>初始化Echarts实例对象</li>\n<li>使用主题（第二个参数）</li>\n</ul>\n</li>\n<li><p>registerTheme方法</p>\n<ul>\n<li>注册主题</li>\n<li>只有注册过的主题，才能在init方法中使用该主题</li>\n</ul>\n</li>\n<li><p>registerMap方法</p>\n<ul>\n<li><p>注册地图数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json/map/china.json'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ChinaJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  echarts<span class=\"token punctuation\">.</span><span class=\"token function\">registerMap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'china'</span><span class=\"token punctuation\">,</span> chinaJson<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>geo组件使用地图数据</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  geo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'map'</span><span class=\"token punctuation\">,</span>\n    map<span class=\"token operator\">:</span> <span class=\"token string\">'china'</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>connect方法</p>\n<ul>\n<li>一个页面中可以有多个独立的图表</li>\n<li>每一个图表对应一个Echarts实例对象</li>\n<li>connect可以实现多图关联，传入联动目标为Echarts实例对象，支持数组<ul>\n<li>保存图片的自动拼接（saveAsImage）</li>\n<li>刷新按钮</li>\n<li>重置按钮</li>\n<li>提示框联动、图例选择、数据范围修改等等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十八、echartsInstance实例常用方法\"><a href=\"#十八、echartsInstance实例常用方法\" class=\"headerlink\" title=\"十八、echartsInstance实例常用方法\"></a>十八、echartsInstance实例常用方法</h3><ul>\n<li><p>setOption方法</p>\n<ul>\n<li>设置或修改图表实例的配置项以及数据</li>\n<li>多次调用setOption方法<ul>\n<li>合并新旧配置</li>\n<li>增量动画</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>resize方法</p>\n<ul>\n<li>重新计算和绘制图表</li>\n<li>一般和window对象的resize事件结合使用<ul>\n<li>window.onresize = mEcharts.resize</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>on\\off方法</p>\n<ul>\n<li>绑定或者解绑事件处理函数</li>\n<li>鼠标事件<ul>\n<li>常见事件：click、dbclick、mousedown、mousemove、mouseup等</li>\n</ul>\n</li>\n<li>Echarts事件<ul>\n<li>常见事件：legendselectchanged、datazoom、pieselectchanged、ma’pselectchanged</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>dispatchAction</p>\n<ul>\n<li><p>触发某些行为</p>\n</li>\n<li><p>使用代码模拟用户的行为</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">mCharts<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'hightlight'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 事件类型</span>\n  seriesIndex<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 图表索引(系列)</span>\n  dataIndex<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 图表中哪一项高亮</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>clear</p>\n<ul>\n<li>清空当前实例，会移除实例中所有的组件和图表</li>\n<li>清空之后可以再次setOption</li>\n</ul>\n</li>\n<li><p>dispose方法</p>\n<ul>\n<li>销毁实例</li>\n<li>销毁后实例无法再被使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十九、websocket的基本使用\"><a href=\"#十九、websocket的基本使用\" class=\"headerlink\" title=\"十九、websocket的基本使用\"></a>十九、websocket的基本使用</h3><ul>\n<li><p>后端</p>\n<ul>\n<li><p>安装包</p>\n<ul>\n<li>npm i ws</li>\n</ul>\n</li>\n<li><p>创建对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> webSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">'8080'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>监听事件</p>\n<ul>\n<li><p>连接事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">wss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有客户端连接'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>接受数据事件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">wss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">client</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'有客户端连接'</span><span class=\"token punctuation\">)</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'客户端发送数据过来了'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>发送数据</p>\n<ul>\n<li>client.send(‘hello socket from back-end’)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>前端</p>\n<ul>\n<li><p>创建对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:8080'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>监听事件</p>\n<ul>\n<li>连接成功事件<ul>\n<li>ws.onopen = () =&gt; {}</li>\n</ul>\n</li>\n<li>接受数据事件<ul>\n<li>ws.onmessage = msg =&gt; {}</li>\n</ul>\n</li>\n<li>关闭连接事件<ul>\n<li>ws.onclose = () =&gt; {}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>发送数据</p>\n<ul>\n<li>ws.send</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"react学习笔记","keywords":"react","_content":"## 一、react的基本使用\n\n\n\n#### 1.react的安装：\n\n安装命令： npm i react react-dom\n\n- react包是核心，提供创建元素、组建等功能\n- react-dom包提供DOM相关功能\n\n#### 2.react的使用\n\n- 引入react和react-dom\n- 创建react元素\n  - const title = react.createElement('h1', null, 'hello react')\n  - 第一个参数：创建的元素名称\n  - 第二个参数： 元素的属性\n  - 第三个和以后的参数： 元素的子节点\n- 渲染react元素到页面中\n  - ReactDom.render(title, document.querySelector('#app') )\n  - 第一个参数：要渲染的元素\n  - 第二个参数：DOM对象，用于指定渲染到页面中的位置\n\n## 二、react脚手架的使用\n\n#### 1.使用react脚手架初始化项目\n\n- 命令：npx create-react-app my-app\n\n#### 2.npx命令介绍\n\n目的：提升包内提供的命令行工具的使用体验。无需安装脚手架包，就可以直接使用这个包提供的命令\n\n## 三、JSX语法的基本使用\n\n#### 1.使用步骤\n\n- 使用JSX语法创建react元素\n\n```react\n  const title = <h1>hello JSX<h1>\n  ```\n\n- 使用ReactDOM.render()方法渲染元素到页面中\n\n```react\n  ReactDOM.render(title, document.querySelector('#root'))\n  ```\n\n#### 2.为什么脚手架中可以使用JSX语法\n\ncreate-react-app脚手架中默认有@babel/preset-react，会对项目中的JSX语法进行编译\n\n#### 3.注意点\n\n- 元素的属性名使用驼峰命名法\n- 特殊属性名： class -> className, for -> htmlFor, table index -> tabIndex\n- 没有子节点的React元素可以用/>结束\n- 推荐：使用小括号包裹JSX，从而避免js中的自动插入分号陷阱\n\n## 四、JSX中使用javascript表达式\n\n- 数据存储在js中\n\n- 语法： { javascript表达式 }\n\n```react\n  const name = 'jack'\n  const div = (\n  \t<div>hello {name}</div>\n  )\n  ```\n\n- 注意点\n\n  - 单大括号中可以使用任意的JavaScript表达式\n  - JSX自身也是JS表达式，可以在单大括号中使用\n  - js中的对象不是表达式，不能直接在单大括号中使用，一般只会出现在style属性中\n  - 不能在{}中出现语句（如if/for语句等 ）\n\n## 五、JSX的条件渲染\n\n- 场景：loading效果\n\n- 条件渲染：根据条件渲染特定的JSX结构\n\n- 可以使用if/else或三元运算符或逻辑于运算符来实现\n\n```react\n  const isLoading = false\n  const loadData = () => {\n    return isLoading ?  (<div>加载中...</div>) : (<div>加载完成</div>)\n  }\n  const title = (\n    <div>{loadData()}</div>\n  )\n  ```\n\n## 六、JSX的列表渲染\n\n- 如果要渲染一组数据，应该使用数组的map方法\n\n- 渲染列表时应该添加key属性，key属性的值应该要保证唯一\n\n- 尽量避免使用索引作为key\n\n```react\n  const songs = [\n    {id: 1, name: '痴心绝对'},\n    {id: 2, name: '童话'},\n    {id: 3, name: '演员'},\n  ]\n  const title = (\n    <ul>\n      {songs.map(item => <li key={item.id}>{item.name}</li>)}\n    </ul>\n  )\n  ```\n\n## 七、JSX的样式处理\n\n1. 行内样式\n2. 类名\n\n```react\nimport './index.css'\nconst name = 'kobe'\n\nconst title = (\n  <h1 className=\"title\" style={{color: 'red', backgroundColor: 'blue'}}>\n    我是{name}\n  </h1>\n)\n```\n\n## 八、react组件的两种创建方式\n\n#### 1.使用函数创建组件\n\n- 使用JS中的函数创建的组件叫做函数组件\n\n- 函数组件必须有返回值\n\n- 组件名称必须以大写字母开头，react据此区分组件和普通的react元素\n\n- 使用函数名作为组件标签名\n\n```react\n  function Hello() {\n  \treturn(\n  \t\t<div>这是我的第一个函数组件</div>\n  \t)\n  }\n  ReactDOM.render(<Hello/>, document.getElementById('root'))\n  ```\n\n#### 2.使用类创建组件\n\n- 类组件：使用ES6的class创建的组件\n\n- 约定1：类名称必须以大写字母开头\n\n- 约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法和属性\n\n- 约定3：类组件必须提供render（）方法\n\n- 约定4：render（）方法必须有返回值，表示该组件的结构\n\n```react\n  class Hello extends React.Component {\n  \trender() {\n  \t\treturn <div>我是类组件<div>\n  \t}\n  }\n  ReactDOM.render(<Hello/>, document.getElementById('root'))\n  ```\n\n#### 3.抽离为独立的js模块\n\n1. 创建Hello.js\n\n2. 在Hello.js中导入react\n\n3. 创建组件（函数或类组件）\n\n4. 在Hello.js中到处该组件\n\n5. 在index.js中导入Hello组件\n\n6. 渲染组件\n\n```react\n  // Hello.js\n  import React from 'react'\n  class Hello extends React.Component {\n    render() {\n      return <div>我是Hello组件</div>\n    }\n  }\n  // index.js\n  import Hello from './Hello'\n  ReactDOM.render(<Hello/>, root)\n```\n\n## 九、react事件处理\n\n- react事件绑定语法与DOM事件语法相似\n\n- 语法：on + 事件名称 = {事件处理程序}，比如： onClick = { () => {} }\n\n- 注意：react事件才用驼峰命名法\n\n- 类组件中绑定事件\n\n```react\n  class App extends React.Component {\n    handleClick() {\n      console.log('click')\n    }\n  \trender() {\n      return <button onClick={this.handleClick}>点击</button>\n    }\n  }\n  ```\n\n- 函数组件中绑定事件\n\n```react\n  function App () {\n    handleClick() {\n      console.log('click')\n    }\n    return <button onClick={handleClick}>点击</button>\n  }\n  ```\n\n- 事件对象\n\n  - 可以通过事件处理程序的参数获取到事件对象\n\n  - react中的事件对象叫做：合成事件（对象）\n\n  - 合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题\n\n  ```react\n    class Hello extends React.Component {\n      handleClick(e) {\n        e.preventDefault()\n      }\n      render() {\n        return <a onClick={this.handleClick} href=\"http://www.baidu.com\">百度一下</a>\n      }\n    }\n    ```\n\n## 十、有状态组件和无状态组件\n\n- 函数组件又叫做无状态组件，类组件又叫做有状态组件\n- 状态（state）即数据\n- 函数组件没有自己的状态，只负责数据展示（静）\n- 类组件有自己的状态，负责更新UI，让页面动起来\n\n## 十一、组件中的state和setState\n\n#### 1.state的基本使用\n\n- 状态即数据\n\n- 状态是私有的，只能在组件内部使用\n\n- 通过this.state来获取状态\n\n```react\n  class Hello extends React.Component {\n    // constructor() {\n    //  super(); //\n    //  this.state = {\n    //    count: 1\n    // }\n    // }\n    // 简写\n    state = {\n  \t\tcount: 1\n    }\n    render() {\n      return <h2>计数器： {this.state.count}</h2>\n    }\n  }\n  ```\n\n#### 2.setState()修改状态\n\n- 状态是可变的\n\n- 语法：this.setState({要修改的数据})\n\n- 注意：不要直接修改state的值\n\n- setState()作用：修改state、更新UI\n\n```react\n  this.setState({\n    count: this.state.count + 1\n  })\n  ```\n\n\n## 十二、事件绑定this指向\n\n1. 利用箭头函数改变this指向\n\n  ```react\n     class Hello extends React.Component {\n     \tstate = {\n         count: 1\n       }\n     \trender() {\n         return (\n         \t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={() => this.handleClick()}>+1</button>\n           </div>\n         )\n       }\n     \thandleClick() {\n         this.setState({\n           count: this.state.count + 1\n         })\n       }\n     }\n     ```\n\n2. 利用bind改变this指向\n\n  ```react\n     class Hello extends React.Component {\n     \tconstructor() {\n         this.state = {\n     \t\t\tcount: 1\n         }\n         this.handleClick = this.handleClick.bind(this)\n       }\n     \trender() {\n     \t\treturn (\n     \t\t\t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={this.handleClick}>-1</button>\n           </div>\n     \t\t)\n     \t}\n     \thandleClick() {\n     \t\tthis.setState({\n           count: this.state.count - 1\n         })\n     \t}\n     }\n     ```\n\n3. class的箭头函数实例方法（推荐方式，脚手架配置的babel对这种语法进行了转换）\n\n  ```react\n     class Hello extends React.Component {\n     \tconstructor() {\n         this.state = {\n     \t\t\tcount: 1\n         }\n         this.handleClick = this.handleClick.bind(this)\n       }\n     \trender() {\n     \t\treturn (\n     \t\t\t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={this.handleClick}>-1</button>\n           </div>\n     \t\t)\n     \t}\n     \thandleClick = () => {\n     \t\tthis.setState({\n           count: this.state.count - 1\n         })\n     \t}\n     }\n     ```\n\n## 十三、表单处理\n\n#### 1.受控组件（常用）\n\n其值收到react控制的表单元素\n\n实现一个受控组件（类似于vue中的v-model）：\n\n1.表单value绑定state中的状态\n\n2.监听表单的change事件，修改state中的状态\n\n```react\nclass Hello extends React.Component {\n\tstate = {\n    text: ''\n  }\n\trender() {\n    return <input type=\"text\" value={this.state.text} onClick={ this.inputChange }></input>\n  }\n\tinputChange = e => {\n    this.setState({\n      text: e.target.value\n    })\n\t}\n}\n```\n\n#### 2.非受控组件（不常用）\n\n- 通过React.createRef()方法创建ref对象\n\n```react\n  constructor() {\n    super()\n    this.txtRef = React.createRef()\n  }\n  ```\n\n  \n\n- 表单使用ref对象\n\n```react\n  render() {\n    return (\n    \t<div>\n      \t<input type=\"text\" ref={ this.txtRef }></input>\n        <button onClick={ this.getValue }>获取value</button>\n      </div>\n    )\n  }\n  ```\n\n  \n\n- 通过ref对象获取表单的值\n\n```react\n  getValue = () => {\n  \tconsole.log(this.txtRef.current.value)\n  }\n  ```\n\n## 十四、组件通讯\n\n#### 1.组件的props\n\n- props的作用： 与vue的props类似，父组件向子组件传递数据，子组件用来接收数据\n\n- 接收数据：函数组件直接用props，类组件用this.props（和作用域有关，类组件的props加在实例上，函数组件直接通过参数接收）\n\n```react\n   // 1.函数组件props\n  const Hello = props => {\n    return (\n      <h2>func props: { props.name }</h2>\n    )\n  }\n  // 2.类组件props\n  class Hello extends React.Component {\n    render() {\n      return (\n        <h2>class props: { this.props.name }</h2>\n      )\n    }\n  }\n  \n  ReactDOM.render(<Hello name=\"component props\" />, document.querySelector('#root'))\n  ```\n\n- 特点：\n\n  - 可以给组件穿任意类型的数据（数组、对象、jsx表达式、函数等）\n  - props只读属性，只能读取属性的值，无法修改对象\n  - ⚠️在constructor中使用props时，需要接收props并传递给super，否则无法在构造函数中获取到props\n\n#### 2.父组件传递数据给子组件\n\n```react\nclass Parent extends React.Component {\n  state = {\n    name: 'kobe'\n  }\n  render() {\n    return (\n      <div>\n        父组件\n        <Child name={ this.state.name }></Child>\n        </div>\n    )\n  }\n}\nclass Child extends React.Component {\n  render() {\n    return (\n      <div>父组件传递给子组件的数据: { this.props.name}</div>\n    )\n  }\n}\nReactDOM.render(\n  <Parent/>,\n  document.querySelector(\"#root\")\n);\n```\n\n#### 3.子组件传递数据给父组件\n\n思路：父组件提供回调函数，同时将回调通过props传递给子组件，子组件通过props接收回调，执行回调并将需要传递的数据作为回调的参数传递给父组件\n\n```react\nclass Father extends React.Component {\n  state = {\n    childMsg: ''\n  }\n  render() {\n\t\treturn (\n    \t<div>\n      \t<h2>子组件传递的数据: { this.state.childMsg }</h2>\n        <Child getMsg={ this.getChildMsg }></Child>\n      </div>\n    )\n  }\n\tgetChildMsg(childMsg) {\n\t\tthis.setState({\n      childMsg:  childMsg\n    })\n  }\n}\nclass Son extends React.Component {\n\tstate = {\n\t\tchildMsg: 'child'\n  }\n\trender() {\n\t\treturn (\n    \t<button onClick={ this.emitMsg }></button>\n    )\n  }\n\temitMsg = () => {\n\t\tthis.props.getMsg(this.state.childMsg)\n  }\n}\n```\n\n注意：此处在Child组件中，render函数的onClick上不能直接调用this.props.getMsg()，而要在抽离到实例方法中。原因：react会在props和state改变的时候调用render对DOM进行diff后更新渲染，如果在render中再次调用getMsg修改state，会陷入死循环并报错\n\n#### 4.兄弟组件通讯\n\n- 将共享状态提升到最近的公共的父组件中，又公告父组件管理这个状态\n\n- 父组件：提供共享状态、提供操作共享状态的方法\n\n- 子组件：通过props获取共享状态和操作共享状态\n\n```react\n  class Parent extends React.Component {\n    // 状态提升\n    state = {\n      count: 1\n    }\n    render() {\n      return (\n        <div>\n          <Child1 count={ this.state.count }></Child1>\n          <Child2 increment = { this.increment}></Child2>\n        </div>\n      )\n    }\n    // 提供修改状态的方法\n    increment = () => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    }\n  }\n  \n  const Child1 = props => {\n    return (\n      <h2>计数器: { props.count }</h2>\n    )\n  }\n  \n  const Child2 = props => {\n    const increment = () => {\n      props.increment()\n    }\n    return (\n      <button onClick={ increment }>+1</button>\n    )\n  \n  }\n    ReactDOM.render(\n      <Parent/>,\n      document.querySelector(\"#root\")\n    )\n  ```\n\n\n#### 5.组件树传递数据\n\n- Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。\n\n- 使用 context, 我们可以避免通过中间元素传递 props：\n\n```react\n  // Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n  // 为当前的 theme 创建一个 context（“light”为默认值）。\n  const ThemeContext = React.createContext('light');\n  class App extends React.Component {\n    render() {\n      // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n      // 无论多深，任何组件都能读取这个值。\n      // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n      return (\n        <ThemeContext.Provider value=\"dark\">\n          <Toolbar />\n        </ThemeContext.Provider>\n      );\n    }\n  }\n  \n  // 中间的组件再也不必指明往下传递 theme 了。\n  function Toolbar() {\n    return (\n      <div>\n        <ThemedButton />\n      </div>\n    );\n  }\n  \n  class ThemedButton extends React.Component {\n    // 指定 contextType 读取当前的 theme context。\n    // React 会往上找到最近的 theme Provider，然后使用它的值。\n    // 在这个例子中，当前的 theme 值为 “dark”。\n    static contextType = ThemeContext;\n    render() {\n      return <Button theme={this.context} />;\n    }\n  }\n  ```\n\n- 使用方法：\n\n  - 1.React.createContext方法创建context\n\n  ```react\n    const MyContext = React.createContext(defaultValue)\n    // 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n    // 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。此默认值有助于在不使用 Provider 包装组件的情况下对组件进行测试。注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效\n    // or\n    const { Provider, Consumer } = React.creactContext()\n    ```\n\n  - 2.使用Context.Provider提供数据\n\n  ```react\n    <MyContext.Provider value={/* 某个值 */} />\n    // or\n    <Provider value={} />\n    // 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。\n    \n    // Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。\n    \n    // 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n    \n    \n    ```\n\n  - value提供为对象时注意事项：\n\n  - 因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染。举个例子，当每一次 Provider 重渲染时，以下的代码会重渲染所有下面的 consumers 组件，因为 `value` 属性总是被赋值为新的对象：\n\n  ```react\n    class App extends React.Component {\n      render() {\n        return (\n          <MyContext.Provider value={{something: 'something'}}>\n            <Toolbar />\n          </MyContext.Provider>\n        );\n      }\n    }\n    ```\n\n  - 为了防止这种情况，将 value 状态提升到父节点的 state 里：\n\n  ```react\n    class App extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          value: {something: 'something'},\n        };\n      }\n    \n      render() {\n        return (\n          <MyContext.Provider value={this.state.value}>\n            <Toolbar />\n          </MyContext.Provider>\n        );\n      }\n    }\n    ```\n\n  - 3.消费数据\n\n    - 方式1：Class.contextType\n\n    ```react\n       // 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。此属性能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\n      class MyClass extends React.Component {\n        static contextType = MyContext;\n        render() {\n          let value = this.context;\n          /* 基于这个值进行渲染工作 */\n        }\n      }\n      ```\n\n    - 方式2：Context.Consumer\n\n    ```react\n      // 一个 React 组件可以订阅 context 的变更，此组件可以让你在函数式组件中可以订阅 context。\n      \n      // 这种方法需要一个函数作为子元素（function as a child）。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n      <MyContext.Consumer>\n        {value => /* 基于 context 值进行渲染*/}\n      </MyContext.Consumer>\n      // or \n      <Consumer>\n      \t{value => /* 基于 context 值进行渲染*/}\n      </Consumer>\n      ```\n\n      \n\n","source":"_posts/react.md","raw":"---\ntitle: react学习笔记\ntag: react\nkeywords: react\ncategories: 前端框架\n---\n## 一、react的基本使用\n\n\n\n#### 1.react的安装：\n\n安装命令： npm i react react-dom\n\n- react包是核心，提供创建元素、组建等功能\n- react-dom包提供DOM相关功能\n\n#### 2.react的使用\n\n- 引入react和react-dom\n- 创建react元素\n  - const title = react.createElement('h1', null, 'hello react')\n  - 第一个参数：创建的元素名称\n  - 第二个参数： 元素的属性\n  - 第三个和以后的参数： 元素的子节点\n- 渲染react元素到页面中\n  - ReactDom.render(title, document.querySelector('#app') )\n  - 第一个参数：要渲染的元素\n  - 第二个参数：DOM对象，用于指定渲染到页面中的位置\n\n## 二、react脚手架的使用\n\n#### 1.使用react脚手架初始化项目\n\n- 命令：npx create-react-app my-app\n\n#### 2.npx命令介绍\n\n目的：提升包内提供的命令行工具的使用体验。无需安装脚手架包，就可以直接使用这个包提供的命令\n\n## 三、JSX语法的基本使用\n\n#### 1.使用步骤\n\n- 使用JSX语法创建react元素\n\n```react\n  const title = <h1>hello JSX<h1>\n  ```\n\n- 使用ReactDOM.render()方法渲染元素到页面中\n\n```react\n  ReactDOM.render(title, document.querySelector('#root'))\n  ```\n\n#### 2.为什么脚手架中可以使用JSX语法\n\ncreate-react-app脚手架中默认有@babel/preset-react，会对项目中的JSX语法进行编译\n\n#### 3.注意点\n\n- 元素的属性名使用驼峰命名法\n- 特殊属性名： class -> className, for -> htmlFor, table index -> tabIndex\n- 没有子节点的React元素可以用/>结束\n- 推荐：使用小括号包裹JSX，从而避免js中的自动插入分号陷阱\n\n## 四、JSX中使用javascript表达式\n\n- 数据存储在js中\n\n- 语法： { javascript表达式 }\n\n```react\n  const name = 'jack'\n  const div = (\n  \t<div>hello {name}</div>\n  )\n  ```\n\n- 注意点\n\n  - 单大括号中可以使用任意的JavaScript表达式\n  - JSX自身也是JS表达式，可以在单大括号中使用\n  - js中的对象不是表达式，不能直接在单大括号中使用，一般只会出现在style属性中\n  - 不能在{}中出现语句（如if/for语句等 ）\n\n## 五、JSX的条件渲染\n\n- 场景：loading效果\n\n- 条件渲染：根据条件渲染特定的JSX结构\n\n- 可以使用if/else或三元运算符或逻辑于运算符来实现\n\n```react\n  const isLoading = false\n  const loadData = () => {\n    return isLoading ?  (<div>加载中...</div>) : (<div>加载完成</div>)\n  }\n  const title = (\n    <div>{loadData()}</div>\n  )\n  ```\n\n## 六、JSX的列表渲染\n\n- 如果要渲染一组数据，应该使用数组的map方法\n\n- 渲染列表时应该添加key属性，key属性的值应该要保证唯一\n\n- 尽量避免使用索引作为key\n\n```react\n  const songs = [\n    {id: 1, name: '痴心绝对'},\n    {id: 2, name: '童话'},\n    {id: 3, name: '演员'},\n  ]\n  const title = (\n    <ul>\n      {songs.map(item => <li key={item.id}>{item.name}</li>)}\n    </ul>\n  )\n  ```\n\n## 七、JSX的样式处理\n\n1. 行内样式\n2. 类名\n\n```react\nimport './index.css'\nconst name = 'kobe'\n\nconst title = (\n  <h1 className=\"title\" style={{color: 'red', backgroundColor: 'blue'}}>\n    我是{name}\n  </h1>\n)\n```\n\n## 八、react组件的两种创建方式\n\n#### 1.使用函数创建组件\n\n- 使用JS中的函数创建的组件叫做函数组件\n\n- 函数组件必须有返回值\n\n- 组件名称必须以大写字母开头，react据此区分组件和普通的react元素\n\n- 使用函数名作为组件标签名\n\n```react\n  function Hello() {\n  \treturn(\n  \t\t<div>这是我的第一个函数组件</div>\n  \t)\n  }\n  ReactDOM.render(<Hello/>, document.getElementById('root'))\n  ```\n\n#### 2.使用类创建组件\n\n- 类组件：使用ES6的class创建的组件\n\n- 约定1：类名称必须以大写字母开头\n\n- 约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法和属性\n\n- 约定3：类组件必须提供render（）方法\n\n- 约定4：render（）方法必须有返回值，表示该组件的结构\n\n```react\n  class Hello extends React.Component {\n  \trender() {\n  \t\treturn <div>我是类组件<div>\n  \t}\n  }\n  ReactDOM.render(<Hello/>, document.getElementById('root'))\n  ```\n\n#### 3.抽离为独立的js模块\n\n1. 创建Hello.js\n\n2. 在Hello.js中导入react\n\n3. 创建组件（函数或类组件）\n\n4. 在Hello.js中到处该组件\n\n5. 在index.js中导入Hello组件\n\n6. 渲染组件\n\n```react\n  // Hello.js\n  import React from 'react'\n  class Hello extends React.Component {\n    render() {\n      return <div>我是Hello组件</div>\n    }\n  }\n  // index.js\n  import Hello from './Hello'\n  ReactDOM.render(<Hello/>, root)\n```\n\n## 九、react事件处理\n\n- react事件绑定语法与DOM事件语法相似\n\n- 语法：on + 事件名称 = {事件处理程序}，比如： onClick = { () => {} }\n\n- 注意：react事件才用驼峰命名法\n\n- 类组件中绑定事件\n\n```react\n  class App extends React.Component {\n    handleClick() {\n      console.log('click')\n    }\n  \trender() {\n      return <button onClick={this.handleClick}>点击</button>\n    }\n  }\n  ```\n\n- 函数组件中绑定事件\n\n```react\n  function App () {\n    handleClick() {\n      console.log('click')\n    }\n    return <button onClick={handleClick}>点击</button>\n  }\n  ```\n\n- 事件对象\n\n  - 可以通过事件处理程序的参数获取到事件对象\n\n  - react中的事件对象叫做：合成事件（对象）\n\n  - 合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题\n\n  ```react\n    class Hello extends React.Component {\n      handleClick(e) {\n        e.preventDefault()\n      }\n      render() {\n        return <a onClick={this.handleClick} href=\"http://www.baidu.com\">百度一下</a>\n      }\n    }\n    ```\n\n## 十、有状态组件和无状态组件\n\n- 函数组件又叫做无状态组件，类组件又叫做有状态组件\n- 状态（state）即数据\n- 函数组件没有自己的状态，只负责数据展示（静）\n- 类组件有自己的状态，负责更新UI，让页面动起来\n\n## 十一、组件中的state和setState\n\n#### 1.state的基本使用\n\n- 状态即数据\n\n- 状态是私有的，只能在组件内部使用\n\n- 通过this.state来获取状态\n\n```react\n  class Hello extends React.Component {\n    // constructor() {\n    //  super(); //\n    //  this.state = {\n    //    count: 1\n    // }\n    // }\n    // 简写\n    state = {\n  \t\tcount: 1\n    }\n    render() {\n      return <h2>计数器： {this.state.count}</h2>\n    }\n  }\n  ```\n\n#### 2.setState()修改状态\n\n- 状态是可变的\n\n- 语法：this.setState({要修改的数据})\n\n- 注意：不要直接修改state的值\n\n- setState()作用：修改state、更新UI\n\n```react\n  this.setState({\n    count: this.state.count + 1\n  })\n  ```\n\n\n## 十二、事件绑定this指向\n\n1. 利用箭头函数改变this指向\n\n  ```react\n     class Hello extends React.Component {\n     \tstate = {\n         count: 1\n       }\n     \trender() {\n         return (\n         \t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={() => this.handleClick()}>+1</button>\n           </div>\n         )\n       }\n     \thandleClick() {\n         this.setState({\n           count: this.state.count + 1\n         })\n       }\n     }\n     ```\n\n2. 利用bind改变this指向\n\n  ```react\n     class Hello extends React.Component {\n     \tconstructor() {\n         this.state = {\n     \t\t\tcount: 1\n         }\n         this.handleClick = this.handleClick.bind(this)\n       }\n     \trender() {\n     \t\treturn (\n     \t\t\t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={this.handleClick}>-1</button>\n           </div>\n     \t\t)\n     \t}\n     \thandleClick() {\n     \t\tthis.setState({\n           count: this.state.count - 1\n         })\n     \t}\n     }\n     ```\n\n3. class的箭头函数实例方法（推荐方式，脚手架配置的babel对这种语法进行了转换）\n\n  ```react\n     class Hello extends React.Component {\n     \tconstructor() {\n         this.state = {\n     \t\t\tcount: 1\n         }\n         this.handleClick = this.handleClick.bind(this)\n       }\n     \trender() {\n     \t\treturn (\n     \t\t\t<div>\n           \t<h2>计数器：{this.state.count}</h2>\n             <button onClick={this.handleClick}>-1</button>\n           </div>\n     \t\t)\n     \t}\n     \thandleClick = () => {\n     \t\tthis.setState({\n           count: this.state.count - 1\n         })\n     \t}\n     }\n     ```\n\n## 十三、表单处理\n\n#### 1.受控组件（常用）\n\n其值收到react控制的表单元素\n\n实现一个受控组件（类似于vue中的v-model）：\n\n1.表单value绑定state中的状态\n\n2.监听表单的change事件，修改state中的状态\n\n```react\nclass Hello extends React.Component {\n\tstate = {\n    text: ''\n  }\n\trender() {\n    return <input type=\"text\" value={this.state.text} onClick={ this.inputChange }></input>\n  }\n\tinputChange = e => {\n    this.setState({\n      text: e.target.value\n    })\n\t}\n}\n```\n\n#### 2.非受控组件（不常用）\n\n- 通过React.createRef()方法创建ref对象\n\n```react\n  constructor() {\n    super()\n    this.txtRef = React.createRef()\n  }\n  ```\n\n  \n\n- 表单使用ref对象\n\n```react\n  render() {\n    return (\n    \t<div>\n      \t<input type=\"text\" ref={ this.txtRef }></input>\n        <button onClick={ this.getValue }>获取value</button>\n      </div>\n    )\n  }\n  ```\n\n  \n\n- 通过ref对象获取表单的值\n\n```react\n  getValue = () => {\n  \tconsole.log(this.txtRef.current.value)\n  }\n  ```\n\n## 十四、组件通讯\n\n#### 1.组件的props\n\n- props的作用： 与vue的props类似，父组件向子组件传递数据，子组件用来接收数据\n\n- 接收数据：函数组件直接用props，类组件用this.props（和作用域有关，类组件的props加在实例上，函数组件直接通过参数接收）\n\n```react\n   // 1.函数组件props\n  const Hello = props => {\n    return (\n      <h2>func props: { props.name }</h2>\n    )\n  }\n  // 2.类组件props\n  class Hello extends React.Component {\n    render() {\n      return (\n        <h2>class props: { this.props.name }</h2>\n      )\n    }\n  }\n  \n  ReactDOM.render(<Hello name=\"component props\" />, document.querySelector('#root'))\n  ```\n\n- 特点：\n\n  - 可以给组件穿任意类型的数据（数组、对象、jsx表达式、函数等）\n  - props只读属性，只能读取属性的值，无法修改对象\n  - ⚠️在constructor中使用props时，需要接收props并传递给super，否则无法在构造函数中获取到props\n\n#### 2.父组件传递数据给子组件\n\n```react\nclass Parent extends React.Component {\n  state = {\n    name: 'kobe'\n  }\n  render() {\n    return (\n      <div>\n        父组件\n        <Child name={ this.state.name }></Child>\n        </div>\n    )\n  }\n}\nclass Child extends React.Component {\n  render() {\n    return (\n      <div>父组件传递给子组件的数据: { this.props.name}</div>\n    )\n  }\n}\nReactDOM.render(\n  <Parent/>,\n  document.querySelector(\"#root\")\n);\n```\n\n#### 3.子组件传递数据给父组件\n\n思路：父组件提供回调函数，同时将回调通过props传递给子组件，子组件通过props接收回调，执行回调并将需要传递的数据作为回调的参数传递给父组件\n\n```react\nclass Father extends React.Component {\n  state = {\n    childMsg: ''\n  }\n  render() {\n\t\treturn (\n    \t<div>\n      \t<h2>子组件传递的数据: { this.state.childMsg }</h2>\n        <Child getMsg={ this.getChildMsg }></Child>\n      </div>\n    )\n  }\n\tgetChildMsg(childMsg) {\n\t\tthis.setState({\n      childMsg:  childMsg\n    })\n  }\n}\nclass Son extends React.Component {\n\tstate = {\n\t\tchildMsg: 'child'\n  }\n\trender() {\n\t\treturn (\n    \t<button onClick={ this.emitMsg }></button>\n    )\n  }\n\temitMsg = () => {\n\t\tthis.props.getMsg(this.state.childMsg)\n  }\n}\n```\n\n注意：此处在Child组件中，render函数的onClick上不能直接调用this.props.getMsg()，而要在抽离到实例方法中。原因：react会在props和state改变的时候调用render对DOM进行diff后更新渲染，如果在render中再次调用getMsg修改state，会陷入死循环并报错\n\n#### 4.兄弟组件通讯\n\n- 将共享状态提升到最近的公共的父组件中，又公告父组件管理这个状态\n\n- 父组件：提供共享状态、提供操作共享状态的方法\n\n- 子组件：通过props获取共享状态和操作共享状态\n\n```react\n  class Parent extends React.Component {\n    // 状态提升\n    state = {\n      count: 1\n    }\n    render() {\n      return (\n        <div>\n          <Child1 count={ this.state.count }></Child1>\n          <Child2 increment = { this.increment}></Child2>\n        </div>\n      )\n    }\n    // 提供修改状态的方法\n    increment = () => {\n      this.setState({\n        count: this.state.count + 1\n      })\n    }\n  }\n  \n  const Child1 = props => {\n    return (\n      <h2>计数器: { props.count }</h2>\n    )\n  }\n  \n  const Child2 = props => {\n    const increment = () => {\n      props.increment()\n    }\n    return (\n      <button onClick={ increment }>+1</button>\n    )\n  \n  }\n    ReactDOM.render(\n      <Parent/>,\n      document.querySelector(\"#root\")\n    )\n  ```\n\n\n#### 5.组件树传递数据\n\n- Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。\n\n- 使用 context, 我们可以避免通过中间元素传递 props：\n\n```react\n  // Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n  // 为当前的 theme 创建一个 context（“light”为默认值）。\n  const ThemeContext = React.createContext('light');\n  class App extends React.Component {\n    render() {\n      // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n      // 无论多深，任何组件都能读取这个值。\n      // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n      return (\n        <ThemeContext.Provider value=\"dark\">\n          <Toolbar />\n        </ThemeContext.Provider>\n      );\n    }\n  }\n  \n  // 中间的组件再也不必指明往下传递 theme 了。\n  function Toolbar() {\n    return (\n      <div>\n        <ThemedButton />\n      </div>\n    );\n  }\n  \n  class ThemedButton extends React.Component {\n    // 指定 contextType 读取当前的 theme context。\n    // React 会往上找到最近的 theme Provider，然后使用它的值。\n    // 在这个例子中，当前的 theme 值为 “dark”。\n    static contextType = ThemeContext;\n    render() {\n      return <Button theme={this.context} />;\n    }\n  }\n  ```\n\n- 使用方法：\n\n  - 1.React.createContext方法创建context\n\n  ```react\n    const MyContext = React.createContext(defaultValue)\n    // 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n    // 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。此默认值有助于在不使用 Provider 包装组件的情况下对组件进行测试。注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效\n    // or\n    const { Provider, Consumer } = React.creactContext()\n    ```\n\n  - 2.使用Context.Provider提供数据\n\n  ```react\n    <MyContext.Provider value={/* 某个值 */} />\n    // or\n    <Provider value={} />\n    // 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。\n    \n    // Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。\n    \n    // 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n    \n    \n    ```\n\n  - value提供为对象时注意事项：\n\n  - 因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染。举个例子，当每一次 Provider 重渲染时，以下的代码会重渲染所有下面的 consumers 组件，因为 `value` 属性总是被赋值为新的对象：\n\n  ```react\n    class App extends React.Component {\n      render() {\n        return (\n          <MyContext.Provider value={{something: 'something'}}>\n            <Toolbar />\n          </MyContext.Provider>\n        );\n      }\n    }\n    ```\n\n  - 为了防止这种情况，将 value 状态提升到父节点的 state 里：\n\n  ```react\n    class App extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          value: {something: 'something'},\n        };\n      }\n    \n      render() {\n        return (\n          <MyContext.Provider value={this.state.value}>\n            <Toolbar />\n          </MyContext.Provider>\n        );\n      }\n    }\n    ```\n\n  - 3.消费数据\n\n    - 方式1：Class.contextType\n\n    ```react\n       // 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。此属性能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\n      class MyClass extends React.Component {\n        static contextType = MyContext;\n        render() {\n          let value = this.context;\n          /* 基于这个值进行渲染工作 */\n        }\n      }\n      ```\n\n    - 方式2：Context.Consumer\n\n    ```react\n      // 一个 React 组件可以订阅 context 的变更，此组件可以让你在函数式组件中可以订阅 context。\n      \n      // 这种方法需要一个函数作为子元素（function as a child）。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n      <MyContext.Consumer>\n        {value => /* 基于 context 值进行渲染*/}\n      </MyContext.Consumer>\n      // or \n      <Consumer>\n      \t{value => /* 基于 context 值进行渲染*/}\n      </Consumer>\n      ```\n\n      \n\n","slug":"react","published":1,"date":"2021-08-25T01:38:07.000Z","updated":"2021-10-14T01:22:47.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq9v3pg000fgxuqccv0hwg8","content":"<h2 id=\"一、react的基本使用\"><a href=\"#一、react的基本使用\" class=\"headerlink\" title=\"一、react的基本使用\"></a>一、react的基本使用</h2><h4 id=\"1-react的安装：\"><a href=\"#1-react的安装：\" class=\"headerlink\" title=\"1.react的安装：\"></a>1.react的安装：</h4><p>安装命令： npm i react react-dom</p>\n<ul>\n<li>react包是核心，提供创建元素、组建等功能</li>\n<li>react-dom包提供DOM相关功能</li>\n</ul>\n<h4 id=\"2-react的使用\"><a href=\"#2-react的使用\" class=\"headerlink\" title=\"2.react的使用\"></a>2.react的使用</h4><ul>\n<li>引入react和react-dom</li>\n<li>创建react元素<ul>\n<li>const title = react.createElement(‘h1’, null, ‘hello react’)</li>\n<li>第一个参数：创建的元素名称</li>\n<li>第二个参数： 元素的属性</li>\n<li>第三个和以后的参数： 元素的子节点</li>\n</ul>\n</li>\n<li>渲染react元素到页面中<ul>\n<li>ReactDom.render(title, document.querySelector(‘#app’) )</li>\n<li>第一个参数：要渲染的元素</li>\n<li>第二个参数：DOM对象，用于指定渲染到页面中的位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、react脚手架的使用\"><a href=\"#二、react脚手架的使用\" class=\"headerlink\" title=\"二、react脚手架的使用\"></a>二、react脚手架的使用</h2><h4 id=\"1-使用react脚手架初始化项目\"><a href=\"#1-使用react脚手架初始化项目\" class=\"headerlink\" title=\"1.使用react脚手架初始化项目\"></a>1.使用react脚手架初始化项目</h4><ul>\n<li>命令：npx create-react-app my-app</li>\n</ul>\n<h4 id=\"2-npx命令介绍\"><a href=\"#2-npx命令介绍\" class=\"headerlink\" title=\"2.npx命令介绍\"></a>2.npx命令介绍</h4><p>目的：提升包内提供的命令行工具的使用体验。无需安装脚手架包，就可以直接使用这个包提供的命令</p>\n<h2 id=\"三、JSX语法的基本使用\"><a href=\"#三、JSX语法的基本使用\" class=\"headerlink\" title=\"三、JSX语法的基本使用\"></a>三、JSX语法的基本使用</h2><h4 id=\"1-使用步骤\"><a href=\"#1-使用步骤\" class=\"headerlink\" title=\"1.使用步骤\"></a>1.使用步骤</h4><ul>\n<li>使用JSX语法创建react元素</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const title &#x3D; &lt;h1&gt;hello JSX&lt;h1&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用ReactDOM.render()方法渲染元素到页面中</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">ReactDOM.render(title, document.querySelector(&#39;#root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-为什么脚手架中可以使用JSX语法\"><a href=\"#2-为什么脚手架中可以使用JSX语法\" class=\"headerlink\" title=\"2.为什么脚手架中可以使用JSX语法\"></a>2.为什么脚手架中可以使用JSX语法</h4><p>create-react-app脚手架中默认有@babel/preset-react，会对项目中的JSX语法进行编译</p>\n<h4 id=\"3-注意点\"><a href=\"#3-注意点\" class=\"headerlink\" title=\"3.注意点\"></a>3.注意点</h4><ul>\n<li>元素的属性名使用驼峰命名法</li>\n<li>特殊属性名： class -&gt; className, for -&gt; htmlFor, table index -&gt; tabIndex</li>\n<li>没有子节点的React元素可以用/&gt;结束</li>\n<li>推荐：使用小括号包裹JSX，从而避免js中的自动插入分号陷阱</li>\n</ul>\n<h2 id=\"四、JSX中使用javascript表达式\"><a href=\"#四、JSX中使用javascript表达式\" class=\"headerlink\" title=\"四、JSX中使用javascript表达式\"></a>四、JSX中使用javascript表达式</h2><ul>\n<li><p>数据存储在js中</p>\n</li>\n<li><p>语法： { javascript表达式 }</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const name &#x3D; &#39;jack&#39;\nconst div &#x3D; (\n\t&lt;div&gt;hello &#123;name&#125;&lt;&#x2F;div&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>注意点</p>\n<ul>\n<li>单大括号中可以使用任意的JavaScript表达式</li>\n<li>JSX自身也是JS表达式，可以在单大括号中使用</li>\n<li>js中的对象不是表达式，不能直接在单大括号中使用，一般只会出现在style属性中</li>\n<li>不能在{}中出现语句（如if/for语句等 ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、JSX的条件渲染\"><a href=\"#五、JSX的条件渲染\" class=\"headerlink\" title=\"五、JSX的条件渲染\"></a>五、JSX的条件渲染</h2><ul>\n<li><p>场景：loading效果</p>\n</li>\n<li><p>条件渲染：根据条件渲染特定的JSX结构</p>\n</li>\n<li><p>可以使用if/else或三元运算符或逻辑于运算符来实现</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const isLoading &#x3D; false\nconst loadData &#x3D; () &#x3D;&gt; &#123;\n  return isLoading ?  (&lt;div&gt;加载中...&lt;&#x2F;div&gt;) : (&lt;div&gt;加载完成&lt;&#x2F;div&gt;)\n&#125;\nconst title &#x3D; (\n  &lt;div&gt;&#123;loadData()&#125;&lt;&#x2F;div&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"六、JSX的列表渲染\"><a href=\"#六、JSX的列表渲染\" class=\"headerlink\" title=\"六、JSX的列表渲染\"></a>六、JSX的列表渲染</h2><ul>\n<li><p>如果要渲染一组数据，应该使用数组的map方法</p>\n</li>\n<li><p>渲染列表时应该添加key属性，key属性的值应该要保证唯一</p>\n</li>\n<li><p>尽量避免使用索引作为key</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const songs &#x3D; [\n  &#123;id: 1, name: &#39;痴心绝对&#39;&#125;,\n  &#123;id: 2, name: &#39;童话&#39;&#125;,\n  &#123;id: 3, name: &#39;演员&#39;&#125;,\n]\nconst title &#x3D; (\n  &lt;ul&gt;\n    &#123;songs.map(item &#x3D;&gt; &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;)&#125;\n  &lt;&#x2F;ul&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"七、JSX的样式处理\"><a href=\"#七、JSX的样式处理\" class=\"headerlink\" title=\"七、JSX的样式处理\"></a>七、JSX的样式处理</h2><ol>\n<li>行内样式</li>\n<li>类名</li>\n</ol>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">import &#39;.&#x2F;index.css&#39;\nconst name &#x3D; &#39;kobe&#39;\n\nconst title &#x3D; (\n  &lt;h1 className&#x3D;&quot;title&quot; style&#x3D;&#123;&#123;color: &#39;red&#39;, backgroundColor: &#39;blue&#39;&#125;&#125;&gt;\n    我是&#123;name&#125;\n  &lt;&#x2F;h1&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"八、react组件的两种创建方式\"><a href=\"#八、react组件的两种创建方式\" class=\"headerlink\" title=\"八、react组件的两种创建方式\"></a>八、react组件的两种创建方式</h2><h4 id=\"1-使用函数创建组件\"><a href=\"#1-使用函数创建组件\" class=\"headerlink\" title=\"1.使用函数创建组件\"></a>1.使用函数创建组件</h4><ul>\n<li><p>使用JS中的函数创建的组件叫做函数组件</p>\n</li>\n<li><p>函数组件必须有返回值</p>\n</li>\n<li><p>组件名称必须以大写字母开头，react据此区分组件和普通的react元素</p>\n</li>\n<li><p>使用函数名作为组件标签名</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">function Hello() &#123;\n\treturn(\n\t\t&lt;div&gt;这是我的第一个函数组件&lt;&#x2F;div&gt;\n\t)\n&#125;\nReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-使用类创建组件\"><a href=\"#2-使用类创建组件\" class=\"headerlink\" title=\"2.使用类创建组件\"></a>2.使用类创建组件</h4><ul>\n<li><p>类组件：使用ES6的class创建的组件</p>\n</li>\n<li><p>约定1：类名称必须以大写字母开头</p>\n</li>\n<li><p>约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法和属性</p>\n</li>\n<li><p>约定3：类组件必须提供render（）方法</p>\n</li>\n<li><p>约定4：render（）方法必须有返回值，表示该组件的结构</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\trender() &#123;\n\t\treturn &lt;div&gt;我是类组件&lt;div&gt;\n\t&#125;\n&#125;\nReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-抽离为独立的js模块\"><a href=\"#3-抽离为独立的js模块\" class=\"headerlink\" title=\"3.抽离为独立的js模块\"></a>3.抽离为独立的js模块</h4><ol>\n<li><p>创建Hello.js</p>\n</li>\n<li><p>在Hello.js中导入react</p>\n</li>\n<li><p>创建组件（函数或类组件）</p>\n</li>\n<li><p>在Hello.js中到处该组件</p>\n</li>\n<li><p>在index.js中导入Hello组件</p>\n</li>\n<li><p>渲染组件</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; Hello.js\nimport React from &#39;react&#39;\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return &lt;div&gt;我是Hello组件&lt;&#x2F;div&gt;\n  &#125;\n&#125;\n&#x2F;&#x2F; index.js\nimport Hello from &#39;.&#x2F;Hello&#39;\nReactDOM.render(&lt;Hello&#x2F;&gt;, root)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"九、react事件处理\"><a href=\"#九、react事件处理\" class=\"headerlink\" title=\"九、react事件处理\"></a>九、react事件处理</h2><ul>\n<li><p>react事件绑定语法与DOM事件语法相似</p>\n</li>\n<li><p>语法：on + 事件名称 = {事件处理程序}，比如： onClick = { () =&gt; {} }</p>\n</li>\n<li><p>注意：react事件才用驼峰命名法</p>\n</li>\n<li><p>类组件中绑定事件</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  handleClick() &#123;\n    console.log(&#39;click&#39;)\n  &#125;\n\trender() &#123;\n    return &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;点击&lt;&#x2F;button&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>函数组件中绑定事件</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">function App () &#123;\n  handleClick() &#123;\n    console.log(&#39;click&#39;)\n  &#125;\n  return &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;点击&lt;&#x2F;button&gt;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>事件对象</p>\n<ul>\n<li><p>可以通过事件处理程序的参数获取到事件对象</p>\n</li>\n<li><p>react中的事件对象叫做：合成事件（对象）</p>\n</li>\n<li><p>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n  handleClick(e) &#123;\n    e.preventDefault()\n  &#125;\n  render() &#123;\n    return &lt;a onClick&#x3D;&#123;this.handleClick&#125; href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"十、有状态组件和无状态组件\"><a href=\"#十、有状态组件和无状态组件\" class=\"headerlink\" title=\"十、有状态组件和无状态组件\"></a>十、有状态组件和无状态组件</h2><ul>\n<li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li>\n<li>状态（state）即数据</li>\n<li>函数组件没有自己的状态，只负责数据展示（静）</li>\n<li>类组件有自己的状态，负责更新UI，让页面动起来</li>\n</ul>\n<h2 id=\"十一、组件中的state和setState\"><a href=\"#十一、组件中的state和setState\" class=\"headerlink\" title=\"十一、组件中的state和setState\"></a>十一、组件中的state和setState</h2><h4 id=\"1-state的基本使用\"><a href=\"#1-state的基本使用\" class=\"headerlink\" title=\"1.state的基本使用\"></a>1.state的基本使用</h4><ul>\n<li><p>状态即数据</p>\n</li>\n<li><p>状态是私有的，只能在组件内部使用</p>\n</li>\n<li><p>通过this.state来获取状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n  &#x2F;&#x2F; constructor() &#123;\n  &#x2F;&#x2F;  super(); &#x2F;&#x2F;\n  &#x2F;&#x2F;  this.state &#x3D; &#123;\n  &#x2F;&#x2F;    count: 1\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; 简写\n  state &#x3D; &#123;\n\t\tcount: 1\n  &#125;\n  render() &#123;\n    return &lt;h2&gt;计数器： &#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-setState-修改状态\"><a href=\"#2-setState-修改状态\" class=\"headerlink\" title=\"2.setState()修改状态\"></a>2.setState()修改状态</h4><ul>\n<li><p>状态是可变的</p>\n</li>\n<li><p>语法：this.setState({要修改的数据})</p>\n</li>\n<li><p>注意：不要直接修改state的值</p>\n</li>\n<li><p>setState()作用：修改state、更新UI</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">this.setState(&#123;\n  count: this.state.count + 1\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"十二、事件绑定this指向\"><a href=\"#十二、事件绑定this指向\" class=\"headerlink\" title=\"十二、事件绑定this指向\"></a>十二、事件绑定this指向</h2><ol>\n<li>利用箭头函数改变this指向</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tstate &#x3D; &#123;\n    count: 1\n  &#125;\n\trender() &#123;\n    return (\n    \t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick()&#125;&gt;+1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n\thandleClick() &#123;\n    this.setState(&#123;\n      count: this.state.count + 1\n    &#125;)\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>利用bind改变this指向</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tconstructor() &#123;\n    this.state &#x3D; &#123;\n\t\t\tcount: 1\n    &#125;\n    this.handleClick &#x3D; this.handleClick.bind(this)\n  &#125;\n\trender() &#123;\n\t\treturn (\n\t\t\t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n\t\t)\n\t&#125;\n\thandleClick() &#123;\n\t\tthis.setState(&#123;\n      count: this.state.count - 1\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>class的箭头函数实例方法（推荐方式，脚手架配置的babel对这种语法进行了转换）</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tconstructor() &#123;\n    this.state &#x3D; &#123;\n\t\t\tcount: 1\n    &#125;\n    this.handleClick &#x3D; this.handleClick.bind(this)\n  &#125;\n\trender() &#123;\n\t\treturn (\n\t\t\t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n\t\t)\n\t&#125;\n\thandleClick &#x3D; () &#x3D;&gt; &#123;\n\t\tthis.setState(&#123;\n      count: this.state.count - 1\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十三、表单处理\"><a href=\"#十三、表单处理\" class=\"headerlink\" title=\"十三、表单处理\"></a>十三、表单处理</h2><h4 id=\"1-受控组件（常用）\"><a href=\"#1-受控组件（常用）\" class=\"headerlink\" title=\"1.受控组件（常用）\"></a>1.受控组件（常用）</h4><p>其值收到react控制的表单元素</p>\n<p>实现一个受控组件（类似于vue中的v-model）：</p>\n<p>1.表单value绑定state中的状态</p>\n<p>2.监听表单的change事件，修改state中的状态</p>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tstate &#x3D; &#123;\n    text: &#39;&#39;\n  &#125;\n\trender() &#123;\n    return &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.text&#125; onClick&#x3D;&#123; this.inputChange &#125;&gt;&lt;&#x2F;input&gt;\n  &#125;\n\tinputChange &#x3D; e &#x3D;&gt; &#123;\n    this.setState(&#123;\n      text: e.target.value\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-非受控组件（不常用）\"><a href=\"#2-非受控组件（不常用）\" class=\"headerlink\" title=\"2.非受控组件（不常用）\"></a>2.非受控组件（不常用）</h4><ul>\n<li>通过React.createRef()方法创建ref对象</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">constructor() &#123;\n  super()\n  this.txtRef &#x3D; React.createRef()\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>表单使用ref对象</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">render() &#123;\n  return (\n  \t&lt;div&gt;\n    \t&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123; this.txtRef &#125;&gt;&lt;&#x2F;input&gt;\n      &lt;button onClick&#x3D;&#123; this.getValue &#125;&gt;获取value&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>通过ref对象获取表单的值</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">getValue &#x3D; () &#x3D;&gt; &#123;\n\tconsole.log(this.txtRef.current.value)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十四、组件通讯\"><a href=\"#十四、组件通讯\" class=\"headerlink\" title=\"十四、组件通讯\"></a>十四、组件通讯</h2><h4 id=\"1-组件的props\"><a href=\"#1-组件的props\" class=\"headerlink\" title=\"1.组件的props\"></a>1.组件的props</h4><ul>\n<li><p>props的作用： 与vue的props类似，父组件向子组件传递数据，子组件用来接收数据</p>\n</li>\n<li><p>接收数据：函数组件直接用props，类组件用this.props（和作用域有关，类组件的props加在实例上，函数组件直接通过参数接收）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\"> &#x2F;&#x2F; 1.函数组件props\nconst Hello &#x3D; props &#x3D;&gt; &#123;\n  return (\n    &lt;h2&gt;func props: &#123; props.name &#125;&lt;&#x2F;h2&gt;\n  )\n&#125;\n&#x2F;&#x2F; 2.类组件props\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;h2&gt;class props: &#123; this.props.name &#125;&lt;&#x2F;h2&gt;\n    )\n  &#125;\n&#125;\n\nReactDOM.render(&lt;Hello name&#x3D;&quot;component props&quot; &#x2F;&gt;, document.querySelector(&#39;#root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>特点：</p>\n<ul>\n<li>可以给组件穿任意类型的数据（数组、对象、jsx表达式、函数等）</li>\n<li>props只读属性，只能读取属性的值，无法修改对象</li>\n<li>⚠️在constructor中使用props时，需要接收props并传递给super，否则无法在构造函数中获取到props</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-父组件传递数据给子组件\"><a href=\"#2-父组件传递数据给子组件\" class=\"headerlink\" title=\"2.父组件传递数据给子组件\"></a>2.父组件传递数据给子组件</h4><pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Parent extends React.Component &#123;\n  state &#x3D; &#123;\n    name: &#39;kobe&#39;\n  &#125;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        父组件\n        &lt;Child name&#x3D;&#123; this.state.name &#125;&gt;&lt;&#x2F;Child&gt;\n        &lt;&#x2F;div&gt;\n    )\n  &#125;\n&#125;\nclass Child extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;父组件传递给子组件的数据: &#123; this.props.name&#125;&lt;&#x2F;div&gt;\n    )\n  &#125;\n&#125;\nReactDOM.render(\n  &lt;Parent&#x2F;&gt;,\n  document.querySelector(&quot;#root&quot;)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-子组件传递数据给父组件\"><a href=\"#3-子组件传递数据给父组件\" class=\"headerlink\" title=\"3.子组件传递数据给父组件\"></a>3.子组件传递数据给父组件</h4><p>思路：父组件提供回调函数，同时将回调通过props传递给子组件，子组件通过props接收回调，执行回调并将需要传递的数据作为回调的参数传递给父组件</p>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Father extends React.Component &#123;\n  state &#x3D; &#123;\n    childMsg: &#39;&#39;\n  &#125;\n  render() &#123;\n\t\treturn (\n    \t&lt;div&gt;\n      \t&lt;h2&gt;子组件传递的数据: &#123; this.state.childMsg &#125;&lt;&#x2F;h2&gt;\n        &lt;Child getMsg&#x3D;&#123; this.getChildMsg &#125;&gt;&lt;&#x2F;Child&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n\tgetChildMsg(childMsg) &#123;\n\t\tthis.setState(&#123;\n      childMsg:  childMsg\n    &#125;)\n  &#125;\n&#125;\nclass Son extends React.Component &#123;\n\tstate &#x3D; &#123;\n\t\tchildMsg: &#39;child&#39;\n  &#125;\n\trender() &#123;\n\t\treturn (\n    \t&lt;button onClick&#x3D;&#123; this.emitMsg &#125;&gt;&lt;&#x2F;button&gt;\n    )\n  &#125;\n\temitMsg &#x3D; () &#x3D;&gt; &#123;\n\t\tthis.props.getMsg(this.state.childMsg)\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：此处在Child组件中，render函数的onClick上不能直接调用this.props.getMsg()，而要在抽离到实例方法中。原因：react会在props和state改变的时候调用render对DOM进行diff后更新渲染，如果在render中再次调用getMsg修改state，会陷入死循环并报错</p>\n<h4 id=\"4-兄弟组件通讯\"><a href=\"#4-兄弟组件通讯\" class=\"headerlink\" title=\"4.兄弟组件通讯\"></a>4.兄弟组件通讯</h4><ul>\n<li><p>将共享状态提升到最近的公共的父组件中，又公告父组件管理这个状态</p>\n</li>\n<li><p>父组件：提供共享状态、提供操作共享状态的方法</p>\n</li>\n<li><p>子组件：通过props获取共享状态和操作共享状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Parent extends React.Component &#123;\n  &#x2F;&#x2F; 状态提升\n  state &#x3D; &#123;\n    count: 1\n  &#125;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;Child1 count&#x3D;&#123; this.state.count &#125;&gt;&lt;&#x2F;Child1&gt;\n        &lt;Child2 increment &#x3D; &#123; this.increment&#125;&gt;&lt;&#x2F;Child2&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n  &#x2F;&#x2F; 提供修改状态的方法\n  increment &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      count: this.state.count + 1\n    &#125;)\n  &#125;\n&#125;\n\nconst Child1 &#x3D; props &#x3D;&gt; &#123;\n  return (\n    &lt;h2&gt;计数器: &#123; props.count &#125;&lt;&#x2F;h2&gt;\n  )\n&#125;\n\nconst Child2 &#x3D; props &#x3D;&gt; &#123;\n  const increment &#x3D; () &#x3D;&gt; &#123;\n    props.increment()\n  &#125;\n  return (\n    &lt;button onClick&#x3D;&#123; increment &#125;&gt;+1&lt;&#x2F;button&gt;\n  )\n\n&#125;\n  ReactDOM.render(\n    &lt;Parent&#x2F;&gt;,\n    document.querySelector(&quot;#root&quot;)\n  )<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"5-组件树传递数据\"><a href=\"#5-组件树传递数据\" class=\"headerlink\" title=\"5.组件树传递数据\"></a>5.组件树传递数据</h4><ul>\n<li><p>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。</p>\n</li>\n<li><p>使用 context, 我们可以避免通过中间元素传递 props：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n&#x2F;&#x2F; 为当前的 theme 创建一个 context（“light”为默认值）。\nconst ThemeContext &#x3D; React.createContext(&#39;light&#39;);\nclass App extends React.Component &#123;\n  render() &#123;\n    &#x2F;&#x2F; 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n    &#x2F;&#x2F; 无论多深，任何组件都能读取这个值。\n    &#x2F;&#x2F; 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n    return (\n      &lt;ThemeContext.Provider value&#x3D;&quot;dark&quot;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;ThemeContext.Provider&gt;\n    );\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() &#123;\n  return (\n    &lt;div&gt;\n      &lt;ThemedButton &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;\n\nclass ThemedButton extends React.Component &#123;\n  &#x2F;&#x2F; 指定 contextType 读取当前的 theme context。\n  &#x2F;&#x2F; React 会往上找到最近的 theme Provider，然后使用它的值。\n  &#x2F;&#x2F; 在这个例子中，当前的 theme 值为 “dark”。\n  static contextType &#x3D; ThemeContext;\n  render() &#123;\n    return &lt;Button theme&#x3D;&#123;this.context&#125; &#x2F;&gt;;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>使用方法：</p>\n<ul>\n<li>1.React.createContext方法创建context</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const MyContext &#x3D; React.createContext(defaultValue)\n&#x2F;&#x2F; 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n&#x2F;&#x2F; 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。此默认值有助于在不使用 Provider 包装组件的情况下对组件进行测试。注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效\n&#x2F;&#x2F; or\nconst &#123; Provider, Consumer &#125; &#x3D; React.creactContext()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>2.使用Context.Provider提供数据</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&lt;MyContext.Provider value&#x3D;&#123;&#x2F;* 某个值 *&#x2F;&#125; &#x2F;&gt;\n&#x2F;&#x2F; or\n&lt;Provider value&#x3D;&#123;&#125; &#x2F;&gt;\n&#x2F;&#x2F; 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。\n\n&#x2F;&#x2F; Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。\n\n&#x2F;&#x2F; 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>value提供为对象时注意事项：</p>\n</li>\n<li><p>因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染。举个例子，当每一次 Provider 重渲染时，以下的代码会重渲染所有下面的 consumers 组件，因为 <code>value</code> 属性总是被赋值为新的对象：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;MyContext.Provider value&#x3D;&#123;&#123;something: &#39;something&#39;&#125;&#125;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;MyContext.Provider&gt;\n    );\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>为了防止这种情况，将 value 状态提升到父节点的 state 里：</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123;\n      value: &#123;something: &#39;something&#39;&#125;,\n    &#125;;\n  &#125;\n\n  render() &#123;\n    return (\n      &lt;MyContext.Provider value&#x3D;&#123;this.state.value&#125;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;MyContext.Provider&gt;\n    );\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>3.消费数据</p>\n<ul>\n<li>方式1：Class.contextType</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\"> &#x2F;&#x2F; 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。此属性能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\nclass MyClass extends React.Component &#123;\n  static contextType &#x3D; MyContext;\n  render() &#123;\n    let value &#x3D; this.context;\n    &#x2F;* 基于这个值进行渲染工作 *&#x2F;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>方式2：Context.Consumer</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; 一个 React 组件可以订阅 context 的变更，此组件可以让你在函数式组件中可以订阅 context。\n\n&#x2F;&#x2F; 这种方法需要一个函数作为子元素（function as a child）。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n&lt;MyContext.Consumer&gt;\n  &#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;\n&lt;&#x2F;MyContext.Consumer&gt;\n&#x2F;&#x2F; or \n&lt;Consumer&gt;\n\t&#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;\n&lt;&#x2F;Consumer&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、react的基本使用\"><a href=\"#一、react的基本使用\" class=\"headerlink\" title=\"一、react的基本使用\"></a>一、react的基本使用</h2><h4 id=\"1-react的安装：\"><a href=\"#1-react的安装：\" class=\"headerlink\" title=\"1.react的安装：\"></a>1.react的安装：</h4><p>安装命令： npm i react react-dom</p>\n<ul>\n<li>react包是核心，提供创建元素、组建等功能</li>\n<li>react-dom包提供DOM相关功能</li>\n</ul>\n<h4 id=\"2-react的使用\"><a href=\"#2-react的使用\" class=\"headerlink\" title=\"2.react的使用\"></a>2.react的使用</h4><ul>\n<li>引入react和react-dom</li>\n<li>创建react元素<ul>\n<li>const title = react.createElement(‘h1’, null, ‘hello react’)</li>\n<li>第一个参数：创建的元素名称</li>\n<li>第二个参数： 元素的属性</li>\n<li>第三个和以后的参数： 元素的子节点</li>\n</ul>\n</li>\n<li>渲染react元素到页面中<ul>\n<li>ReactDom.render(title, document.querySelector(‘#app’) )</li>\n<li>第一个参数：要渲染的元素</li>\n<li>第二个参数：DOM对象，用于指定渲染到页面中的位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、react脚手架的使用\"><a href=\"#二、react脚手架的使用\" class=\"headerlink\" title=\"二、react脚手架的使用\"></a>二、react脚手架的使用</h2><h4 id=\"1-使用react脚手架初始化项目\"><a href=\"#1-使用react脚手架初始化项目\" class=\"headerlink\" title=\"1.使用react脚手架初始化项目\"></a>1.使用react脚手架初始化项目</h4><ul>\n<li>命令：npx create-react-app my-app</li>\n</ul>\n<h4 id=\"2-npx命令介绍\"><a href=\"#2-npx命令介绍\" class=\"headerlink\" title=\"2.npx命令介绍\"></a>2.npx命令介绍</h4><p>目的：提升包内提供的命令行工具的使用体验。无需安装脚手架包，就可以直接使用这个包提供的命令</p>\n<h2 id=\"三、JSX语法的基本使用\"><a href=\"#三、JSX语法的基本使用\" class=\"headerlink\" title=\"三、JSX语法的基本使用\"></a>三、JSX语法的基本使用</h2><h4 id=\"1-使用步骤\"><a href=\"#1-使用步骤\" class=\"headerlink\" title=\"1.使用步骤\"></a>1.使用步骤</h4><ul>\n<li>使用JSX语法创建react元素</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const title &#x3D; &lt;h1&gt;hello JSX&lt;h1&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>使用ReactDOM.render()方法渲染元素到页面中</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">ReactDOM.render(title, document.querySelector(&#39;#root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-为什么脚手架中可以使用JSX语法\"><a href=\"#2-为什么脚手架中可以使用JSX语法\" class=\"headerlink\" title=\"2.为什么脚手架中可以使用JSX语法\"></a>2.为什么脚手架中可以使用JSX语法</h4><p>create-react-app脚手架中默认有@babel/preset-react，会对项目中的JSX语法进行编译</p>\n<h4 id=\"3-注意点\"><a href=\"#3-注意点\" class=\"headerlink\" title=\"3.注意点\"></a>3.注意点</h4><ul>\n<li>元素的属性名使用驼峰命名法</li>\n<li>特殊属性名： class -&gt; className, for -&gt; htmlFor, table index -&gt; tabIndex</li>\n<li>没有子节点的React元素可以用/&gt;结束</li>\n<li>推荐：使用小括号包裹JSX，从而避免js中的自动插入分号陷阱</li>\n</ul>\n<h2 id=\"四、JSX中使用javascript表达式\"><a href=\"#四、JSX中使用javascript表达式\" class=\"headerlink\" title=\"四、JSX中使用javascript表达式\"></a>四、JSX中使用javascript表达式</h2><ul>\n<li><p>数据存储在js中</p>\n</li>\n<li><p>语法： { javascript表达式 }</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const name &#x3D; &#39;jack&#39;\nconst div &#x3D; (\n\t&lt;div&gt;hello &#123;name&#125;&lt;&#x2F;div&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>注意点</p>\n<ul>\n<li>单大括号中可以使用任意的JavaScript表达式</li>\n<li>JSX自身也是JS表达式，可以在单大括号中使用</li>\n<li>js中的对象不是表达式，不能直接在单大括号中使用，一般只会出现在style属性中</li>\n<li>不能在{}中出现语句（如if/for语句等 ）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"五、JSX的条件渲染\"><a href=\"#五、JSX的条件渲染\" class=\"headerlink\" title=\"五、JSX的条件渲染\"></a>五、JSX的条件渲染</h2><ul>\n<li><p>场景：loading效果</p>\n</li>\n<li><p>条件渲染：根据条件渲染特定的JSX结构</p>\n</li>\n<li><p>可以使用if/else或三元运算符或逻辑于运算符来实现</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const isLoading &#x3D; false\nconst loadData &#x3D; () &#x3D;&gt; &#123;\n  return isLoading ?  (&lt;div&gt;加载中...&lt;&#x2F;div&gt;) : (&lt;div&gt;加载完成&lt;&#x2F;div&gt;)\n&#125;\nconst title &#x3D; (\n  &lt;div&gt;&#123;loadData()&#125;&lt;&#x2F;div&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"六、JSX的列表渲染\"><a href=\"#六、JSX的列表渲染\" class=\"headerlink\" title=\"六、JSX的列表渲染\"></a>六、JSX的列表渲染</h2><ul>\n<li><p>如果要渲染一组数据，应该使用数组的map方法</p>\n</li>\n<li><p>渲染列表时应该添加key属性，key属性的值应该要保证唯一</p>\n</li>\n<li><p>尽量避免使用索引作为key</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const songs &#x3D; [\n  &#123;id: 1, name: &#39;痴心绝对&#39;&#125;,\n  &#123;id: 2, name: &#39;童话&#39;&#125;,\n  &#123;id: 3, name: &#39;演员&#39;&#125;,\n]\nconst title &#x3D; (\n  &lt;ul&gt;\n    &#123;songs.map(item &#x3D;&gt; &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;)&#125;\n  &lt;&#x2F;ul&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"七、JSX的样式处理\"><a href=\"#七、JSX的样式处理\" class=\"headerlink\" title=\"七、JSX的样式处理\"></a>七、JSX的样式处理</h2><ol>\n<li>行内样式</li>\n<li>类名</li>\n</ol>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">import &#39;.&#x2F;index.css&#39;\nconst name &#x3D; &#39;kobe&#39;\n\nconst title &#x3D; (\n  &lt;h1 className&#x3D;&quot;title&quot; style&#x3D;&#123;&#123;color: &#39;red&#39;, backgroundColor: &#39;blue&#39;&#125;&#125;&gt;\n    我是&#123;name&#125;\n  &lt;&#x2F;h1&gt;\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"八、react组件的两种创建方式\"><a href=\"#八、react组件的两种创建方式\" class=\"headerlink\" title=\"八、react组件的两种创建方式\"></a>八、react组件的两种创建方式</h2><h4 id=\"1-使用函数创建组件\"><a href=\"#1-使用函数创建组件\" class=\"headerlink\" title=\"1.使用函数创建组件\"></a>1.使用函数创建组件</h4><ul>\n<li><p>使用JS中的函数创建的组件叫做函数组件</p>\n</li>\n<li><p>函数组件必须有返回值</p>\n</li>\n<li><p>组件名称必须以大写字母开头，react据此区分组件和普通的react元素</p>\n</li>\n<li><p>使用函数名作为组件标签名</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">function Hello() &#123;\n\treturn(\n\t\t&lt;div&gt;这是我的第一个函数组件&lt;&#x2F;div&gt;\n\t)\n&#125;\nReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-使用类创建组件\"><a href=\"#2-使用类创建组件\" class=\"headerlink\" title=\"2.使用类创建组件\"></a>2.使用类创建组件</h4><ul>\n<li><p>类组件：使用ES6的class创建的组件</p>\n</li>\n<li><p>约定1：类名称必须以大写字母开头</p>\n</li>\n<li><p>约定2：类组件应该继承React.Component父类，从而可以使用父类中提供的方法和属性</p>\n</li>\n<li><p>约定3：类组件必须提供render（）方法</p>\n</li>\n<li><p>约定4：render（）方法必须有返回值，表示该组件的结构</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\trender() &#123;\n\t\treturn &lt;div&gt;我是类组件&lt;div&gt;\n\t&#125;\n&#125;\nReactDOM.render(&lt;Hello&#x2F;&gt;, document.getElementById(&#39;root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-抽离为独立的js模块\"><a href=\"#3-抽离为独立的js模块\" class=\"headerlink\" title=\"3.抽离为独立的js模块\"></a>3.抽离为独立的js模块</h4><ol>\n<li><p>创建Hello.js</p>\n</li>\n<li><p>在Hello.js中导入react</p>\n</li>\n<li><p>创建组件（函数或类组件）</p>\n</li>\n<li><p>在Hello.js中到处该组件</p>\n</li>\n<li><p>在index.js中导入Hello组件</p>\n</li>\n<li><p>渲染组件</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; Hello.js\nimport React from &#39;react&#39;\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return &lt;div&gt;我是Hello组件&lt;&#x2F;div&gt;\n  &#125;\n&#125;\n&#x2F;&#x2F; index.js\nimport Hello from &#39;.&#x2F;Hello&#39;\nReactDOM.render(&lt;Hello&#x2F;&gt;, root)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"九、react事件处理\"><a href=\"#九、react事件处理\" class=\"headerlink\" title=\"九、react事件处理\"></a>九、react事件处理</h2><ul>\n<li><p>react事件绑定语法与DOM事件语法相似</p>\n</li>\n<li><p>语法：on + 事件名称 = {事件处理程序}，比如： onClick = { () =&gt; {} }</p>\n</li>\n<li><p>注意：react事件才用驼峰命名法</p>\n</li>\n<li><p>类组件中绑定事件</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  handleClick() &#123;\n    console.log(&#39;click&#39;)\n  &#125;\n\trender() &#123;\n    return &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;点击&lt;&#x2F;button&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>函数组件中绑定事件</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">function App () &#123;\n  handleClick() &#123;\n    console.log(&#39;click&#39;)\n  &#125;\n  return &lt;button onClick&#x3D;&#123;handleClick&#125;&gt;点击&lt;&#x2F;button&gt;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>事件对象</p>\n<ul>\n<li><p>可以通过事件处理程序的参数获取到事件对象</p>\n</li>\n<li><p>react中的事件对象叫做：合成事件（对象）</p>\n</li>\n<li><p>合成事件：兼容所有浏览器，无需担心跨浏览器兼容性问题</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n  handleClick(e) &#123;\n    e.preventDefault()\n  &#125;\n  render() &#123;\n    return &lt;a onClick&#x3D;&#123;this.handleClick&#125; href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"十、有状态组件和无状态组件\"><a href=\"#十、有状态组件和无状态组件\" class=\"headerlink\" title=\"十、有状态组件和无状态组件\"></a>十、有状态组件和无状态组件</h2><ul>\n<li>函数组件又叫做无状态组件，类组件又叫做有状态组件</li>\n<li>状态（state）即数据</li>\n<li>函数组件没有自己的状态，只负责数据展示（静）</li>\n<li>类组件有自己的状态，负责更新UI，让页面动起来</li>\n</ul>\n<h2 id=\"十一、组件中的state和setState\"><a href=\"#十一、组件中的state和setState\" class=\"headerlink\" title=\"十一、组件中的state和setState\"></a>十一、组件中的state和setState</h2><h4 id=\"1-state的基本使用\"><a href=\"#1-state的基本使用\" class=\"headerlink\" title=\"1.state的基本使用\"></a>1.state的基本使用</h4><ul>\n<li><p>状态即数据</p>\n</li>\n<li><p>状态是私有的，只能在组件内部使用</p>\n</li>\n<li><p>通过this.state来获取状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n  &#x2F;&#x2F; constructor() &#123;\n  &#x2F;&#x2F;  super(); &#x2F;&#x2F;\n  &#x2F;&#x2F;  this.state &#x3D; &#123;\n  &#x2F;&#x2F;    count: 1\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; &#125;\n  &#x2F;&#x2F; 简写\n  state &#x3D; &#123;\n\t\tcount: 1\n  &#125;\n  render() &#123;\n    return &lt;h2&gt;计数器： &#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-setState-修改状态\"><a href=\"#2-setState-修改状态\" class=\"headerlink\" title=\"2.setState()修改状态\"></a>2.setState()修改状态</h4><ul>\n<li><p>状态是可变的</p>\n</li>\n<li><p>语法：this.setState({要修改的数据})</p>\n</li>\n<li><p>注意：不要直接修改state的值</p>\n</li>\n<li><p>setState()作用：修改state、更新UI</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">this.setState(&#123;\n  count: this.state.count + 1\n&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"十二、事件绑定this指向\"><a href=\"#十二、事件绑定this指向\" class=\"headerlink\" title=\"十二、事件绑定this指向\"></a>十二、事件绑定this指向</h2><ol>\n<li>利用箭头函数改变this指向</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tstate &#x3D; &#123;\n    count: 1\n  &#125;\n\trender() &#123;\n    return (\n    \t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;() &#x3D;&gt; this.handleClick()&#125;&gt;+1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n\thandleClick() &#123;\n    this.setState(&#123;\n      count: this.state.count + 1\n    &#125;)\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>利用bind改变this指向</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tconstructor() &#123;\n    this.state &#x3D; &#123;\n\t\t\tcount: 1\n    &#125;\n    this.handleClick &#x3D; this.handleClick.bind(this)\n  &#125;\n\trender() &#123;\n\t\treturn (\n\t\t\t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n\t\t)\n\t&#125;\n\thandleClick() &#123;\n\t\tthis.setState(&#123;\n      count: this.state.count - 1\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>class的箭头函数实例方法（推荐方式，脚手架配置的babel对这种语法进行了转换）</li>\n</ol>\n  <pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tconstructor() &#123;\n    this.state &#x3D; &#123;\n\t\t\tcount: 1\n    &#125;\n    this.handleClick &#x3D; this.handleClick.bind(this)\n  &#125;\n\trender() &#123;\n\t\treturn (\n\t\t\t&lt;div&gt;\n      \t&lt;h2&gt;计数器：&#123;this.state.count&#125;&lt;&#x2F;h2&gt;\n        &lt;button onClick&#x3D;&#123;this.handleClick&#125;&gt;-1&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n\t\t)\n\t&#125;\n\thandleClick &#x3D; () &#x3D;&gt; &#123;\n\t\tthis.setState(&#123;\n      count: this.state.count - 1\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十三、表单处理\"><a href=\"#十三、表单处理\" class=\"headerlink\" title=\"十三、表单处理\"></a>十三、表单处理</h2><h4 id=\"1-受控组件（常用）\"><a href=\"#1-受控组件（常用）\" class=\"headerlink\" title=\"1.受控组件（常用）\"></a>1.受控组件（常用）</h4><p>其值收到react控制的表单元素</p>\n<p>实现一个受控组件（类似于vue中的v-model）：</p>\n<p>1.表单value绑定state中的状态</p>\n<p>2.监听表单的change事件，修改state中的状态</p>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Hello extends React.Component &#123;\n\tstate &#x3D; &#123;\n    text: &#39;&#39;\n  &#125;\n\trender() &#123;\n    return &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;this.state.text&#125; onClick&#x3D;&#123; this.inputChange &#125;&gt;&lt;&#x2F;input&gt;\n  &#125;\n\tinputChange &#x3D; e &#x3D;&gt; &#123;\n    this.setState(&#123;\n      text: e.target.value\n    &#125;)\n\t&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-非受控组件（不常用）\"><a href=\"#2-非受控组件（不常用）\" class=\"headerlink\" title=\"2.非受控组件（不常用）\"></a>2.非受控组件（不常用）</h4><ul>\n<li>通过React.createRef()方法创建ref对象</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">constructor() &#123;\n  super()\n  this.txtRef &#x3D; React.createRef()\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>表单使用ref对象</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">render() &#123;\n  return (\n  \t&lt;div&gt;\n    \t&lt;input type&#x3D;&quot;text&quot; ref&#x3D;&#123; this.txtRef &#125;&gt;&lt;&#x2F;input&gt;\n      &lt;button onClick&#x3D;&#123; this.getValue &#125;&gt;获取value&lt;&#x2F;button&gt;\n    &lt;&#x2F;div&gt;\n  )\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>通过ref对象获取表单的值</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">getValue &#x3D; () &#x3D;&gt; &#123;\n\tconsole.log(this.txtRef.current.value)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"十四、组件通讯\"><a href=\"#十四、组件通讯\" class=\"headerlink\" title=\"十四、组件通讯\"></a>十四、组件通讯</h2><h4 id=\"1-组件的props\"><a href=\"#1-组件的props\" class=\"headerlink\" title=\"1.组件的props\"></a>1.组件的props</h4><ul>\n<li><p>props的作用： 与vue的props类似，父组件向子组件传递数据，子组件用来接收数据</p>\n</li>\n<li><p>接收数据：函数组件直接用props，类组件用this.props（和作用域有关，类组件的props加在实例上，函数组件直接通过参数接收）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\"> &#x2F;&#x2F; 1.函数组件props\nconst Hello &#x3D; props &#x3D;&gt; &#123;\n  return (\n    &lt;h2&gt;func props: &#123; props.name &#125;&lt;&#x2F;h2&gt;\n  )\n&#125;\n&#x2F;&#x2F; 2.类组件props\nclass Hello extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;h2&gt;class props: &#123; this.props.name &#125;&lt;&#x2F;h2&gt;\n    )\n  &#125;\n&#125;\n\nReactDOM.render(&lt;Hello name&#x3D;&quot;component props&quot; &#x2F;&gt;, document.querySelector(&#39;#root&#39;))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>特点：</p>\n<ul>\n<li>可以给组件穿任意类型的数据（数组、对象、jsx表达式、函数等）</li>\n<li>props只读属性，只能读取属性的值，无法修改对象</li>\n<li>⚠️在constructor中使用props时，需要接收props并传递给super，否则无法在构造函数中获取到props</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-父组件传递数据给子组件\"><a href=\"#2-父组件传递数据给子组件\" class=\"headerlink\" title=\"2.父组件传递数据给子组件\"></a>2.父组件传递数据给子组件</h4><pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Parent extends React.Component &#123;\n  state &#x3D; &#123;\n    name: &#39;kobe&#39;\n  &#125;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        父组件\n        &lt;Child name&#x3D;&#123; this.state.name &#125;&gt;&lt;&#x2F;Child&gt;\n        &lt;&#x2F;div&gt;\n    )\n  &#125;\n&#125;\nclass Child extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;父组件传递给子组件的数据: &#123; this.props.name&#125;&lt;&#x2F;div&gt;\n    )\n  &#125;\n&#125;\nReactDOM.render(\n  &lt;Parent&#x2F;&gt;,\n  document.querySelector(&quot;#root&quot;)\n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-子组件传递数据给父组件\"><a href=\"#3-子组件传递数据给父组件\" class=\"headerlink\" title=\"3.子组件传递数据给父组件\"></a>3.子组件传递数据给父组件</h4><p>思路：父组件提供回调函数，同时将回调通过props传递给子组件，子组件通过props接收回调，执行回调并将需要传递的数据作为回调的参数传递给父组件</p>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Father extends React.Component &#123;\n  state &#x3D; &#123;\n    childMsg: &#39;&#39;\n  &#125;\n  render() &#123;\n\t\treturn (\n    \t&lt;div&gt;\n      \t&lt;h2&gt;子组件传递的数据: &#123; this.state.childMsg &#125;&lt;&#x2F;h2&gt;\n        &lt;Child getMsg&#x3D;&#123; this.getChildMsg &#125;&gt;&lt;&#x2F;Child&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n\tgetChildMsg(childMsg) &#123;\n\t\tthis.setState(&#123;\n      childMsg:  childMsg\n    &#125;)\n  &#125;\n&#125;\nclass Son extends React.Component &#123;\n\tstate &#x3D; &#123;\n\t\tchildMsg: &#39;child&#39;\n  &#125;\n\trender() &#123;\n\t\treturn (\n    \t&lt;button onClick&#x3D;&#123; this.emitMsg &#125;&gt;&lt;&#x2F;button&gt;\n    )\n  &#125;\n\temitMsg &#x3D; () &#x3D;&gt; &#123;\n\t\tthis.props.getMsg(this.state.childMsg)\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：此处在Child组件中，render函数的onClick上不能直接调用this.props.getMsg()，而要在抽离到实例方法中。原因：react会在props和state改变的时候调用render对DOM进行diff后更新渲染，如果在render中再次调用getMsg修改state，会陷入死循环并报错</p>\n<h4 id=\"4-兄弟组件通讯\"><a href=\"#4-兄弟组件通讯\" class=\"headerlink\" title=\"4.兄弟组件通讯\"></a>4.兄弟组件通讯</h4><ul>\n<li><p>将共享状态提升到最近的公共的父组件中，又公告父组件管理这个状态</p>\n</li>\n<li><p>父组件：提供共享状态、提供操作共享状态的方法</p>\n</li>\n<li><p>子组件：通过props获取共享状态和操作共享状态</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class Parent extends React.Component &#123;\n  &#x2F;&#x2F; 状态提升\n  state &#x3D; &#123;\n    count: 1\n  &#125;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;Child1 count&#x3D;&#123; this.state.count &#125;&gt;&lt;&#x2F;Child1&gt;\n        &lt;Child2 increment &#x3D; &#123; this.increment&#125;&gt;&lt;&#x2F;Child2&gt;\n      &lt;&#x2F;div&gt;\n    )\n  &#125;\n  &#x2F;&#x2F; 提供修改状态的方法\n  increment &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      count: this.state.count + 1\n    &#125;)\n  &#125;\n&#125;\n\nconst Child1 &#x3D; props &#x3D;&gt; &#123;\n  return (\n    &lt;h2&gt;计数器: &#123; props.count &#125;&lt;&#x2F;h2&gt;\n  )\n&#125;\n\nconst Child2 &#x3D; props &#x3D;&gt; &#123;\n  const increment &#x3D; () &#x3D;&gt; &#123;\n    props.increment()\n  &#125;\n  return (\n    &lt;button onClick&#x3D;&#123; increment &#125;&gt;+1&lt;&#x2F;button&gt;\n  )\n\n&#125;\n  ReactDOM.render(\n    &lt;Parent&#x2F;&gt;,\n    document.querySelector(&quot;#root&quot;)\n  )<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"5-组件树传递数据\"><a href=\"#5-组件树传递数据\" class=\"headerlink\" title=\"5.组件树传递数据\"></a>5.组件树传递数据</h4><ul>\n<li><p>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。</p>\n</li>\n<li><p>使用 context, 我们可以避免通过中间元素传递 props：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n&#x2F;&#x2F; 为当前的 theme 创建一个 context（“light”为默认值）。\nconst ThemeContext &#x3D; React.createContext(&#39;light&#39;);\nclass App extends React.Component &#123;\n  render() &#123;\n    &#x2F;&#x2F; 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n    &#x2F;&#x2F; 无论多深，任何组件都能读取这个值。\n    &#x2F;&#x2F; 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n    return (\n      &lt;ThemeContext.Provider value&#x3D;&quot;dark&quot;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;ThemeContext.Provider&gt;\n    );\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() &#123;\n  return (\n    &lt;div&gt;\n      &lt;ThemedButton &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n  );\n&#125;\n\nclass ThemedButton extends React.Component &#123;\n  &#x2F;&#x2F; 指定 contextType 读取当前的 theme context。\n  &#x2F;&#x2F; React 会往上找到最近的 theme Provider，然后使用它的值。\n  &#x2F;&#x2F; 在这个例子中，当前的 theme 值为 “dark”。\n  static contextType &#x3D; ThemeContext;\n  render() &#123;\n    return &lt;Button theme&#x3D;&#123;this.context&#125; &#x2F;&gt;;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>使用方法：</p>\n<ul>\n<li>1.React.createContext方法创建context</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">const MyContext &#x3D; React.createContext(defaultValue)\n&#x2F;&#x2F; 创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 Provider 中读取到当前的 context 值。\n&#x2F;&#x2F; 只有当组件所处的树中没有匹配到 Provider 时，其 defaultValue 参数才会生效。此默认值有助于在不使用 Provider 包装组件的情况下对组件进行测试。注意：将 undefined 传递给 Provider 的 value 时，消费组件的 defaultValue 不会生效\n&#x2F;&#x2F; or\nconst &#123; Provider, Consumer &#125; &#x3D; React.creactContext()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>2.使用Context.Provider提供数据</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&lt;MyContext.Provider value&#x3D;&#123;&#x2F;* 某个值 *&#x2F;&#125; &#x2F;&gt;\n&#x2F;&#x2F; or\n&lt;Provider value&#x3D;&#123;&#125; &#x2F;&gt;\n&#x2F;&#x2F; 每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。\n\n&#x2F;&#x2F; Provider 接收一个 value 属性，传递给消费组件。一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。\n\n&#x2F;&#x2F; 当 Provider 的 value 值发生变化时，它内部的所有消费组件都会重新渲染。Provider 及其内部 consumer 组件都不受制于 shouldComponentUpdate 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>value提供为对象时注意事项：</p>\n</li>\n<li><p>因为 context 会使用参考标识（reference identity）来决定何时进行渲染，这里可能会有一些陷阱，当 provider 的父组件进行重渲染时，可能会在 consumers 组件中触发意外的渲染。举个例子，当每一次 Provider 重渲染时，以下的代码会重渲染所有下面的 consumers 组件，因为 <code>value</code> 属性总是被赋值为新的对象：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  render() &#123;\n    return (\n      &lt;MyContext.Provider value&#x3D;&#123;&#123;something: &#39;something&#39;&#125;&#125;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;MyContext.Provider&gt;\n    );\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>为了防止这种情况，将 value 状态提升到父节点的 state 里：</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">class App extends React.Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123;\n      value: &#123;something: &#39;something&#39;&#125;,\n    &#125;;\n  &#125;\n\n  render() &#123;\n    return (\n      &lt;MyContext.Provider value&#x3D;&#123;this.state.value&#125;&gt;\n        &lt;Toolbar &#x2F;&gt;\n      &lt;&#x2F;MyContext.Provider&gt;\n    );\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>3.消费数据</p>\n<ul>\n<li>方式1：Class.contextType</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\"> &#x2F;&#x2F; 挂载在 class 上的 contextType 属性会被重赋值为一个由 React.createContext() 创建的 Context 对象。此属性能让你使用 this.context 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。\nclass MyClass extends React.Component &#123;\n  static contextType &#x3D; MyContext;\n  render() &#123;\n    let value &#x3D; this.context;\n    &#x2F;* 基于这个值进行渲染工作 *&#x2F;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>方式2：Context.Consumer</li>\n</ul>\n<pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;&#x2F; 一个 React 组件可以订阅 context 的变更，此组件可以让你在函数式组件中可以订阅 context。\n\n&#x2F;&#x2F; 这种方法需要一个函数作为子元素（function as a child）。这个函数接收当前的 context 值，并返回一个 React 节点。传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 defaultValue。\n&lt;MyContext.Consumer&gt;\n  &#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;\n&lt;&#x2F;MyContext.Consumer&gt;\n&#x2F;&#x2F; or \n&lt;Consumer&gt;\n\t&#123;value &#x3D;&gt; &#x2F;* 基于 context 值进行渲染*&#x2F;&#125;\n&lt;&#x2F;Consumer&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"svg相关笔记","keywords":"svg","_content":"## 一、入门指南\n\n### 1. 图形系统\n\n计算机中描述图形信息的两大图形系统：栅格图形和矢量图形。栅格图形中图形被表示为图片元素或者像素的长方形数组。矢量图形中图形被描述为一系列几何形状，通过矢量图形阅读器在指定的坐标集上绘制形状。\n\n### 2. SVG(Scalable Vector Graphics)\n\nSVG` 是一种 `XML` 应用，用来表示矢量图形。所有的图形有关信息被存储为纯文本，具有XML的开放性、可移植性和可交互性。当前稳定的 `XML` 和 `SVG` 版本都为 `1.1\n\nSVG文档结构是标准的 `XML` 文档，根元素 `svg` 定义图形的大小，根元素中包含各种的形状元素。`SVG` 允许使用单独的属性指定元素的样式。\n\n`SVG` 使用 `g` 元素对图形进行分组，使用 `use` 元素实现元素的复用。\n\n## 二、在网页中使用\n\n### 1. 将SVG作为图像\n\n将 `svg` 作为图像包含在HTML标记的 `img` 元素内，但是这样有一定的局限性：\n\n**`SVG`转为栅格图像时与主页面分离，并且无法在两者之间通信( `SVG` 渲染过程与主页面独立)。主页面上的样式对 `SVG` 无效，运行在主页面上的脚本无法感知或者修改 `SVG` 文档结构。**\n\n在 `CSS` 中包含 `SVG`，最常用的是 `background-image` 属性，应该避免 `SVG` 元素文件太大。\n\n###  2. 将SVG作为应用程序\n\n使用 `object` 元素将 `SVG` 嵌入 `HTML` 文档中，`object`元素的 `type` 属性表示要嵌入的文档类型，对用 `SVG` 应该是`type=\"image/svg+xml\"`。`object` 元素必须有起始标签和结束标签，这两个标签之间的内容为对象数据本身不能被渲染时显示。\n\n## 三、坐标系统\n\n###  1. 视口\n\n视口是指文档打算使用的画布区域。在 `svg` 元素上使用 `width` 和 `height` 属性确定视口的大小，属性值可以仅仅是为数字也可以为带单位的数字(单位可以为`em`、`ex`、`px`、`pt`、`pc`、`cm`、`mm` 和 `in`)也可以为百分比。\n\n### 2. 默认用户坐标\n\n`SVG` 阅读器会设置一个坐标系统，即原点 `(0,0)` 位于视口的左上角，`x` 向右递增，`y` 向下递增。这个坐标系统是一个纯粹的几何系统，点没有大小，网格线被认为是无限细。\n\n在 `SVG` 中指定单位并不会影响其他元素中给定单位的坐标，也就是说 `SVG` 文档中各个元素的单位可以不统一。\n\n### 3. 指定用户坐标\n\n摒弃阅读器设置的默认用户坐标，可以自己为视口设置一个用户坐标。通过在 `svg` 元素上设置 `viewBox` 属性。\n\n`viewBox` 属性由 `4` 个数值组成，分别代表要叠加在视口上的最小 `x`、最小 `y`，宽度、高度。\n\n既然可以对 `svg` 自定义用户坐标，那么肯定要解决 `svg` 视口长宽比例和 `viewBox` 定义的长宽比例不同的问题以及如何对齐问题。这个时候就需要 `preserveAspectRatio` 属性了。\n\n如果 `viewBox` 的长宽比例与视口的长宽比例不同，那么 `svg` 可以有以下三种选择：\n\n- 按较小的尺寸等比例缩放图形，使图形完全填充视口\n- 按较大的尺寸等比例缩放图形，病裁减掉超出视口的部分\n- 拉伸和压缩绘图以使其恰好填充视口\n\n```\npreserveAspectRatio` 属性允许指定被缩放的图形相对视口的对齐方式,格式为 `preserveAspectRatio = \"alignment[meet|slice]\"\n```\n\n默认值为 `\"xMidYMid meet\"`\n\n`alignment`指定轴和位置，`x` 和 `y` 方向都有 `min`, `mid`, `max` 三种方式，分别表示 `x` 和 `y` 方向的对齐方式，对齐方式由 `x` 和 `y` 组合指定，共 `9` 中方式，也就是 `alignment` 共有如下 `9` 个取值：\n\n| y\\x      | xMin     | xMid     | xMax     |\n| -------- | -------- | -------- | -------- |\n| **yMin** | xMinYMin | xMidYMin | xMaxYMin |\n| **yMid** | xMinYMid | xMidYMid | xMaxYMid |\n| **yMax** | xMinYMax | xMidYMax | xMaxYMax |\n\n`meet` 说明符在图形超出视口时候会对图形适当缩小调整适配可用的空间\n\n`slice` 说明符直接裁剪超出视口的部分\n\n除了上述操作之外，还可以指定 `preserveAspectRatio=\"none\"`，用于在 `viewBox` 和视口宽高比不同时缩放图像，此时图像不会被等比例缩放，会被拉伸、挤压、变形。\n\n### 4. 嵌套坐标系统\n\n可以将另一个 `svg` 元素插入到文档中来建立一个新的视口和坐标系统，也就是说 `svg` 中可以嵌套另一个 `svg`，每个 `svg` 都有自己独立的视口和坐标系统\n\n## 四、基本形状\n\n###  1. 线段\n\n`line` 元素，使用 `x1`, `y1`, `x2`, `y2` 属性指定线段的起止点坐标。有如下特性:\n\n| 特性               | 说明                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| `stroke-width`     | 笔画宽度，坐标网格线位于笔画的正中间，可以使用 `css` 的 `shape-rendering` 值来控制反锯齿特性 |\n| `stroke`           | 笔画颜色                                                     |\n| `stroke-opacity`   | 线条的不透明度                                               |\n| `stroke-dasharray` | 虚线，由一系列数字组成，数字个数为偶数(负责会自动重复一遍使其为偶数),表示线长-间隙-线长-间隙... |\n\n### 2. 矩形\n\n`rect`元素，使用`x`,`y`,`width`,`height`表示一个矩形\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度，边框是骑在矩形边界上的，一半在矩形外，一半在矩形内 |\n| `rx`/`ry`      | 圆角矩形，最大值为矩形宽/高的一半，如果只指定了一个，则认为两个都为相同的值 |\n\n### 3. 圆和椭圆\n\n`circle` 元素表示圆,由 `cx`,`cy`,`r` 属性界定 `ellipse` 元素表示椭圆,由 `cx`,`cy`,`rx`,`ry` 界定\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度，边框是骑在圆的边界上的，一半在圆/椭圆外，一半在圆/椭圆内 |\n\n### 4. 多边形\n\n`polygon` 元素指定一个多边形,由 `points` 属性指定的一系列坐标点界定，会自动封闭\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度                                                     |\n| `fill-rule`    | 填充规则，如果多边形的边有交叉时，需要指定，可以取 `mozero`(默认)和 `evenodd` 两个值。 |\n\n`fill-rule` 值为 `nonzero` 时的原理:判断一个点是在多边形内部还是外部时，从这个点画一条到无穷远的射线，然后数这个线和多边形的边有多少次交叉。如果交叉的边线是从右往左画，则总数加 `1`，如果是从左往右则总数减 `1`. 如果最后总数为 `0` 则认为改点在图形外部，否则在内部。\n\n`fill-rule` 值为 `evenodd` 时只数射线与多边形边的交叉次数，如果为奇数则认为在多边形内部，否则认为在多边形外部。\n\n### 5. 折线\n\n`polyline` 元素表示一个折线，使用 `points` 属性指定一系列点，不自动封闭图形。\n\n### 6. 特性总结\n\n| 特性                | 说明                                               |\n| ------------------- | -------------------------------------------------- |\n| `stroke`            | 笔画颜色                                           |\n| `stroke-width`      | 笔画宽度                                           |\n| `stroke-opacity`    | 笔画不透明度                                       |\n| `stroke-dasharray`  | 虚线笔画                                           |\n| `stroke-linecap`    | 笔画头的形状 `butt`(默认),`round`,`square`         |\n| `stroke-linejoin`   | 图形棱角，有`miter`(默认),`round`和`bevel`三个取值 |\n| `stroke-miterlimit` | 相交处显示宽度与线宽的最大比例，默认为`4`          |\n| `fill`              | 填充颜色 默认`black`                               |\n| `fill-opacity`      | 填充不透明度                                       |\n| `fill-rule`         | 填充规则                                           |\n\n## 五、文档结构\n\n### 1. 结构和表现\n\n`SVG` 允许文档表现和文档结构分离，`SVG` 支持四种方式指定表现信息：内联样式、内部样式表、外部样式表以及表现属性\n\n| 表现方式   | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 内联样式   | 元素内部使用 `style` 属性                                    |\n| 内部样式表 | 内部样式定义在 `defs` 元素内部                               |\n| 外部样式表 | 与 `html` 类似，将样式定义在 `css` 文件中，使用选择器来设置相应的元素样式 |\n| 表现属性   | `SVG` 允许以属性的形式指定表现样式，但是**表现属性的优先级最低**，如果以其他三种形式指定了相同的样式属性，则将覆盖通过表现属性指定的样式 |\n\n内部样式表示例：\n\n```xml\n<svg width=\"200px\" height=\"200px\" xmlns=\"http://www.w3.org/2000/svg>\n    <defs>\n        <style type=\"text/css\"><![CDATA[\n            circle{\n                fill:#ccc\n            }\n        ]]></style>\n    </defs>\n    <circle cx=\"10\" cy=\"10\" r=\"5\"/>\n</svg>\n```\n\n### 2. 分组和引用\n\n`g` 元素用来将其子元素作为一个组合，可以使文档结构更清晰。除此之外，在g标签中指定的所有样式会应用于组合内的所有子元素，可以不用在所有子元素上指定属性。\n\n`use` 元素用来复用图形中重复出现的元素，需要为 `use` 标签的 `xlink:href` 指定 `URI` 来引用指定的图形元素。同时还要指定`x`和`y`属性以表示组合应该移动到哪个位置。`use`元素并不限制只能使用同一个文件内的对象，`xlink:href`属性可以指定任何有效的文件或`URI`。\n\n`defs`元素用来定义复用的元素，但是定义在`defs`内的元素并不会被显示，而是作为模板供其他地方使用。\n\n`symbol`元素与g元素不同，`symbol`永远不会被显示，也可以用来指定被后续使用的元素，`symbol`元素可以指定 `viewBox` 和`preserveAspectRatio` 属性。在引用时通过为 `use` 元素指定 `width` 和 `height` 属性就可以让 `symbol` 元素适配视口大小。\n\n`image` 可以用来包含一个完整的 `SVG` 或栅格文件。如果包含一个 `SVG` 文件，则视口会基于引用的文件的 `x`,`y`,`width`,`height` 属性来建立。如果包含栅格文件则会被缩放以适配该属性指定的矩形。\n\n`SVG`规范要求 `SVG` 阅读器支持 `JPEG` 和 `PNG` 两种栅格文件。\n\n## 六、坐标系统变换\n\n### 1. translate变换\n\n`translate` 变换用来对用户坐标进行平移，通过制定 `transform` 属性值来设置: `transform = \"translate(x,y)\"`。\n\n`translate` 工作原理:首先获取整个网络，然后将其移动到画布的新位置而不是移动所在的元素，也就是说移动的是整个坐标系统而不是元素本身。看似比移动元素复杂，其实在使用其他一系列变换时，这种移动整个坐标系的方法从数学和概念上讲，更方便。\n\n### 2. scale变换\n\n缩放坐标系统。`transform = \"scale(value)\"` 或者 `transform=\"scale(x-value,y-value)\"`。\n\n仅仅使用 `scale(n)` 变换时，网格系统的原点位置并没有变化，只是每个用户坐标都变成了原来的 `n` 倍，也就是网格变大了，因此线也会变粗(用户单位并没有变)。\n\n*技巧：如果从其他系统传输数据到 `SVG`，则可能必须处理使用笛卡尔坐标表示的矢量图形，在笛卡尔坐标系统中，原点位于左下角，`y`向上递增，`x`向右递增。而 `SVG` 坐标原点位于左上角，此时使用 `scale(1,-1)` 就可以完成两者之间的转换。*\n\n**缩放变换永远不会改变图形对象的网格坐标或者笔画宽度，仅仅改变对应画布上的坐标系统网格的大小。**\n\n### 3. rotate变换\n\n根据指定的角度旋转坐标系统，默认的坐标系统中，角度的测量顺时针增加，`0` 度为 `3` 点钟方向。\n\n注意，除非另行指定，否则旋转以原点为中心。 此时可以通过平移+旋转的方式来指定旋转中心： `translate(centerX,centerY) rotate(angle) translate(-centerX,-centerY)`\n\n但是有个更简单的方式：`rotate(angle,centerX,centerY)`\n\n### 4. 围绕中心点缩放\n\n上面提到，缩放默认是以原点为基准的，这显然不能满足需求，那么可以通过如下方式指定缩放中心：\n\n```\ntranslate(-centerX*(factor-1),-centerY*(factor-1)) scale(factor)\n```\n\n### 5. skewX和skewY变换\n\n这两个变换用来倾斜某个轴，一般形式为 `skewX(angle),skewY(angle)`。这样的结果就是使得 `x` 轴和 `y` 轴不再垂直。\n\n### 6. 矩阵变换\n\n计算机图形学中坐标变换都通过矩阵来实现，除上述变换方法之外，还可以直接为变换指定变换矩阵，变换矩阵为 `matrix(a,b,c,d,e,f)`，此时指定的变换矩阵为:\n\n```text\na  c  e\nb  d  f\n0  0  1\n```\n\n## 七、路径\n\n### 1. path命令\n\n`SVG` 中所有基本形状都是 `path` 的简写形式，但是建议使用简写形式，因为这样可以使 `SVG` 文档更可读。\n\n`path` 元素更通用，可以通过制定一系列相互连接的线、弧、曲线来绘制任意形状的轮廓，这些轮廓也可以填充或者绘制轮廓线，也可以用来定义裁剪区域或蒙版。\n\n下表为 `path` 命令总结，其中大写表示绝对坐标，小写表示相对坐标：\n\n| 命令    | 参数                                        | 说明                                                         |\n| ------- | ------------------------------------------- | ------------------------------------------------------------ |\n| `M` `m` | `x y`                                       | 移动画笔到制定坐标                                           |\n| `L` `l` | `x y`                                       | 绘制一条到给定坐标的线                                       |\n| `H` `h` | `x`                                         | 绘制一条到给定 `x` 坐标的横线                                |\n| `V` `v` | `y`                                         | 绘制一条到给定`y`坐标的垂线                                  |\n| `A` `a` | `rx ry x-axis-rotation large-arc sweep x y` | 圆弧曲线命令有7个参数，依次表示`x`方向半径、`y`方向半径、旋转角度、大圆标识、顺逆时针标识、目标点`x`、目标点`y`。大圆标识和顺逆时针以`0`和`1`表示。`0`表示小圆、逆时针 |\n| `Q` `q` | `x1 y1 x y`                                 | 绘制一条从当前点到`x, y`控制点为`x1, y1`的二次贝塞尔曲线     |\n| `T` `t` | `x y`                                       | 绘制一条从当前点到`x`,`y`的光滑二次贝塞尔曲线，控制点为前一个`Q`命令的控制点的中心对称点，如果没有前一条则已当前点为控制点。 |\n| `C` `c` | `x1 y1 x2 y2 x y`                           | 绘制一条从当前点到 `x`,`y`控制点为`x1,y1` `x2,y2`的三次贝塞尔曲线 |\n| `S` `s` | `x2 y2 x y`                                 | 绘制一条从当前点到`x,y`的光滑三次贝塞尔曲线。第一个控制点为前一个`C`命令的第二个控制点的中心对称点，如果没有前一条曲线，则第一个控制点为当前的点。 |\n\n路径的填充同样可以使用 `fill-rule` 属性指定填充规则，如果需要填充一个中空的形状，则只需要注意外侧路径顺逆时针方向和内侧空心区域顺逆时针方向即可。\n\n## 八、渐变\n\n### 1. 线性渐变\n\n线性渐变是一系列颜色沿着一条直线过渡，在特定的位置指定想要的颜色，被称为渐变点。渐变点是渐变结构的一部分，颜色是表现的一部分。\n\n线性渐变使用`linearGradient`元素表示：\n\n```xml\n<defs>\n\t<linearGradient id=\"linear\">\n\t\t<stop offset=\"0%\" style=\"stop-color:#ffcc00;\"></stop>\n\t\t<stop offset=\"100%\" style=\"stop-color:#0099cc;\"></stop>\n\t</linearGradient>\n</defs>\n\t<rect x=\"20\" y=\"20\" width=\"200\" height=\"100\" style=\"fill:url(#linear);stroke:black;\"></rect>\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.4.jpg)\n\n`stop`元素有两个必要属性：`offset`和`stop-color`。`offset`属性用来指定在哪个点的颜色应该等于`stop-color`。`offset`的取值范围0%-100%。\n\n`stop`元素的属性：\n\n| 属性           | 说明                             |\n| -------------- | -------------------------------- |\n| `offset`       | 必需，取值范围 `0%-100%`         |\n| `stop-color`   | 必需，对应 `offset` 位置点的颜色 |\n| `stop-opacity` | 对应 `offset` 位置点的不透明度   |\n\n`linearGradient`元素属性：\n\n| 属性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `x1`,`y1`      | 渐变的起点位置，使用百分比表示，默认的渐变方向是从左到右     |\n| `x2`,`y2`      | 渐变的终点位置，使用百分比表示                               |\n| `spreadMethod` | 如果设置的`offset`不能覆盖整个对象，该怎么填充。`pad`: 起点或终点颜色会扩展到对象边缘。`repeat`: 渐变重复起点到终点的过程。`reflect`: 渐变按终点-起点-终点的排列重复。 |\n\n### 2. 径向渐变\n\n径向渐变的每个渐变点是一个圆形路径，从中心点向外扩散。设置方式与线性渐变大致相同。如果填充对象边界框不是正方形的，则过渡路径会变成椭圆来匹配边界框的长宽比。\n\n```xml\n<defs>\n\t<radialGradient id=\"radial\" cx=\"50%\" cy=\"50%\" >\n\t\t<stop offset=\"0%\" style=\"stop-color:#f00;\"></stop>\n\t\t<stop offset=\"50%\" style=\"stop-color:#0f0;\"></stop>\n\t\t<stop offset=\"100%\" style=\"stop-color:#00f;\"></stop>\n\t</radialGradient>\n</defs>\n<rect x=\"20\" y=\"20\" width=\"200\" height=\"200\" style=\"fill:url(#radial);stroke:black;\"></rect>\t\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.5.jpg)\n\n`radialGradient`元素属性：\n\n| 属性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `cx`,`cy`,`r`  | 定义渐变的范围，测量半径的单位是对象的宽高均值，而不是对角线，默认都为`50%` |\n| `fx`,`fy`      | `0%`点所处的圆路径的圆心，默认和`cx`,`cy`一样                |\n| `spreadMethod` | `pad`,`repeat`,`reflect` 三个值，用来解决绘制范围没有到达图形边缘的情况。 |\n\n## 九、文本\n\n### 1. 相关术语\n\n| 术语                  | 说明                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| 字符                  | `XML`中，字符是指带有一个数字值得一个或多个字节，数字值与`Unidode`标准对应 |\n| 符号                  | 字符的视觉呈现。每个字符可以有多种视觉呈现                   |\n| 字体                  | 代表某个字符集合的一组符号                                   |\n| 基线                  | 字体中所有符号以基线对齐                                     |\n| 上坡度                | 基线到字体中最高字符的顶部距离                               |\n| 下坡度                | 基线到最深字符底部的距离                                     |\n| 大写字母高度、`x`高度 | 大写字母高度是指基线上大写字母的高度，`x`高度是基线到小写字母`x`顶部的高度 |\n\n### 2. 文本元素的基本属性\n\n`text` 元素以指定的x和y值作为元素内容第一个字符的基线位置，默认样式黑色填充、没有轮廓。\n\n| 属性              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `font-family`     | 以空格分割的一系列字体名称或通用字体名称                     |\n| `font-size`       | 如果有多行文本，则 `font-size` 为平行的两条基线的距离        |\n| `font-weight`     | 两个值：`bold`(粗体)和`nromal`(默认)                         |\n| `font-style`      | 常用的两个值:`italic`(斜体)和`normal`                        |\n| `text-decoration` | 可能的值:`none`,`underline`(下划线),`overline`(上划线),`line-through`(删除线) |\n| `word-spacing`    | 单词之间的距离                                               |\n| `letter-spacing`  | 字母之间的间距                                               |\n| `text-anchor`     | 对齐方式：`start`,`middle`,`end`                             |\n| `textLength`      | 设置文本的长度                                               |\n| `lengthAdjust`    | 在指定了`textLength`时，可以通过`lengthAdjust`属性设置字符的调整方式，值为 `spacing`(默认)时,只调整字符的间距。当值为`spacingAndGlyphs`时，同时调整字符间距和字符本身的大小 |\n\n### 3. tspan元素\n\n`text` 元素无法对文本进行换行操作，如果需要分行显示文本，则需要使用在text元素里嵌入`tspan` 元素。`tspan` 元素与`html`的`span`元素类似，可以嵌套在文本内容中，并可以单独改变其内部文本内容的样式。\n\n`tspan`元素除大小，颜色等表现样式之外，还可以设置以下属性：\n\n| 属性             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `dx`,`dy`        | `x`和`y`方向的偏移                                           |\n| `x`,`y`          | 对`tspan`进行绝对定位                                        |\n| `rotate`         | 旋转字符，可以同时设置多个值，这些值会依次作用在`tspan`包裹的字母上 |\n| `baseline-shift` | 与`dy`属性设置上下标相比，这个属性更方便，当为`super`时，会上标。`sub` 时为下标。仅仅在所在的`tspan`内有效 |\n\n### 4. 纵向文本\n\n文本一般从左到右排列，如果需要上下排列，则需要使用`writing-mode`属性。\n\n设置`writing-mode`属性值为`tb`(top to bottom)，可以将文本上下排列。\n\n## 5. 文本路径\n\n如果要使得文本沿着某条路径排列，则需要使用`textPath`元素。需要将文本放在`textPath`元素内部，然后使用`textPath`元素的`xlink:href`属性引用一个定义好的`path`元素。\n\n```xml\n<defs>\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n</defs>\n<g transform=\"translate(10,50)\">\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n\t<text>\n\t\t<textPath xlink:href=\"#path\">\n\t\t\thello world\n\t\t</textPath>\n\t</text>\n</g>\n<g transform=\"translate(10,100)\">\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n\t<text>\n\t\t<textPath xlink:href=\"#path\" startOffset=\"50%\" text-anchor=\"middle\">\n\t\t\thello world\n\t\t</textPath>\n\t</text>\n</g>\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.6.jpg)\n\n`startOffset`属性用来指定文本的起点，当设置为`50%`，并且设置`text-anchor`为`middle`时，文本会被定为在`path`的中间。","source":"_posts/svg.md","raw":"---\ntitle: svg相关笔记\ntag: svg\nkeywords: svg\ncategories: 前端可视化库\n---\n## 一、入门指南\n\n### 1. 图形系统\n\n计算机中描述图形信息的两大图形系统：栅格图形和矢量图形。栅格图形中图形被表示为图片元素或者像素的长方形数组。矢量图形中图形被描述为一系列几何形状，通过矢量图形阅读器在指定的坐标集上绘制形状。\n\n### 2. SVG(Scalable Vector Graphics)\n\nSVG` 是一种 `XML` 应用，用来表示矢量图形。所有的图形有关信息被存储为纯文本，具有XML的开放性、可移植性和可交互性。当前稳定的 `XML` 和 `SVG` 版本都为 `1.1\n\nSVG文档结构是标准的 `XML` 文档，根元素 `svg` 定义图形的大小，根元素中包含各种的形状元素。`SVG` 允许使用单独的属性指定元素的样式。\n\n`SVG` 使用 `g` 元素对图形进行分组，使用 `use` 元素实现元素的复用。\n\n## 二、在网页中使用\n\n### 1. 将SVG作为图像\n\n将 `svg` 作为图像包含在HTML标记的 `img` 元素内，但是这样有一定的局限性：\n\n**`SVG`转为栅格图像时与主页面分离，并且无法在两者之间通信( `SVG` 渲染过程与主页面独立)。主页面上的样式对 `SVG` 无效，运行在主页面上的脚本无法感知或者修改 `SVG` 文档结构。**\n\n在 `CSS` 中包含 `SVG`，最常用的是 `background-image` 属性，应该避免 `SVG` 元素文件太大。\n\n###  2. 将SVG作为应用程序\n\n使用 `object` 元素将 `SVG` 嵌入 `HTML` 文档中，`object`元素的 `type` 属性表示要嵌入的文档类型，对用 `SVG` 应该是`type=\"image/svg+xml\"`。`object` 元素必须有起始标签和结束标签，这两个标签之间的内容为对象数据本身不能被渲染时显示。\n\n## 三、坐标系统\n\n###  1. 视口\n\n视口是指文档打算使用的画布区域。在 `svg` 元素上使用 `width` 和 `height` 属性确定视口的大小，属性值可以仅仅是为数字也可以为带单位的数字(单位可以为`em`、`ex`、`px`、`pt`、`pc`、`cm`、`mm` 和 `in`)也可以为百分比。\n\n### 2. 默认用户坐标\n\n`SVG` 阅读器会设置一个坐标系统，即原点 `(0,0)` 位于视口的左上角，`x` 向右递增，`y` 向下递增。这个坐标系统是一个纯粹的几何系统，点没有大小，网格线被认为是无限细。\n\n在 `SVG` 中指定单位并不会影响其他元素中给定单位的坐标，也就是说 `SVG` 文档中各个元素的单位可以不统一。\n\n### 3. 指定用户坐标\n\n摒弃阅读器设置的默认用户坐标，可以自己为视口设置一个用户坐标。通过在 `svg` 元素上设置 `viewBox` 属性。\n\n`viewBox` 属性由 `4` 个数值组成，分别代表要叠加在视口上的最小 `x`、最小 `y`，宽度、高度。\n\n既然可以对 `svg` 自定义用户坐标，那么肯定要解决 `svg` 视口长宽比例和 `viewBox` 定义的长宽比例不同的问题以及如何对齐问题。这个时候就需要 `preserveAspectRatio` 属性了。\n\n如果 `viewBox` 的长宽比例与视口的长宽比例不同，那么 `svg` 可以有以下三种选择：\n\n- 按较小的尺寸等比例缩放图形，使图形完全填充视口\n- 按较大的尺寸等比例缩放图形，病裁减掉超出视口的部分\n- 拉伸和压缩绘图以使其恰好填充视口\n\n```\npreserveAspectRatio` 属性允许指定被缩放的图形相对视口的对齐方式,格式为 `preserveAspectRatio = \"alignment[meet|slice]\"\n```\n\n默认值为 `\"xMidYMid meet\"`\n\n`alignment`指定轴和位置，`x` 和 `y` 方向都有 `min`, `mid`, `max` 三种方式，分别表示 `x` 和 `y` 方向的对齐方式，对齐方式由 `x` 和 `y` 组合指定，共 `9` 中方式，也就是 `alignment` 共有如下 `9` 个取值：\n\n| y\\x      | xMin     | xMid     | xMax     |\n| -------- | -------- | -------- | -------- |\n| **yMin** | xMinYMin | xMidYMin | xMaxYMin |\n| **yMid** | xMinYMid | xMidYMid | xMaxYMid |\n| **yMax** | xMinYMax | xMidYMax | xMaxYMax |\n\n`meet` 说明符在图形超出视口时候会对图形适当缩小调整适配可用的空间\n\n`slice` 说明符直接裁剪超出视口的部分\n\n除了上述操作之外，还可以指定 `preserveAspectRatio=\"none\"`，用于在 `viewBox` 和视口宽高比不同时缩放图像，此时图像不会被等比例缩放，会被拉伸、挤压、变形。\n\n### 4. 嵌套坐标系统\n\n可以将另一个 `svg` 元素插入到文档中来建立一个新的视口和坐标系统，也就是说 `svg` 中可以嵌套另一个 `svg`，每个 `svg` 都有自己独立的视口和坐标系统\n\n## 四、基本形状\n\n###  1. 线段\n\n`line` 元素，使用 `x1`, `y1`, `x2`, `y2` 属性指定线段的起止点坐标。有如下特性:\n\n| 特性               | 说明                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| `stroke-width`     | 笔画宽度，坐标网格线位于笔画的正中间，可以使用 `css` 的 `shape-rendering` 值来控制反锯齿特性 |\n| `stroke`           | 笔画颜色                                                     |\n| `stroke-opacity`   | 线条的不透明度                                               |\n| `stroke-dasharray` | 虚线，由一系列数字组成，数字个数为偶数(负责会自动重复一遍使其为偶数),表示线长-间隙-线长-间隙... |\n\n### 2. 矩形\n\n`rect`元素，使用`x`,`y`,`width`,`height`表示一个矩形\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度，边框是骑在矩形边界上的，一半在矩形外，一半在矩形内 |\n| `rx`/`ry`      | 圆角矩形，最大值为矩形宽/高的一半，如果只指定了一个，则认为两个都为相同的值 |\n\n### 3. 圆和椭圆\n\n`circle` 元素表示圆,由 `cx`,`cy`,`r` 属性界定 `ellipse` 元素表示椭圆,由 `cx`,`cy`,`rx`,`ry` 界定\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度，边框是骑在圆的边界上的，一半在圆/椭圆外，一半在圆/椭圆内 |\n\n### 4. 多边形\n\n`polygon` 元素指定一个多边形,由 `points` 属性指定的一系列坐标点界定，会自动封闭\n\n| 特性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `fill`         | 填充颜色                                                     |\n| `fill-opacity` | 填充不透明度                                                 |\n| `stroke`       | 边框颜色                                                     |\n| `stroke-width` | 边框宽度                                                     |\n| `fill-rule`    | 填充规则，如果多边形的边有交叉时，需要指定，可以取 `mozero`(默认)和 `evenodd` 两个值。 |\n\n`fill-rule` 值为 `nonzero` 时的原理:判断一个点是在多边形内部还是外部时，从这个点画一条到无穷远的射线，然后数这个线和多边形的边有多少次交叉。如果交叉的边线是从右往左画，则总数加 `1`，如果是从左往右则总数减 `1`. 如果最后总数为 `0` 则认为改点在图形外部，否则在内部。\n\n`fill-rule` 值为 `evenodd` 时只数射线与多边形边的交叉次数，如果为奇数则认为在多边形内部，否则认为在多边形外部。\n\n### 5. 折线\n\n`polyline` 元素表示一个折线，使用 `points` 属性指定一系列点，不自动封闭图形。\n\n### 6. 特性总结\n\n| 特性                | 说明                                               |\n| ------------------- | -------------------------------------------------- |\n| `stroke`            | 笔画颜色                                           |\n| `stroke-width`      | 笔画宽度                                           |\n| `stroke-opacity`    | 笔画不透明度                                       |\n| `stroke-dasharray`  | 虚线笔画                                           |\n| `stroke-linecap`    | 笔画头的形状 `butt`(默认),`round`,`square`         |\n| `stroke-linejoin`   | 图形棱角，有`miter`(默认),`round`和`bevel`三个取值 |\n| `stroke-miterlimit` | 相交处显示宽度与线宽的最大比例，默认为`4`          |\n| `fill`              | 填充颜色 默认`black`                               |\n| `fill-opacity`      | 填充不透明度                                       |\n| `fill-rule`         | 填充规则                                           |\n\n## 五、文档结构\n\n### 1. 结构和表现\n\n`SVG` 允许文档表现和文档结构分离，`SVG` 支持四种方式指定表现信息：内联样式、内部样式表、外部样式表以及表现属性\n\n| 表现方式   | 说明                                                         |\n| ---------- | ------------------------------------------------------------ |\n| 内联样式   | 元素内部使用 `style` 属性                                    |\n| 内部样式表 | 内部样式定义在 `defs` 元素内部                               |\n| 外部样式表 | 与 `html` 类似，将样式定义在 `css` 文件中，使用选择器来设置相应的元素样式 |\n| 表现属性   | `SVG` 允许以属性的形式指定表现样式，但是**表现属性的优先级最低**，如果以其他三种形式指定了相同的样式属性，则将覆盖通过表现属性指定的样式 |\n\n内部样式表示例：\n\n```xml\n<svg width=\"200px\" height=\"200px\" xmlns=\"http://www.w3.org/2000/svg>\n    <defs>\n        <style type=\"text/css\"><![CDATA[\n            circle{\n                fill:#ccc\n            }\n        ]]></style>\n    </defs>\n    <circle cx=\"10\" cy=\"10\" r=\"5\"/>\n</svg>\n```\n\n### 2. 分组和引用\n\n`g` 元素用来将其子元素作为一个组合，可以使文档结构更清晰。除此之外，在g标签中指定的所有样式会应用于组合内的所有子元素，可以不用在所有子元素上指定属性。\n\n`use` 元素用来复用图形中重复出现的元素，需要为 `use` 标签的 `xlink:href` 指定 `URI` 来引用指定的图形元素。同时还要指定`x`和`y`属性以表示组合应该移动到哪个位置。`use`元素并不限制只能使用同一个文件内的对象，`xlink:href`属性可以指定任何有效的文件或`URI`。\n\n`defs`元素用来定义复用的元素，但是定义在`defs`内的元素并不会被显示，而是作为模板供其他地方使用。\n\n`symbol`元素与g元素不同，`symbol`永远不会被显示，也可以用来指定被后续使用的元素，`symbol`元素可以指定 `viewBox` 和`preserveAspectRatio` 属性。在引用时通过为 `use` 元素指定 `width` 和 `height` 属性就可以让 `symbol` 元素适配视口大小。\n\n`image` 可以用来包含一个完整的 `SVG` 或栅格文件。如果包含一个 `SVG` 文件，则视口会基于引用的文件的 `x`,`y`,`width`,`height` 属性来建立。如果包含栅格文件则会被缩放以适配该属性指定的矩形。\n\n`SVG`规范要求 `SVG` 阅读器支持 `JPEG` 和 `PNG` 两种栅格文件。\n\n## 六、坐标系统变换\n\n### 1. translate变换\n\n`translate` 变换用来对用户坐标进行平移，通过制定 `transform` 属性值来设置: `transform = \"translate(x,y)\"`。\n\n`translate` 工作原理:首先获取整个网络，然后将其移动到画布的新位置而不是移动所在的元素，也就是说移动的是整个坐标系统而不是元素本身。看似比移动元素复杂，其实在使用其他一系列变换时，这种移动整个坐标系的方法从数学和概念上讲，更方便。\n\n### 2. scale变换\n\n缩放坐标系统。`transform = \"scale(value)\"` 或者 `transform=\"scale(x-value,y-value)\"`。\n\n仅仅使用 `scale(n)` 变换时，网格系统的原点位置并没有变化，只是每个用户坐标都变成了原来的 `n` 倍，也就是网格变大了，因此线也会变粗(用户单位并没有变)。\n\n*技巧：如果从其他系统传输数据到 `SVG`，则可能必须处理使用笛卡尔坐标表示的矢量图形，在笛卡尔坐标系统中，原点位于左下角，`y`向上递增，`x`向右递增。而 `SVG` 坐标原点位于左上角，此时使用 `scale(1,-1)` 就可以完成两者之间的转换。*\n\n**缩放变换永远不会改变图形对象的网格坐标或者笔画宽度，仅仅改变对应画布上的坐标系统网格的大小。**\n\n### 3. rotate变换\n\n根据指定的角度旋转坐标系统，默认的坐标系统中，角度的测量顺时针增加，`0` 度为 `3` 点钟方向。\n\n注意，除非另行指定，否则旋转以原点为中心。 此时可以通过平移+旋转的方式来指定旋转中心： `translate(centerX,centerY) rotate(angle) translate(-centerX,-centerY)`\n\n但是有个更简单的方式：`rotate(angle,centerX,centerY)`\n\n### 4. 围绕中心点缩放\n\n上面提到，缩放默认是以原点为基准的，这显然不能满足需求，那么可以通过如下方式指定缩放中心：\n\n```\ntranslate(-centerX*(factor-1),-centerY*(factor-1)) scale(factor)\n```\n\n### 5. skewX和skewY变换\n\n这两个变换用来倾斜某个轴，一般形式为 `skewX(angle),skewY(angle)`。这样的结果就是使得 `x` 轴和 `y` 轴不再垂直。\n\n### 6. 矩阵变换\n\n计算机图形学中坐标变换都通过矩阵来实现，除上述变换方法之外，还可以直接为变换指定变换矩阵，变换矩阵为 `matrix(a,b,c,d,e,f)`，此时指定的变换矩阵为:\n\n```text\na  c  e\nb  d  f\n0  0  1\n```\n\n## 七、路径\n\n### 1. path命令\n\n`SVG` 中所有基本形状都是 `path` 的简写形式，但是建议使用简写形式，因为这样可以使 `SVG` 文档更可读。\n\n`path` 元素更通用，可以通过制定一系列相互连接的线、弧、曲线来绘制任意形状的轮廓，这些轮廓也可以填充或者绘制轮廓线，也可以用来定义裁剪区域或蒙版。\n\n下表为 `path` 命令总结，其中大写表示绝对坐标，小写表示相对坐标：\n\n| 命令    | 参数                                        | 说明                                                         |\n| ------- | ------------------------------------------- | ------------------------------------------------------------ |\n| `M` `m` | `x y`                                       | 移动画笔到制定坐标                                           |\n| `L` `l` | `x y`                                       | 绘制一条到给定坐标的线                                       |\n| `H` `h` | `x`                                         | 绘制一条到给定 `x` 坐标的横线                                |\n| `V` `v` | `y`                                         | 绘制一条到给定`y`坐标的垂线                                  |\n| `A` `a` | `rx ry x-axis-rotation large-arc sweep x y` | 圆弧曲线命令有7个参数，依次表示`x`方向半径、`y`方向半径、旋转角度、大圆标识、顺逆时针标识、目标点`x`、目标点`y`。大圆标识和顺逆时针以`0`和`1`表示。`0`表示小圆、逆时针 |\n| `Q` `q` | `x1 y1 x y`                                 | 绘制一条从当前点到`x, y`控制点为`x1, y1`的二次贝塞尔曲线     |\n| `T` `t` | `x y`                                       | 绘制一条从当前点到`x`,`y`的光滑二次贝塞尔曲线，控制点为前一个`Q`命令的控制点的中心对称点，如果没有前一条则已当前点为控制点。 |\n| `C` `c` | `x1 y1 x2 y2 x y`                           | 绘制一条从当前点到 `x`,`y`控制点为`x1,y1` `x2,y2`的三次贝塞尔曲线 |\n| `S` `s` | `x2 y2 x y`                                 | 绘制一条从当前点到`x,y`的光滑三次贝塞尔曲线。第一个控制点为前一个`C`命令的第二个控制点的中心对称点，如果没有前一条曲线，则第一个控制点为当前的点。 |\n\n路径的填充同样可以使用 `fill-rule` 属性指定填充规则，如果需要填充一个中空的形状，则只需要注意外侧路径顺逆时针方向和内侧空心区域顺逆时针方向即可。\n\n## 八、渐变\n\n### 1. 线性渐变\n\n线性渐变是一系列颜色沿着一条直线过渡，在特定的位置指定想要的颜色，被称为渐变点。渐变点是渐变结构的一部分，颜色是表现的一部分。\n\n线性渐变使用`linearGradient`元素表示：\n\n```xml\n<defs>\n\t<linearGradient id=\"linear\">\n\t\t<stop offset=\"0%\" style=\"stop-color:#ffcc00;\"></stop>\n\t\t<stop offset=\"100%\" style=\"stop-color:#0099cc;\"></stop>\n\t</linearGradient>\n</defs>\n\t<rect x=\"20\" y=\"20\" width=\"200\" height=\"100\" style=\"fill:url(#linear);stroke:black;\"></rect>\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.4.jpg)\n\n`stop`元素有两个必要属性：`offset`和`stop-color`。`offset`属性用来指定在哪个点的颜色应该等于`stop-color`。`offset`的取值范围0%-100%。\n\n`stop`元素的属性：\n\n| 属性           | 说明                             |\n| -------------- | -------------------------------- |\n| `offset`       | 必需，取值范围 `0%-100%`         |\n| `stop-color`   | 必需，对应 `offset` 位置点的颜色 |\n| `stop-opacity` | 对应 `offset` 位置点的不透明度   |\n\n`linearGradient`元素属性：\n\n| 属性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `x1`,`y1`      | 渐变的起点位置，使用百分比表示，默认的渐变方向是从左到右     |\n| `x2`,`y2`      | 渐变的终点位置，使用百分比表示                               |\n| `spreadMethod` | 如果设置的`offset`不能覆盖整个对象，该怎么填充。`pad`: 起点或终点颜色会扩展到对象边缘。`repeat`: 渐变重复起点到终点的过程。`reflect`: 渐变按终点-起点-终点的排列重复。 |\n\n### 2. 径向渐变\n\n径向渐变的每个渐变点是一个圆形路径，从中心点向外扩散。设置方式与线性渐变大致相同。如果填充对象边界框不是正方形的，则过渡路径会变成椭圆来匹配边界框的长宽比。\n\n```xml\n<defs>\n\t<radialGradient id=\"radial\" cx=\"50%\" cy=\"50%\" >\n\t\t<stop offset=\"0%\" style=\"stop-color:#f00;\"></stop>\n\t\t<stop offset=\"50%\" style=\"stop-color:#0f0;\"></stop>\n\t\t<stop offset=\"100%\" style=\"stop-color:#00f;\"></stop>\n\t</radialGradient>\n</defs>\n<rect x=\"20\" y=\"20\" width=\"200\" height=\"200\" style=\"fill:url(#radial);stroke:black;\"></rect>\t\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.5.jpg)\n\n`radialGradient`元素属性：\n\n| 属性           | 说明                                                         |\n| -------------- | ------------------------------------------------------------ |\n| `cx`,`cy`,`r`  | 定义渐变的范围，测量半径的单位是对象的宽高均值，而不是对角线，默认都为`50%` |\n| `fx`,`fy`      | `0%`点所处的圆路径的圆心，默认和`cx`,`cy`一样                |\n| `spreadMethod` | `pad`,`repeat`,`reflect` 三个值，用来解决绘制范围没有到达图形边缘的情况。 |\n\n## 九、文本\n\n### 1. 相关术语\n\n| 术语                  | 说明                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| 字符                  | `XML`中，字符是指带有一个数字值得一个或多个字节，数字值与`Unidode`标准对应 |\n| 符号                  | 字符的视觉呈现。每个字符可以有多种视觉呈现                   |\n| 字体                  | 代表某个字符集合的一组符号                                   |\n| 基线                  | 字体中所有符号以基线对齐                                     |\n| 上坡度                | 基线到字体中最高字符的顶部距离                               |\n| 下坡度                | 基线到最深字符底部的距离                                     |\n| 大写字母高度、`x`高度 | 大写字母高度是指基线上大写字母的高度，`x`高度是基线到小写字母`x`顶部的高度 |\n\n### 2. 文本元素的基本属性\n\n`text` 元素以指定的x和y值作为元素内容第一个字符的基线位置，默认样式黑色填充、没有轮廓。\n\n| 属性              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `font-family`     | 以空格分割的一系列字体名称或通用字体名称                     |\n| `font-size`       | 如果有多行文本，则 `font-size` 为平行的两条基线的距离        |\n| `font-weight`     | 两个值：`bold`(粗体)和`nromal`(默认)                         |\n| `font-style`      | 常用的两个值:`italic`(斜体)和`normal`                        |\n| `text-decoration` | 可能的值:`none`,`underline`(下划线),`overline`(上划线),`line-through`(删除线) |\n| `word-spacing`    | 单词之间的距离                                               |\n| `letter-spacing`  | 字母之间的间距                                               |\n| `text-anchor`     | 对齐方式：`start`,`middle`,`end`                             |\n| `textLength`      | 设置文本的长度                                               |\n| `lengthAdjust`    | 在指定了`textLength`时，可以通过`lengthAdjust`属性设置字符的调整方式，值为 `spacing`(默认)时,只调整字符的间距。当值为`spacingAndGlyphs`时，同时调整字符间距和字符本身的大小 |\n\n### 3. tspan元素\n\n`text` 元素无法对文本进行换行操作，如果需要分行显示文本，则需要使用在text元素里嵌入`tspan` 元素。`tspan` 元素与`html`的`span`元素类似，可以嵌套在文本内容中，并可以单独改变其内部文本内容的样式。\n\n`tspan`元素除大小，颜色等表现样式之外，还可以设置以下属性：\n\n| 属性             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| `dx`,`dy`        | `x`和`y`方向的偏移                                           |\n| `x`,`y`          | 对`tspan`进行绝对定位                                        |\n| `rotate`         | 旋转字符，可以同时设置多个值，这些值会依次作用在`tspan`包裹的字母上 |\n| `baseline-shift` | 与`dy`属性设置上下标相比，这个属性更方便，当为`super`时，会上标。`sub` 时为下标。仅仅在所在的`tspan`内有效 |\n\n### 4. 纵向文本\n\n文本一般从左到右排列，如果需要上下排列，则需要使用`writing-mode`属性。\n\n设置`writing-mode`属性值为`tb`(top to bottom)，可以将文本上下排列。\n\n## 5. 文本路径\n\n如果要使得文本沿着某条路径排列，则需要使用`textPath`元素。需要将文本放在`textPath`元素内部，然后使用`textPath`元素的`xlink:href`属性引用一个定义好的`path`元素。\n\n```xml\n<defs>\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n</defs>\n<g transform=\"translate(10,50)\">\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n\t<text>\n\t\t<textPath xlink:href=\"#path\">\n\t\t\thello world\n\t\t</textPath>\n\t</text>\n</g>\n<g transform=\"translate(10,100)\">\n\t<path id=\"path\" d=\"M30 40 C 50 10 ,70 10,120 40 S150 0,200 40\" style=\"fill:none;stroke:black\"></path>\n\t<text>\n\t\t<textPath xlink:href=\"#path\" startOffset=\"50%\" text-anchor=\"middle\">\n\t\t\thello world\n\t\t</textPath>\n\t</text>\n</g>\n```\n\n![img](http://cdn.d3js.org.cn/images/doc/svg/8.6.jpg)\n\n`startOffset`属性用来指定文本的起点，当设置为`50%`，并且设置`text-anchor`为`middle`时，文本会被定为在`path`的中间。","slug":"svg","published":1,"date":"2021-09-22T03:34:56.188Z","updated":"2021-10-12T03:01:44.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckuq9v3ph000ggxuq94gs1ul1","content":"<h2 id=\"一、入门指南\"><a href=\"#一、入门指南\" class=\"headerlink\" title=\"一、入门指南\"></a>一、入门指南</h2><h3 id=\"1-图形系统\"><a href=\"#1-图形系统\" class=\"headerlink\" title=\"1. 图形系统\"></a>1. 图形系统</h3><p>计算机中描述图形信息的两大图形系统：栅格图形和矢量图形。栅格图形中图形被表示为图片元素或者像素的长方形数组。矢量图形中图形被描述为一系列几何形状，通过矢量图形阅读器在指定的坐标集上绘制形状。</p>\n<h3 id=\"2-SVG-Scalable-Vector-Graphics\"><a href=\"#2-SVG-Scalable-Vector-Graphics\" class=\"headerlink\" title=\"2. SVG(Scalable Vector Graphics)\"></a>2. SVG(Scalable Vector Graphics)</h3><p>SVG<code>是一种</code>XML<code>应用，用来表示矢量图形。所有的图形有关信息被存储为纯文本，具有XML的开放性、可移植性和可交互性。当前稳定的</code>XML<code>和</code>SVG<code>版本都为</code>1.1</p>\n<p>SVG文档结构是标准的 <code>XML</code> 文档，根元素 <code>svg</code> 定义图形的大小，根元素中包含各种的形状元素。<code>SVG</code> 允许使用单独的属性指定元素的样式。</p>\n<p><code>SVG</code> 使用 <code>g</code> 元素对图形进行分组，使用 <code>use</code> 元素实现元素的复用。</p>\n<h2 id=\"二、在网页中使用\"><a href=\"#二、在网页中使用\" class=\"headerlink\" title=\"二、在网页中使用\"></a>二、在网页中使用</h2><h3 id=\"1-将SVG作为图像\"><a href=\"#1-将SVG作为图像\" class=\"headerlink\" title=\"1. 将SVG作为图像\"></a>1. 将SVG作为图像</h3><p>将 <code>svg</code> 作为图像包含在HTML标记的 <code>img</code> 元素内，但是这样有一定的局限性：</p>\n<p><strong><code>SVG</code>转为栅格图像时与主页面分离，并且无法在两者之间通信( <code>SVG</code> 渲染过程与主页面独立)。主页面上的样式对 <code>SVG</code> 无效，运行在主页面上的脚本无法感知或者修改 <code>SVG</code> 文档结构。</strong></p>\n<p>在 <code>CSS</code> 中包含 <code>SVG</code>，最常用的是 <code>background-image</code> 属性，应该避免 <code>SVG</code> 元素文件太大。</p>\n<h3 id=\"2-将SVG作为应用程序\"><a href=\"#2-将SVG作为应用程序\" class=\"headerlink\" title=\"2. 将SVG作为应用程序\"></a>2. 将SVG作为应用程序</h3><p>使用 <code>object</code> 元素将 <code>SVG</code> 嵌入 <code>HTML</code> 文档中，<code>object</code>元素的 <code>type</code> 属性表示要嵌入的文档类型，对用 <code>SVG</code> 应该是<code>type=&quot;image/svg+xml&quot;</code>。<code>object</code> 元素必须有起始标签和结束标签，这两个标签之间的内容为对象数据本身不能被渲染时显示。</p>\n<h2 id=\"三、坐标系统\"><a href=\"#三、坐标系统\" class=\"headerlink\" title=\"三、坐标系统\"></a>三、坐标系统</h2><h3 id=\"1-视口\"><a href=\"#1-视口\" class=\"headerlink\" title=\"1. 视口\"></a>1. 视口</h3><p>视口是指文档打算使用的画布区域。在 <code>svg</code> 元素上使用 <code>width</code> 和 <code>height</code> 属性确定视口的大小，属性值可以仅仅是为数字也可以为带单位的数字(单位可以为<code>em</code>、<code>ex</code>、<code>px</code>、<code>pt</code>、<code>pc</code>、<code>cm</code>、<code>mm</code> 和 <code>in</code>)也可以为百分比。</p>\n<h3 id=\"2-默认用户坐标\"><a href=\"#2-默认用户坐标\" class=\"headerlink\" title=\"2. 默认用户坐标\"></a>2. 默认用户坐标</h3><p><code>SVG</code> 阅读器会设置一个坐标系统，即原点 <code>(0,0)</code> 位于视口的左上角，<code>x</code> 向右递增，<code>y</code> 向下递增。这个坐标系统是一个纯粹的几何系统，点没有大小，网格线被认为是无限细。</p>\n<p>在 <code>SVG</code> 中指定单位并不会影响其他元素中给定单位的坐标，也就是说 <code>SVG</code> 文档中各个元素的单位可以不统一。</p>\n<h3 id=\"3-指定用户坐标\"><a href=\"#3-指定用户坐标\" class=\"headerlink\" title=\"3. 指定用户坐标\"></a>3. 指定用户坐标</h3><p>摒弃阅读器设置的默认用户坐标，可以自己为视口设置一个用户坐标。通过在 <code>svg</code> 元素上设置 <code>viewBox</code> 属性。</p>\n<p><code>viewBox</code> 属性由 <code>4</code> 个数值组成，分别代表要叠加在视口上的最小 <code>x</code>、最小 <code>y</code>，宽度、高度。</p>\n<p>既然可以对 <code>svg</code> 自定义用户坐标，那么肯定要解决 <code>svg</code> 视口长宽比例和 <code>viewBox</code> 定义的长宽比例不同的问题以及如何对齐问题。这个时候就需要 <code>preserveAspectRatio</code> 属性了。</p>\n<p>如果 <code>viewBox</code> 的长宽比例与视口的长宽比例不同，那么 <code>svg</code> 可以有以下三种选择：</p>\n<ul>\n<li>按较小的尺寸等比例缩放图形，使图形完全填充视口</li>\n<li>按较大的尺寸等比例缩放图形，病裁减掉超出视口的部分</li>\n<li>拉伸和压缩绘图以使其恰好填充视口</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">preserveAspectRatio&#96; 属性允许指定被缩放的图形相对视口的对齐方式,格式为 &#96;preserveAspectRatio &#x3D; &quot;alignment[meet|slice]&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>默认值为 <code>&quot;xMidYMid meet&quot;</code></p>\n<p><code>alignment</code>指定轴和位置，<code>x</code> 和 <code>y</code> 方向都有 <code>min</code>, <code>mid</code>, <code>max</code> 三种方式，分别表示 <code>x</code> 和 <code>y</code> 方向的对齐方式，对齐方式由 <code>x</code> 和 <code>y</code> 组合指定，共 <code>9</code> 中方式，也就是 <code>alignment</code> 共有如下 <code>9</code> 个取值：</p>\n<table>\n<thead>\n<tr>\n<th>y\\x</th>\n<th>xMin</th>\n<th>xMid</th>\n<th>xMax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>yMin</strong></td>\n<td>xMinYMin</td>\n<td>xMidYMin</td>\n<td>xMaxYMin</td>\n</tr>\n<tr>\n<td><strong>yMid</strong></td>\n<td>xMinYMid</td>\n<td>xMidYMid</td>\n<td>xMaxYMid</td>\n</tr>\n<tr>\n<td><strong>yMax</strong></td>\n<td>xMinYMax</td>\n<td>xMidYMax</td>\n<td>xMaxYMax</td>\n</tr>\n</tbody></table>\n<p><code>meet</code> 说明符在图形超出视口时候会对图形适当缩小调整适配可用的空间</p>\n<p><code>slice</code> 说明符直接裁剪超出视口的部分</p>\n<p>除了上述操作之外，还可以指定 <code>preserveAspectRatio=&quot;none&quot;</code>，用于在 <code>viewBox</code> 和视口宽高比不同时缩放图像，此时图像不会被等比例缩放，会被拉伸、挤压、变形。</p>\n<h3 id=\"4-嵌套坐标系统\"><a href=\"#4-嵌套坐标系统\" class=\"headerlink\" title=\"4. 嵌套坐标系统\"></a>4. 嵌套坐标系统</h3><p>可以将另一个 <code>svg</code> 元素插入到文档中来建立一个新的视口和坐标系统，也就是说 <code>svg</code> 中可以嵌套另一个 <code>svg</code>，每个 <code>svg</code> 都有自己独立的视口和坐标系统</p>\n<h2 id=\"四、基本形状\"><a href=\"#四、基本形状\" class=\"headerlink\" title=\"四、基本形状\"></a>四、基本形状</h2><h3 id=\"1-线段\"><a href=\"#1-线段\" class=\"headerlink\" title=\"1. 线段\"></a>1. 线段</h3><p><code>line</code> 元素，使用 <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> 属性指定线段的起止点坐标。有如下特性:</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>stroke-width</code></td>\n<td>笔画宽度，坐标网格线位于笔画的正中间，可以使用 <code>css</code> 的 <code>shape-rendering</code> 值来控制反锯齿特性</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>笔画颜色</td>\n</tr>\n<tr>\n<td><code>stroke-opacity</code></td>\n<td>线条的不透明度</td>\n</tr>\n<tr>\n<td><code>stroke-dasharray</code></td>\n<td>虚线，由一系列数字组成，数字个数为偶数(负责会自动重复一遍使其为偶数),表示线长-间隙-线长-间隙…</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-矩形\"><a href=\"#2-矩形\" class=\"headerlink\" title=\"2. 矩形\"></a>2. 矩形</h3><p><code>rect</code>元素，使用<code>x</code>,<code>y</code>,<code>width</code>,<code>height</code>表示一个矩形</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度，边框是骑在矩形边界上的，一半在矩形外，一半在矩形内</td>\n</tr>\n<tr>\n<td><code>rx</code>/<code>ry</code></td>\n<td>圆角矩形，最大值为矩形宽/高的一半，如果只指定了一个，则认为两个都为相同的值</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-圆和椭圆\"><a href=\"#3-圆和椭圆\" class=\"headerlink\" title=\"3. 圆和椭圆\"></a>3. 圆和椭圆</h3><p><code>circle</code> 元素表示圆,由 <code>cx</code>,<code>cy</code>,<code>r</code> 属性界定 <code>ellipse</code> 元素表示椭圆,由 <code>cx</code>,<code>cy</code>,<code>rx</code>,<code>ry</code> 界定</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度，边框是骑在圆的边界上的，一半在圆/椭圆外，一半在圆/椭圆内</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-多边形\"><a href=\"#4-多边形\" class=\"headerlink\" title=\"4. 多边形\"></a>4. 多边形</h3><p><code>polygon</code> 元素指定一个多边形,由 <code>points</code> 属性指定的一系列坐标点界定，会自动封闭</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度</td>\n</tr>\n<tr>\n<td><code>fill-rule</code></td>\n<td>填充规则，如果多边形的边有交叉时，需要指定，可以取 <code>mozero</code>(默认)和 <code>evenodd</code> 两个值。</td>\n</tr>\n</tbody></table>\n<p><code>fill-rule</code> 值为 <code>nonzero</code> 时的原理:判断一个点是在多边形内部还是外部时，从这个点画一条到无穷远的射线，然后数这个线和多边形的边有多少次交叉。如果交叉的边线是从右往左画，则总数加 <code>1</code>，如果是从左往右则总数减 <code>1</code>. 如果最后总数为 <code>0</code> 则认为改点在图形外部，否则在内部。</p>\n<p><code>fill-rule</code> 值为 <code>evenodd</code> 时只数射线与多边形边的交叉次数，如果为奇数则认为在多边形内部，否则认为在多边形外部。</p>\n<h3 id=\"5-折线\"><a href=\"#5-折线\" class=\"headerlink\" title=\"5. 折线\"></a>5. 折线</h3><p><code>polyline</code> 元素表示一个折线，使用 <code>points</code> 属性指定一系列点，不自动封闭图形。</p>\n<h3 id=\"6-特性总结\"><a href=\"#6-特性总结\" class=\"headerlink\" title=\"6. 特性总结\"></a>6. 特性总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>stroke</code></td>\n<td>笔画颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>笔画宽度</td>\n</tr>\n<tr>\n<td><code>stroke-opacity</code></td>\n<td>笔画不透明度</td>\n</tr>\n<tr>\n<td><code>stroke-dasharray</code></td>\n<td>虚线笔画</td>\n</tr>\n<tr>\n<td><code>stroke-linecap</code></td>\n<td>笔画头的形状 <code>butt</code>(默认),<code>round</code>,<code>square</code></td>\n</tr>\n<tr>\n<td><code>stroke-linejoin</code></td>\n<td>图形棱角，有<code>miter</code>(默认),<code>round</code>和<code>bevel</code>三个取值</td>\n</tr>\n<tr>\n<td><code>stroke-miterlimit</code></td>\n<td>相交处显示宽度与线宽的最大比例，默认为<code>4</code></td>\n</tr>\n<tr>\n<td><code>fill</code></td>\n<td>填充颜色 默认<code>black</code></td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>fill-rule</code></td>\n<td>填充规则</td>\n</tr>\n</tbody></table>\n<h2 id=\"五、文档结构\"><a href=\"#五、文档结构\" class=\"headerlink\" title=\"五、文档结构\"></a>五、文档结构</h2><h3 id=\"1-结构和表现\"><a href=\"#1-结构和表现\" class=\"headerlink\" title=\"1. 结构和表现\"></a>1. 结构和表现</h3><p><code>SVG</code> 允许文档表现和文档结构分离，<code>SVG</code> 支持四种方式指定表现信息：内联样式、内部样式表、外部样式表以及表现属性</p>\n<table>\n<thead>\n<tr>\n<th>表现方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内联样式</td>\n<td>元素内部使用 <code>style</code> 属性</td>\n</tr>\n<tr>\n<td>内部样式表</td>\n<td>内部样式定义在 <code>defs</code> 元素内部</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>与 <code>html</code> 类似，将样式定义在 <code>css</code> 文件中，使用选择器来设置相应的元素样式</td>\n</tr>\n<tr>\n<td>表现属性</td>\n<td><code>SVG</code> 允许以属性的形式指定表现样式，但是<strong>表现属性的优先级最低</strong>，如果以其他三种形式指定了相同的样式属性，则将覆盖通过表现属性指定的样式</td>\n</tr>\n</tbody></table>\n<p>内部样式表示例：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;svg width=\"200px\" height=\"200px\" xmlns=\"http://www.w3.org/2000/svg>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[\n            circle&#123;\n                fill:#ccc\n            &#125;\n        ]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-分组和引用\"><a href=\"#2-分组和引用\" class=\"headerlink\" title=\"2. 分组和引用\"></a>2. 分组和引用</h3><p><code>g</code> 元素用来将其子元素作为一个组合，可以使文档结构更清晰。除此之外，在g标签中指定的所有样式会应用于组合内的所有子元素，可以不用在所有子元素上指定属性。</p>\n<p><code>use</code> 元素用来复用图形中重复出现的元素，需要为 <code>use</code> 标签的 <code>xlink:href</code> 指定 <code>URI</code> 来引用指定的图形元素。同时还要指定<code>x</code>和<code>y</code>属性以表示组合应该移动到哪个位置。<code>use</code>元素并不限制只能使用同一个文件内的对象，<code>xlink:href</code>属性可以指定任何有效的文件或<code>URI</code>。</p>\n<p><code>defs</code>元素用来定义复用的元素，但是定义在<code>defs</code>内的元素并不会被显示，而是作为模板供其他地方使用。</p>\n<p><code>symbol</code>元素与g元素不同，<code>symbol</code>永远不会被显示，也可以用来指定被后续使用的元素，<code>symbol</code>元素可以指定 <code>viewBox</code> 和<code>preserveAspectRatio</code> 属性。在引用时通过为 <code>use</code> 元素指定 <code>width</code> 和 <code>height</code> 属性就可以让 <code>symbol</code> 元素适配视口大小。</p>\n<p><code>image</code> 可以用来包含一个完整的 <code>SVG</code> 或栅格文件。如果包含一个 <code>SVG</code> 文件，则视口会基于引用的文件的 <code>x</code>,<code>y</code>,<code>width</code>,<code>height</code> 属性来建立。如果包含栅格文件则会被缩放以适配该属性指定的矩形。</p>\n<p><code>SVG</code>规范要求 <code>SVG</code> 阅读器支持 <code>JPEG</code> 和 <code>PNG</code> 两种栅格文件。</p>\n<h2 id=\"六、坐标系统变换\"><a href=\"#六、坐标系统变换\" class=\"headerlink\" title=\"六、坐标系统变换\"></a>六、坐标系统变换</h2><h3 id=\"1-translate变换\"><a href=\"#1-translate变换\" class=\"headerlink\" title=\"1. translate变换\"></a>1. translate变换</h3><p><code>translate</code> 变换用来对用户坐标进行平移，通过制定 <code>transform</code> 属性值来设置: <code>transform = &quot;translate(x,y)&quot;</code>。</p>\n<p><code>translate</code> 工作原理:首先获取整个网络，然后将其移动到画布的新位置而不是移动所在的元素，也就是说移动的是整个坐标系统而不是元素本身。看似比移动元素复杂，其实在使用其他一系列变换时，这种移动整个坐标系的方法从数学和概念上讲，更方便。</p>\n<h3 id=\"2-scale变换\"><a href=\"#2-scale变换\" class=\"headerlink\" title=\"2. scale变换\"></a>2. scale变换</h3><p>缩放坐标系统。<code>transform = &quot;scale(value)&quot;</code> 或者 <code>transform=&quot;scale(x-value,y-value)&quot;</code>。</p>\n<p>仅仅使用 <code>scale(n)</code> 变换时，网格系统的原点位置并没有变化，只是每个用户坐标都变成了原来的 <code>n</code> 倍，也就是网格变大了，因此线也会变粗(用户单位并没有变)。</p>\n<p><em>技巧：如果从其他系统传输数据到 <code>SVG</code>，则可能必须处理使用笛卡尔坐标表示的矢量图形，在笛卡尔坐标系统中，原点位于左下角，<code>y</code>向上递增，<code>x</code>向右递增。而 <code>SVG</code> 坐标原点位于左上角，此时使用 <code>scale(1,-1)</code> 就可以完成两者之间的转换。</em></p>\n<p><strong>缩放变换永远不会改变图形对象的网格坐标或者笔画宽度，仅仅改变对应画布上的坐标系统网格的大小。</strong></p>\n<h3 id=\"3-rotate变换\"><a href=\"#3-rotate变换\" class=\"headerlink\" title=\"3. rotate变换\"></a>3. rotate变换</h3><p>根据指定的角度旋转坐标系统，默认的坐标系统中，角度的测量顺时针增加，<code>0</code> 度为 <code>3</code> 点钟方向。</p>\n<p>注意，除非另行指定，否则旋转以原点为中心。 此时可以通过平移+旋转的方式来指定旋转中心： <code>translate(centerX,centerY) rotate(angle) translate(-centerX,-centerY)</code></p>\n<p>但是有个更简单的方式：<code>rotate(angle,centerX,centerY)</code></p>\n<h3 id=\"4-围绕中心点缩放\"><a href=\"#4-围绕中心点缩放\" class=\"headerlink\" title=\"4. 围绕中心点缩放\"></a>4. 围绕中心点缩放</h3><p>上面提到，缩放默认是以原点为基准的，这显然不能满足需求，那么可以通过如下方式指定缩放中心：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">translate(-centerX*(factor-1),-centerY*(factor-1)) scale(factor)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-skewX和skewY变换\"><a href=\"#5-skewX和skewY变换\" class=\"headerlink\" title=\"5. skewX和skewY变换\"></a>5. skewX和skewY变换</h3><p>这两个变换用来倾斜某个轴，一般形式为 <code>skewX(angle),skewY(angle)</code>。这样的结果就是使得 <code>x</code> 轴和 <code>y</code> 轴不再垂直。</p>\n<h3 id=\"6-矩阵变换\"><a href=\"#6-矩阵变换\" class=\"headerlink\" title=\"6. 矩阵变换\"></a>6. 矩阵变换</h3><p>计算机图形学中坐标变换都通过矩阵来实现，除上述变换方法之外，还可以直接为变换指定变换矩阵，变换矩阵为 <code>matrix(a,b,c,d,e,f)</code>，此时指定的变换矩阵为:</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">a  c  e\nb  d  f\n0  0  1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"七、路径\"><a href=\"#七、路径\" class=\"headerlink\" title=\"七、路径\"></a>七、路径</h2><h3 id=\"1-path命令\"><a href=\"#1-path命令\" class=\"headerlink\" title=\"1. path命令\"></a>1. path命令</h3><p><code>SVG</code> 中所有基本形状都是 <code>path</code> 的简写形式，但是建议使用简写形式，因为这样可以使 <code>SVG</code> 文档更可读。</p>\n<p><code>path</code> 元素更通用，可以通过制定一系列相互连接的线、弧、曲线来绘制任意形状的轮廓，这些轮廓也可以填充或者绘制轮廓线，也可以用来定义裁剪区域或蒙版。</p>\n<p>下表为 <code>path</code> 命令总结，其中大写表示绝对坐标，小写表示相对坐标：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>M</code> <code>m</code></td>\n<td><code>x y</code></td>\n<td>移动画笔到制定坐标</td>\n</tr>\n<tr>\n<td><code>L</code> <code>l</code></td>\n<td><code>x y</code></td>\n<td>绘制一条到给定坐标的线</td>\n</tr>\n<tr>\n<td><code>H</code> <code>h</code></td>\n<td><code>x</code></td>\n<td>绘制一条到给定 <code>x</code> 坐标的横线</td>\n</tr>\n<tr>\n<td><code>V</code> <code>v</code></td>\n<td><code>y</code></td>\n<td>绘制一条到给定<code>y</code>坐标的垂线</td>\n</tr>\n<tr>\n<td><code>A</code> <code>a</code></td>\n<td><code>rx ry x-axis-rotation large-arc sweep x y</code></td>\n<td>圆弧曲线命令有7个参数，依次表示<code>x</code>方向半径、<code>y</code>方向半径、旋转角度、大圆标识、顺逆时针标识、目标点<code>x</code>、目标点<code>y</code>。大圆标识和顺逆时针以<code>0</code>和<code>1</code>表示。<code>0</code>表示小圆、逆时针</td>\n</tr>\n<tr>\n<td><code>Q</code> <code>q</code></td>\n<td><code>x1 y1 x y</code></td>\n<td>绘制一条从当前点到<code>x, y</code>控制点为<code>x1, y1</code>的二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>T</code> <code>t</code></td>\n<td><code>x y</code></td>\n<td>绘制一条从当前点到<code>x</code>,<code>y</code>的光滑二次贝塞尔曲线，控制点为前一个<code>Q</code>命令的控制点的中心对称点，如果没有前一条则已当前点为控制点。</td>\n</tr>\n<tr>\n<td><code>C</code> <code>c</code></td>\n<td><code>x1 y1 x2 y2 x y</code></td>\n<td>绘制一条从当前点到 <code>x</code>,<code>y</code>控制点为<code>x1,y1</code> <code>x2,y2</code>的三次贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>S</code> <code>s</code></td>\n<td><code>x2 y2 x y</code></td>\n<td>绘制一条从当前点到<code>x,y</code>的光滑三次贝塞尔曲线。第一个控制点为前一个<code>C</code>命令的第二个控制点的中心对称点，如果没有前一条曲线，则第一个控制点为当前的点。</td>\n</tr>\n</tbody></table>\n<p>路径的填充同样可以使用 <code>fill-rule</code> 属性指定填充规则，如果需要填充一个中空的形状，则只需要注意外侧路径顺逆时针方向和内侧空心区域顺逆时针方向即可。</p>\n<h2 id=\"八、渐变\"><a href=\"#八、渐变\" class=\"headerlink\" title=\"八、渐变\"></a>八、渐变</h2><h3 id=\"1-线性渐变\"><a href=\"#1-线性渐变\" class=\"headerlink\" title=\"1. 线性渐变\"></a>1. 线性渐变</h3><p>线性渐变是一系列颜色沿着一条直线过渡，在特定的位置指定想要的颜色，被称为渐变点。渐变点是渐变结构的一部分，颜色是表现的一部分。</p>\n<p>线性渐变使用<code>linearGradient</code>元素表示：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>linearGradient</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>linear<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#ffcc00;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#0099cc;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>linearGradient</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:url(#linear);stroke:black;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.4.jpg\" alt=\"img\"></p>\n<p><code>stop</code>元素有两个必要属性：<code>offset</code>和<code>stop-color</code>。<code>offset</code>属性用来指定在哪个点的颜色应该等于<code>stop-color</code>。<code>offset</code>的取值范围0%-100%。</p>\n<p><code>stop</code>元素的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>offset</code></td>\n<td>必需，取值范围 <code>0%-100%</code></td>\n</tr>\n<tr>\n<td><code>stop-color</code></td>\n<td>必需，对应 <code>offset</code> 位置点的颜色</td>\n</tr>\n<tr>\n<td><code>stop-opacity</code></td>\n<td>对应 <code>offset</code> 位置点的不透明度</td>\n</tr>\n</tbody></table>\n<p><code>linearGradient</code>元素属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>x1</code>,<code>y1</code></td>\n<td>渐变的起点位置，使用百分比表示，默认的渐变方向是从左到右</td>\n</tr>\n<tr>\n<td><code>x2</code>,<code>y2</code></td>\n<td>渐变的终点位置，使用百分比表示</td>\n</tr>\n<tr>\n<td><code>spreadMethod</code></td>\n<td>如果设置的<code>offset</code>不能覆盖整个对象，该怎么填充。<code>pad</code>: 起点或终点颜色会扩展到对象边缘。<code>repeat</code>: 渐变重复起点到终点的过程。<code>reflect</code>: 渐变按终点-起点-终点的排列重复。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-径向渐变\"><a href=\"#2-径向渐变\" class=\"headerlink\" title=\"2. 径向渐变\"></a>2. 径向渐变</h3><p>径向渐变的每个渐变点是一个圆形路径，从中心点向外扩散。设置方式与线性渐变大致相同。如果填充对象边界框不是正方形的，则过渡路径会变成椭圆来匹配边界框的长宽比。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>radialGradient</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radial<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#f00;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#0f0;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#00f;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>radialGradient</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:url(#radial);stroke:black;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.5.jpg\" alt=\"img\"></p>\n<p><code>radialGradient</code>元素属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>cx</code>,<code>cy</code>,<code>r</code></td>\n<td>定义渐变的范围，测量半径的单位是对象的宽高均值，而不是对角线，默认都为<code>50%</code></td>\n</tr>\n<tr>\n<td><code>fx</code>,<code>fy</code></td>\n<td><code>0%</code>点所处的圆路径的圆心，默认和<code>cx</code>,<code>cy</code>一样</td>\n</tr>\n<tr>\n<td><code>spreadMethod</code></td>\n<td><code>pad</code>,<code>repeat</code>,<code>reflect</code> 三个值，用来解决绘制范围没有到达图形边缘的情况。</td>\n</tr>\n</tbody></table>\n<h2 id=\"九、文本\"><a href=\"#九、文本\" class=\"headerlink\" title=\"九、文本\"></a>九、文本</h2><h3 id=\"1-相关术语\"><a href=\"#1-相关术语\" class=\"headerlink\" title=\"1. 相关术语\"></a>1. 相关术语</h3><table>\n<thead>\n<tr>\n<th>术语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符</td>\n<td><code>XML</code>中，字符是指带有一个数字值得一个或多个字节，数字值与<code>Unidode</code>标准对应</td>\n</tr>\n<tr>\n<td>符号</td>\n<td>字符的视觉呈现。每个字符可以有多种视觉呈现</td>\n</tr>\n<tr>\n<td>字体</td>\n<td>代表某个字符集合的一组符号</td>\n</tr>\n<tr>\n<td>基线</td>\n<td>字体中所有符号以基线对齐</td>\n</tr>\n<tr>\n<td>上坡度</td>\n<td>基线到字体中最高字符的顶部距离</td>\n</tr>\n<tr>\n<td>下坡度</td>\n<td>基线到最深字符底部的距离</td>\n</tr>\n<tr>\n<td>大写字母高度、<code>x</code>高度</td>\n<td>大写字母高度是指基线上大写字母的高度，<code>x</code>高度是基线到小写字母<code>x</code>顶部的高度</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-文本元素的基本属性\"><a href=\"#2-文本元素的基本属性\" class=\"headerlink\" title=\"2. 文本元素的基本属性\"></a>2. 文本元素的基本属性</h3><p><code>text</code> 元素以指定的x和y值作为元素内容第一个字符的基线位置，默认样式黑色填充、没有轮廓。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>font-family</code></td>\n<td>以空格分割的一系列字体名称或通用字体名称</td>\n</tr>\n<tr>\n<td><code>font-size</code></td>\n<td>如果有多行文本，则 <code>font-size</code> 为平行的两条基线的距离</td>\n</tr>\n<tr>\n<td><code>font-weight</code></td>\n<td>两个值：<code>bold</code>(粗体)和<code>nromal</code>(默认)</td>\n</tr>\n<tr>\n<td><code>font-style</code></td>\n<td>常用的两个值:<code>italic</code>(斜体)和<code>normal</code></td>\n</tr>\n<tr>\n<td><code>text-decoration</code></td>\n<td>可能的值:<code>none</code>,<code>underline</code>(下划线),<code>overline</code>(上划线),<code>line-through</code>(删除线)</td>\n</tr>\n<tr>\n<td><code>word-spacing</code></td>\n<td>单词之间的距离</td>\n</tr>\n<tr>\n<td><code>letter-spacing</code></td>\n<td>字母之间的间距</td>\n</tr>\n<tr>\n<td><code>text-anchor</code></td>\n<td>对齐方式：<code>start</code>,<code>middle</code>,<code>end</code></td>\n</tr>\n<tr>\n<td><code>textLength</code></td>\n<td>设置文本的长度</td>\n</tr>\n<tr>\n<td><code>lengthAdjust</code></td>\n<td>在指定了<code>textLength</code>时，可以通过<code>lengthAdjust</code>属性设置字符的调整方式，值为 <code>spacing</code>(默认)时,只调整字符的间距。当值为<code>spacingAndGlyphs</code>时，同时调整字符间距和字符本身的大小</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-tspan元素\"><a href=\"#3-tspan元素\" class=\"headerlink\" title=\"3. tspan元素\"></a>3. tspan元素</h3><p><code>text</code> 元素无法对文本进行换行操作，如果需要分行显示文本，则需要使用在text元素里嵌入<code>tspan</code> 元素。<code>tspan</code> 元素与<code>html</code>的<code>span</code>元素类似，可以嵌套在文本内容中，并可以单独改变其内部文本内容的样式。</p>\n<p><code>tspan</code>元素除大小，颜色等表现样式之外，还可以设置以下属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>dx</code>,<code>dy</code></td>\n<td><code>x</code>和<code>y</code>方向的偏移</td>\n</tr>\n<tr>\n<td><code>x</code>,<code>y</code></td>\n<td>对<code>tspan</code>进行绝对定位</td>\n</tr>\n<tr>\n<td><code>rotate</code></td>\n<td>旋转字符，可以同时设置多个值，这些值会依次作用在<code>tspan</code>包裹的字母上</td>\n</tr>\n<tr>\n<td><code>baseline-shift</code></td>\n<td>与<code>dy</code>属性设置上下标相比，这个属性更方便，当为<code>super</code>时，会上标。<code>sub</code> 时为下标。仅仅在所在的<code>tspan</code>内有效</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-纵向文本\"><a href=\"#4-纵向文本\" class=\"headerlink\" title=\"4. 纵向文本\"></a>4. 纵向文本</h3><p>文本一般从左到右排列，如果需要上下排列，则需要使用<code>writing-mode</code>属性。</p>\n<p>设置<code>writing-mode</code>属性值为<code>tb</code>(top to bottom)，可以将文本上下排列。</p>\n<h2 id=\"5-文本路径\"><a href=\"#5-文本路径\" class=\"headerlink\" title=\"5. 文本路径\"></a>5. 文本路径</h2><p>如果要使得文本沿着某条路径排列，则需要使用<code>textPath</code>元素。需要将文本放在<code>textPath</code>元素内部，然后使用<code>textPath</code>元素的<code>xlink:href</code>属性引用一个定义好的<code>path</code>元素。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(10,50)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textPath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\thello world\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textPath</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(10,100)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textPath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text-anchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\thello world\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textPath</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.6.jpg\" alt=\"img\"></p>\n<p><code>startOffset</code>属性用来指定文本的起点，当设置为<code>50%</code>，并且设置<code>text-anchor</code>为<code>middle</code>时，文本会被定为在<code>path</code>的中间。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、入门指南\"><a href=\"#一、入门指南\" class=\"headerlink\" title=\"一、入门指南\"></a>一、入门指南</h2><h3 id=\"1-图形系统\"><a href=\"#1-图形系统\" class=\"headerlink\" title=\"1. 图形系统\"></a>1. 图形系统</h3><p>计算机中描述图形信息的两大图形系统：栅格图形和矢量图形。栅格图形中图形被表示为图片元素或者像素的长方形数组。矢量图形中图形被描述为一系列几何形状，通过矢量图形阅读器在指定的坐标集上绘制形状。</p>\n<h3 id=\"2-SVG-Scalable-Vector-Graphics\"><a href=\"#2-SVG-Scalable-Vector-Graphics\" class=\"headerlink\" title=\"2. SVG(Scalable Vector Graphics)\"></a>2. SVG(Scalable Vector Graphics)</h3><p>SVG<code>是一种</code>XML<code>应用，用来表示矢量图形。所有的图形有关信息被存储为纯文本，具有XML的开放性、可移植性和可交互性。当前稳定的</code>XML<code>和</code>SVG<code>版本都为</code>1.1</p>\n<p>SVG文档结构是标准的 <code>XML</code> 文档，根元素 <code>svg</code> 定义图形的大小，根元素中包含各种的形状元素。<code>SVG</code> 允许使用单独的属性指定元素的样式。</p>\n<p><code>SVG</code> 使用 <code>g</code> 元素对图形进行分组，使用 <code>use</code> 元素实现元素的复用。</p>\n<h2 id=\"二、在网页中使用\"><a href=\"#二、在网页中使用\" class=\"headerlink\" title=\"二、在网页中使用\"></a>二、在网页中使用</h2><h3 id=\"1-将SVG作为图像\"><a href=\"#1-将SVG作为图像\" class=\"headerlink\" title=\"1. 将SVG作为图像\"></a>1. 将SVG作为图像</h3><p>将 <code>svg</code> 作为图像包含在HTML标记的 <code>img</code> 元素内，但是这样有一定的局限性：</p>\n<p><strong><code>SVG</code>转为栅格图像时与主页面分离，并且无法在两者之间通信( <code>SVG</code> 渲染过程与主页面独立)。主页面上的样式对 <code>SVG</code> 无效，运行在主页面上的脚本无法感知或者修改 <code>SVG</code> 文档结构。</strong></p>\n<p>在 <code>CSS</code> 中包含 <code>SVG</code>，最常用的是 <code>background-image</code> 属性，应该避免 <code>SVG</code> 元素文件太大。</p>\n<h3 id=\"2-将SVG作为应用程序\"><a href=\"#2-将SVG作为应用程序\" class=\"headerlink\" title=\"2. 将SVG作为应用程序\"></a>2. 将SVG作为应用程序</h3><p>使用 <code>object</code> 元素将 <code>SVG</code> 嵌入 <code>HTML</code> 文档中，<code>object</code>元素的 <code>type</code> 属性表示要嵌入的文档类型，对用 <code>SVG</code> 应该是<code>type=&quot;image/svg+xml&quot;</code>。<code>object</code> 元素必须有起始标签和结束标签，这两个标签之间的内容为对象数据本身不能被渲染时显示。</p>\n<h2 id=\"三、坐标系统\"><a href=\"#三、坐标系统\" class=\"headerlink\" title=\"三、坐标系统\"></a>三、坐标系统</h2><h3 id=\"1-视口\"><a href=\"#1-视口\" class=\"headerlink\" title=\"1. 视口\"></a>1. 视口</h3><p>视口是指文档打算使用的画布区域。在 <code>svg</code> 元素上使用 <code>width</code> 和 <code>height</code> 属性确定视口的大小，属性值可以仅仅是为数字也可以为带单位的数字(单位可以为<code>em</code>、<code>ex</code>、<code>px</code>、<code>pt</code>、<code>pc</code>、<code>cm</code>、<code>mm</code> 和 <code>in</code>)也可以为百分比。</p>\n<h3 id=\"2-默认用户坐标\"><a href=\"#2-默认用户坐标\" class=\"headerlink\" title=\"2. 默认用户坐标\"></a>2. 默认用户坐标</h3><p><code>SVG</code> 阅读器会设置一个坐标系统，即原点 <code>(0,0)</code> 位于视口的左上角，<code>x</code> 向右递增，<code>y</code> 向下递增。这个坐标系统是一个纯粹的几何系统，点没有大小，网格线被认为是无限细。</p>\n<p>在 <code>SVG</code> 中指定单位并不会影响其他元素中给定单位的坐标，也就是说 <code>SVG</code> 文档中各个元素的单位可以不统一。</p>\n<h3 id=\"3-指定用户坐标\"><a href=\"#3-指定用户坐标\" class=\"headerlink\" title=\"3. 指定用户坐标\"></a>3. 指定用户坐标</h3><p>摒弃阅读器设置的默认用户坐标，可以自己为视口设置一个用户坐标。通过在 <code>svg</code> 元素上设置 <code>viewBox</code> 属性。</p>\n<p><code>viewBox</code> 属性由 <code>4</code> 个数值组成，分别代表要叠加在视口上的最小 <code>x</code>、最小 <code>y</code>，宽度、高度。</p>\n<p>既然可以对 <code>svg</code> 自定义用户坐标，那么肯定要解决 <code>svg</code> 视口长宽比例和 <code>viewBox</code> 定义的长宽比例不同的问题以及如何对齐问题。这个时候就需要 <code>preserveAspectRatio</code> 属性了。</p>\n<p>如果 <code>viewBox</code> 的长宽比例与视口的长宽比例不同，那么 <code>svg</code> 可以有以下三种选择：</p>\n<ul>\n<li>按较小的尺寸等比例缩放图形，使图形完全填充视口</li>\n<li>按较大的尺寸等比例缩放图形，病裁减掉超出视口的部分</li>\n<li>拉伸和压缩绘图以使其恰好填充视口</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">preserveAspectRatio&#96; 属性允许指定被缩放的图形相对视口的对齐方式,格式为 &#96;preserveAspectRatio &#x3D; &quot;alignment[meet|slice]&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>默认值为 <code>&quot;xMidYMid meet&quot;</code></p>\n<p><code>alignment</code>指定轴和位置，<code>x</code> 和 <code>y</code> 方向都有 <code>min</code>, <code>mid</code>, <code>max</code> 三种方式，分别表示 <code>x</code> 和 <code>y</code> 方向的对齐方式，对齐方式由 <code>x</code> 和 <code>y</code> 组合指定，共 <code>9</code> 中方式，也就是 <code>alignment</code> 共有如下 <code>9</code> 个取值：</p>\n<table>\n<thead>\n<tr>\n<th>y\\x</th>\n<th>xMin</th>\n<th>xMid</th>\n<th>xMax</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>yMin</strong></td>\n<td>xMinYMin</td>\n<td>xMidYMin</td>\n<td>xMaxYMin</td>\n</tr>\n<tr>\n<td><strong>yMid</strong></td>\n<td>xMinYMid</td>\n<td>xMidYMid</td>\n<td>xMaxYMid</td>\n</tr>\n<tr>\n<td><strong>yMax</strong></td>\n<td>xMinYMax</td>\n<td>xMidYMax</td>\n<td>xMaxYMax</td>\n</tr>\n</tbody></table>\n<p><code>meet</code> 说明符在图形超出视口时候会对图形适当缩小调整适配可用的空间</p>\n<p><code>slice</code> 说明符直接裁剪超出视口的部分</p>\n<p>除了上述操作之外，还可以指定 <code>preserveAspectRatio=&quot;none&quot;</code>，用于在 <code>viewBox</code> 和视口宽高比不同时缩放图像，此时图像不会被等比例缩放，会被拉伸、挤压、变形。</p>\n<h3 id=\"4-嵌套坐标系统\"><a href=\"#4-嵌套坐标系统\" class=\"headerlink\" title=\"4. 嵌套坐标系统\"></a>4. 嵌套坐标系统</h3><p>可以将另一个 <code>svg</code> 元素插入到文档中来建立一个新的视口和坐标系统，也就是说 <code>svg</code> 中可以嵌套另一个 <code>svg</code>，每个 <code>svg</code> 都有自己独立的视口和坐标系统</p>\n<h2 id=\"四、基本形状\"><a href=\"#四、基本形状\" class=\"headerlink\" title=\"四、基本形状\"></a>四、基本形状</h2><h3 id=\"1-线段\"><a href=\"#1-线段\" class=\"headerlink\" title=\"1. 线段\"></a>1. 线段</h3><p><code>line</code> 元素，使用 <code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code> 属性指定线段的起止点坐标。有如下特性:</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>stroke-width</code></td>\n<td>笔画宽度，坐标网格线位于笔画的正中间，可以使用 <code>css</code> 的 <code>shape-rendering</code> 值来控制反锯齿特性</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>笔画颜色</td>\n</tr>\n<tr>\n<td><code>stroke-opacity</code></td>\n<td>线条的不透明度</td>\n</tr>\n<tr>\n<td><code>stroke-dasharray</code></td>\n<td>虚线，由一系列数字组成，数字个数为偶数(负责会自动重复一遍使其为偶数),表示线长-间隙-线长-间隙…</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-矩形\"><a href=\"#2-矩形\" class=\"headerlink\" title=\"2. 矩形\"></a>2. 矩形</h3><p><code>rect</code>元素，使用<code>x</code>,<code>y</code>,<code>width</code>,<code>height</code>表示一个矩形</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度，边框是骑在矩形边界上的，一半在矩形外，一半在矩形内</td>\n</tr>\n<tr>\n<td><code>rx</code>/<code>ry</code></td>\n<td>圆角矩形，最大值为矩形宽/高的一半，如果只指定了一个，则认为两个都为相同的值</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-圆和椭圆\"><a href=\"#3-圆和椭圆\" class=\"headerlink\" title=\"3. 圆和椭圆\"></a>3. 圆和椭圆</h3><p><code>circle</code> 元素表示圆,由 <code>cx</code>,<code>cy</code>,<code>r</code> 属性界定 <code>ellipse</code> 元素表示椭圆,由 <code>cx</code>,<code>cy</code>,<code>rx</code>,<code>ry</code> 界定</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度，边框是骑在圆的边界上的，一半在圆/椭圆外，一半在圆/椭圆内</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-多边形\"><a href=\"#4-多边形\" class=\"headerlink\" title=\"4. 多边形\"></a>4. 多边形</h3><p><code>polygon</code> 元素指定一个多边形,由 <code>points</code> 属性指定的一系列坐标点界定，会自动封闭</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fill</code></td>\n<td>填充颜色</td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>stroke</code></td>\n<td>边框颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>边框宽度</td>\n</tr>\n<tr>\n<td><code>fill-rule</code></td>\n<td>填充规则，如果多边形的边有交叉时，需要指定，可以取 <code>mozero</code>(默认)和 <code>evenodd</code> 两个值。</td>\n</tr>\n</tbody></table>\n<p><code>fill-rule</code> 值为 <code>nonzero</code> 时的原理:判断一个点是在多边形内部还是外部时，从这个点画一条到无穷远的射线，然后数这个线和多边形的边有多少次交叉。如果交叉的边线是从右往左画，则总数加 <code>1</code>，如果是从左往右则总数减 <code>1</code>. 如果最后总数为 <code>0</code> 则认为改点在图形外部，否则在内部。</p>\n<p><code>fill-rule</code> 值为 <code>evenodd</code> 时只数射线与多边形边的交叉次数，如果为奇数则认为在多边形内部，否则认为在多边形外部。</p>\n<h3 id=\"5-折线\"><a href=\"#5-折线\" class=\"headerlink\" title=\"5. 折线\"></a>5. 折线</h3><p><code>polyline</code> 元素表示一个折线，使用 <code>points</code> 属性指定一系列点，不自动封闭图形。</p>\n<h3 id=\"6-特性总结\"><a href=\"#6-特性总结\" class=\"headerlink\" title=\"6. 特性总结\"></a>6. 特性总结</h3><table>\n<thead>\n<tr>\n<th>特性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>stroke</code></td>\n<td>笔画颜色</td>\n</tr>\n<tr>\n<td><code>stroke-width</code></td>\n<td>笔画宽度</td>\n</tr>\n<tr>\n<td><code>stroke-opacity</code></td>\n<td>笔画不透明度</td>\n</tr>\n<tr>\n<td><code>stroke-dasharray</code></td>\n<td>虚线笔画</td>\n</tr>\n<tr>\n<td><code>stroke-linecap</code></td>\n<td>笔画头的形状 <code>butt</code>(默认),<code>round</code>,<code>square</code></td>\n</tr>\n<tr>\n<td><code>stroke-linejoin</code></td>\n<td>图形棱角，有<code>miter</code>(默认),<code>round</code>和<code>bevel</code>三个取值</td>\n</tr>\n<tr>\n<td><code>stroke-miterlimit</code></td>\n<td>相交处显示宽度与线宽的最大比例，默认为<code>4</code></td>\n</tr>\n<tr>\n<td><code>fill</code></td>\n<td>填充颜色 默认<code>black</code></td>\n</tr>\n<tr>\n<td><code>fill-opacity</code></td>\n<td>填充不透明度</td>\n</tr>\n<tr>\n<td><code>fill-rule</code></td>\n<td>填充规则</td>\n</tr>\n</tbody></table>\n<h2 id=\"五、文档结构\"><a href=\"#五、文档结构\" class=\"headerlink\" title=\"五、文档结构\"></a>五、文档结构</h2><h3 id=\"1-结构和表现\"><a href=\"#1-结构和表现\" class=\"headerlink\" title=\"1. 结构和表现\"></a>1. 结构和表现</h3><p><code>SVG</code> 允许文档表现和文档结构分离，<code>SVG</code> 支持四种方式指定表现信息：内联样式、内部样式表、外部样式表以及表现属性</p>\n<table>\n<thead>\n<tr>\n<th>表现方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内联样式</td>\n<td>元素内部使用 <code>style</code> 属性</td>\n</tr>\n<tr>\n<td>内部样式表</td>\n<td>内部样式定义在 <code>defs</code> 元素内部</td>\n</tr>\n<tr>\n<td>外部样式表</td>\n<td>与 <code>html</code> 类似，将样式定义在 <code>css</code> 文件中，使用选择器来设置相应的元素样式</td>\n</tr>\n<tr>\n<td>表现属性</td>\n<td><code>SVG</code> 允许以属性的形式指定表现样式，但是<strong>表现属性的优先级最低</strong>，如果以其他三种形式指定了相同的样式属性，则将覆盖通过表现属性指定的样式</td>\n</tr>\n</tbody></table>\n<p>内部样式表示例：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;svg width=\"200px\" height=\"200px\" xmlns=\"http://www.w3.org/2000/svg>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[\n            circle&#123;\n                fill:#ccc\n            &#125;\n        ]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-分组和引用\"><a href=\"#2-分组和引用\" class=\"headerlink\" title=\"2. 分组和引用\"></a>2. 分组和引用</h3><p><code>g</code> 元素用来将其子元素作为一个组合，可以使文档结构更清晰。除此之外，在g标签中指定的所有样式会应用于组合内的所有子元素，可以不用在所有子元素上指定属性。</p>\n<p><code>use</code> 元素用来复用图形中重复出现的元素，需要为 <code>use</code> 标签的 <code>xlink:href</code> 指定 <code>URI</code> 来引用指定的图形元素。同时还要指定<code>x</code>和<code>y</code>属性以表示组合应该移动到哪个位置。<code>use</code>元素并不限制只能使用同一个文件内的对象，<code>xlink:href</code>属性可以指定任何有效的文件或<code>URI</code>。</p>\n<p><code>defs</code>元素用来定义复用的元素，但是定义在<code>defs</code>内的元素并不会被显示，而是作为模板供其他地方使用。</p>\n<p><code>symbol</code>元素与g元素不同，<code>symbol</code>永远不会被显示，也可以用来指定被后续使用的元素，<code>symbol</code>元素可以指定 <code>viewBox</code> 和<code>preserveAspectRatio</code> 属性。在引用时通过为 <code>use</code> 元素指定 <code>width</code> 和 <code>height</code> 属性就可以让 <code>symbol</code> 元素适配视口大小。</p>\n<p><code>image</code> 可以用来包含一个完整的 <code>SVG</code> 或栅格文件。如果包含一个 <code>SVG</code> 文件，则视口会基于引用的文件的 <code>x</code>,<code>y</code>,<code>width</code>,<code>height</code> 属性来建立。如果包含栅格文件则会被缩放以适配该属性指定的矩形。</p>\n<p><code>SVG</code>规范要求 <code>SVG</code> 阅读器支持 <code>JPEG</code> 和 <code>PNG</code> 两种栅格文件。</p>\n<h2 id=\"六、坐标系统变换\"><a href=\"#六、坐标系统变换\" class=\"headerlink\" title=\"六、坐标系统变换\"></a>六、坐标系统变换</h2><h3 id=\"1-translate变换\"><a href=\"#1-translate变换\" class=\"headerlink\" title=\"1. translate变换\"></a>1. translate变换</h3><p><code>translate</code> 变换用来对用户坐标进行平移，通过制定 <code>transform</code> 属性值来设置: <code>transform = &quot;translate(x,y)&quot;</code>。</p>\n<p><code>translate</code> 工作原理:首先获取整个网络，然后将其移动到画布的新位置而不是移动所在的元素，也就是说移动的是整个坐标系统而不是元素本身。看似比移动元素复杂，其实在使用其他一系列变换时，这种移动整个坐标系的方法从数学和概念上讲，更方便。</p>\n<h3 id=\"2-scale变换\"><a href=\"#2-scale变换\" class=\"headerlink\" title=\"2. scale变换\"></a>2. scale变换</h3><p>缩放坐标系统。<code>transform = &quot;scale(value)&quot;</code> 或者 <code>transform=&quot;scale(x-value,y-value)&quot;</code>。</p>\n<p>仅仅使用 <code>scale(n)</code> 变换时，网格系统的原点位置并没有变化，只是每个用户坐标都变成了原来的 <code>n</code> 倍，也就是网格变大了，因此线也会变粗(用户单位并没有变)。</p>\n<p><em>技巧：如果从其他系统传输数据到 <code>SVG</code>，则可能必须处理使用笛卡尔坐标表示的矢量图形，在笛卡尔坐标系统中，原点位于左下角，<code>y</code>向上递增，<code>x</code>向右递增。而 <code>SVG</code> 坐标原点位于左上角，此时使用 <code>scale(1,-1)</code> 就可以完成两者之间的转换。</em></p>\n<p><strong>缩放变换永远不会改变图形对象的网格坐标或者笔画宽度，仅仅改变对应画布上的坐标系统网格的大小。</strong></p>\n<h3 id=\"3-rotate变换\"><a href=\"#3-rotate变换\" class=\"headerlink\" title=\"3. rotate变换\"></a>3. rotate变换</h3><p>根据指定的角度旋转坐标系统，默认的坐标系统中，角度的测量顺时针增加，<code>0</code> 度为 <code>3</code> 点钟方向。</p>\n<p>注意，除非另行指定，否则旋转以原点为中心。 此时可以通过平移+旋转的方式来指定旋转中心： <code>translate(centerX,centerY) rotate(angle) translate(-centerX,-centerY)</code></p>\n<p>但是有个更简单的方式：<code>rotate(angle,centerX,centerY)</code></p>\n<h3 id=\"4-围绕中心点缩放\"><a href=\"#4-围绕中心点缩放\" class=\"headerlink\" title=\"4. 围绕中心点缩放\"></a>4. 围绕中心点缩放</h3><p>上面提到，缩放默认是以原点为基准的，这显然不能满足需求，那么可以通过如下方式指定缩放中心：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">translate(-centerX*(factor-1),-centerY*(factor-1)) scale(factor)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"5-skewX和skewY变换\"><a href=\"#5-skewX和skewY变换\" class=\"headerlink\" title=\"5. skewX和skewY变换\"></a>5. skewX和skewY变换</h3><p>这两个变换用来倾斜某个轴，一般形式为 <code>skewX(angle),skewY(angle)</code>。这样的结果就是使得 <code>x</code> 轴和 <code>y</code> 轴不再垂直。</p>\n<h3 id=\"6-矩阵变换\"><a href=\"#6-矩阵变换\" class=\"headerlink\" title=\"6. 矩阵变换\"></a>6. 矩阵变换</h3><p>计算机图形学中坐标变换都通过矩阵来实现，除上述变换方法之外，还可以直接为变换指定变换矩阵，变换矩阵为 <code>matrix(a,b,c,d,e,f)</code>，此时指定的变换矩阵为:</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">a  c  e\nb  d  f\n0  0  1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"七、路径\"><a href=\"#七、路径\" class=\"headerlink\" title=\"七、路径\"></a>七、路径</h2><h3 id=\"1-path命令\"><a href=\"#1-path命令\" class=\"headerlink\" title=\"1. path命令\"></a>1. path命令</h3><p><code>SVG</code> 中所有基本形状都是 <code>path</code> 的简写形式，但是建议使用简写形式，因为这样可以使 <code>SVG</code> 文档更可读。</p>\n<p><code>path</code> 元素更通用，可以通过制定一系列相互连接的线、弧、曲线来绘制任意形状的轮廓，这些轮廓也可以填充或者绘制轮廓线，也可以用来定义裁剪区域或蒙版。</p>\n<p>下表为 <code>path</code> 命令总结，其中大写表示绝对坐标，小写表示相对坐标：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>M</code> <code>m</code></td>\n<td><code>x y</code></td>\n<td>移动画笔到制定坐标</td>\n</tr>\n<tr>\n<td><code>L</code> <code>l</code></td>\n<td><code>x y</code></td>\n<td>绘制一条到给定坐标的线</td>\n</tr>\n<tr>\n<td><code>H</code> <code>h</code></td>\n<td><code>x</code></td>\n<td>绘制一条到给定 <code>x</code> 坐标的横线</td>\n</tr>\n<tr>\n<td><code>V</code> <code>v</code></td>\n<td><code>y</code></td>\n<td>绘制一条到给定<code>y</code>坐标的垂线</td>\n</tr>\n<tr>\n<td><code>A</code> <code>a</code></td>\n<td><code>rx ry x-axis-rotation large-arc sweep x y</code></td>\n<td>圆弧曲线命令有7个参数，依次表示<code>x</code>方向半径、<code>y</code>方向半径、旋转角度、大圆标识、顺逆时针标识、目标点<code>x</code>、目标点<code>y</code>。大圆标识和顺逆时针以<code>0</code>和<code>1</code>表示。<code>0</code>表示小圆、逆时针</td>\n</tr>\n<tr>\n<td><code>Q</code> <code>q</code></td>\n<td><code>x1 y1 x y</code></td>\n<td>绘制一条从当前点到<code>x, y</code>控制点为<code>x1, y1</code>的二次贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>T</code> <code>t</code></td>\n<td><code>x y</code></td>\n<td>绘制一条从当前点到<code>x</code>,<code>y</code>的光滑二次贝塞尔曲线，控制点为前一个<code>Q</code>命令的控制点的中心对称点，如果没有前一条则已当前点为控制点。</td>\n</tr>\n<tr>\n<td><code>C</code> <code>c</code></td>\n<td><code>x1 y1 x2 y2 x y</code></td>\n<td>绘制一条从当前点到 <code>x</code>,<code>y</code>控制点为<code>x1,y1</code> <code>x2,y2</code>的三次贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>S</code> <code>s</code></td>\n<td><code>x2 y2 x y</code></td>\n<td>绘制一条从当前点到<code>x,y</code>的光滑三次贝塞尔曲线。第一个控制点为前一个<code>C</code>命令的第二个控制点的中心对称点，如果没有前一条曲线，则第一个控制点为当前的点。</td>\n</tr>\n</tbody></table>\n<p>路径的填充同样可以使用 <code>fill-rule</code> 属性指定填充规则，如果需要填充一个中空的形状，则只需要注意外侧路径顺逆时针方向和内侧空心区域顺逆时针方向即可。</p>\n<h2 id=\"八、渐变\"><a href=\"#八、渐变\" class=\"headerlink\" title=\"八、渐变\"></a>八、渐变</h2><h3 id=\"1-线性渐变\"><a href=\"#1-线性渐变\" class=\"headerlink\" title=\"1. 线性渐变\"></a>1. 线性渐变</h3><p>线性渐变是一系列颜色沿着一条直线过渡，在特定的位置指定想要的颜色，被称为渐变点。渐变点是渐变结构的一部分，颜色是表现的一部分。</p>\n<p>线性渐变使用<code>linearGradient</code>元素表示：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>linearGradient</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>linear<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#ffcc00;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#0099cc;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>linearGradient</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:url(#linear);stroke:black;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.4.jpg\" alt=\"img\"></p>\n<p><code>stop</code>元素有两个必要属性：<code>offset</code>和<code>stop-color</code>。<code>offset</code>属性用来指定在哪个点的颜色应该等于<code>stop-color</code>。<code>offset</code>的取值范围0%-100%。</p>\n<p><code>stop</code>元素的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>offset</code></td>\n<td>必需，取值范围 <code>0%-100%</code></td>\n</tr>\n<tr>\n<td><code>stop-color</code></td>\n<td>必需，对应 <code>offset</code> 位置点的颜色</td>\n</tr>\n<tr>\n<td><code>stop-opacity</code></td>\n<td>对应 <code>offset</code> 位置点的不透明度</td>\n</tr>\n</tbody></table>\n<p><code>linearGradient</code>元素属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>x1</code>,<code>y1</code></td>\n<td>渐变的起点位置，使用百分比表示，默认的渐变方向是从左到右</td>\n</tr>\n<tr>\n<td><code>x2</code>,<code>y2</code></td>\n<td>渐变的终点位置，使用百分比表示</td>\n</tr>\n<tr>\n<td><code>spreadMethod</code></td>\n<td>如果设置的<code>offset</code>不能覆盖整个对象，该怎么填充。<code>pad</code>: 起点或终点颜色会扩展到对象边缘。<code>repeat</code>: 渐变重复起点到终点的过程。<code>reflect</code>: 渐变按终点-起点-终点的排列重复。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-径向渐变\"><a href=\"#2-径向渐变\" class=\"headerlink\" title=\"2. 径向渐变\"></a>2. 径向渐变</h3><p>径向渐变的每个渐变点是一个圆形路径，从中心点向外扩散。设置方式与线性渐变大致相同。如果填充对象边界框不是正方形的，则过渡路径会变成椭圆来匹配边界框的长宽比。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>radialGradient</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radial<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#f00;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#0f0;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">offset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stop-color:#00f;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>stop</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>radialGradient</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:url(#radial);stroke:black;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rect</span><span class=\"token punctuation\">></span></span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.5.jpg\" alt=\"img\"></p>\n<p><code>radialGradient</code>元素属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>cx</code>,<code>cy</code>,<code>r</code></td>\n<td>定义渐变的范围，测量半径的单位是对象的宽高均值，而不是对角线，默认都为<code>50%</code></td>\n</tr>\n<tr>\n<td><code>fx</code>,<code>fy</code></td>\n<td><code>0%</code>点所处的圆路径的圆心，默认和<code>cx</code>,<code>cy</code>一样</td>\n</tr>\n<tr>\n<td><code>spreadMethod</code></td>\n<td><code>pad</code>,<code>repeat</code>,<code>reflect</code> 三个值，用来解决绘制范围没有到达图形边缘的情况。</td>\n</tr>\n</tbody></table>\n<h2 id=\"九、文本\"><a href=\"#九、文本\" class=\"headerlink\" title=\"九、文本\"></a>九、文本</h2><h3 id=\"1-相关术语\"><a href=\"#1-相关术语\" class=\"headerlink\" title=\"1. 相关术语\"></a>1. 相关术语</h3><table>\n<thead>\n<tr>\n<th>术语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符</td>\n<td><code>XML</code>中，字符是指带有一个数字值得一个或多个字节，数字值与<code>Unidode</code>标准对应</td>\n</tr>\n<tr>\n<td>符号</td>\n<td>字符的视觉呈现。每个字符可以有多种视觉呈现</td>\n</tr>\n<tr>\n<td>字体</td>\n<td>代表某个字符集合的一组符号</td>\n</tr>\n<tr>\n<td>基线</td>\n<td>字体中所有符号以基线对齐</td>\n</tr>\n<tr>\n<td>上坡度</td>\n<td>基线到字体中最高字符的顶部距离</td>\n</tr>\n<tr>\n<td>下坡度</td>\n<td>基线到最深字符底部的距离</td>\n</tr>\n<tr>\n<td>大写字母高度、<code>x</code>高度</td>\n<td>大写字母高度是指基线上大写字母的高度，<code>x</code>高度是基线到小写字母<code>x</code>顶部的高度</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-文本元素的基本属性\"><a href=\"#2-文本元素的基本属性\" class=\"headerlink\" title=\"2. 文本元素的基本属性\"></a>2. 文本元素的基本属性</h3><p><code>text</code> 元素以指定的x和y值作为元素内容第一个字符的基线位置，默认样式黑色填充、没有轮廓。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>font-family</code></td>\n<td>以空格分割的一系列字体名称或通用字体名称</td>\n</tr>\n<tr>\n<td><code>font-size</code></td>\n<td>如果有多行文本，则 <code>font-size</code> 为平行的两条基线的距离</td>\n</tr>\n<tr>\n<td><code>font-weight</code></td>\n<td>两个值：<code>bold</code>(粗体)和<code>nromal</code>(默认)</td>\n</tr>\n<tr>\n<td><code>font-style</code></td>\n<td>常用的两个值:<code>italic</code>(斜体)和<code>normal</code></td>\n</tr>\n<tr>\n<td><code>text-decoration</code></td>\n<td>可能的值:<code>none</code>,<code>underline</code>(下划线),<code>overline</code>(上划线),<code>line-through</code>(删除线)</td>\n</tr>\n<tr>\n<td><code>word-spacing</code></td>\n<td>单词之间的距离</td>\n</tr>\n<tr>\n<td><code>letter-spacing</code></td>\n<td>字母之间的间距</td>\n</tr>\n<tr>\n<td><code>text-anchor</code></td>\n<td>对齐方式：<code>start</code>,<code>middle</code>,<code>end</code></td>\n</tr>\n<tr>\n<td><code>textLength</code></td>\n<td>设置文本的长度</td>\n</tr>\n<tr>\n<td><code>lengthAdjust</code></td>\n<td>在指定了<code>textLength</code>时，可以通过<code>lengthAdjust</code>属性设置字符的调整方式，值为 <code>spacing</code>(默认)时,只调整字符的间距。当值为<code>spacingAndGlyphs</code>时，同时调整字符间距和字符本身的大小</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-tspan元素\"><a href=\"#3-tspan元素\" class=\"headerlink\" title=\"3. tspan元素\"></a>3. tspan元素</h3><p><code>text</code> 元素无法对文本进行换行操作，如果需要分行显示文本，则需要使用在text元素里嵌入<code>tspan</code> 元素。<code>tspan</code> 元素与<code>html</code>的<code>span</code>元素类似，可以嵌套在文本内容中，并可以单独改变其内部文本内容的样式。</p>\n<p><code>tspan</code>元素除大小，颜色等表现样式之外，还可以设置以下属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>dx</code>,<code>dy</code></td>\n<td><code>x</code>和<code>y</code>方向的偏移</td>\n</tr>\n<tr>\n<td><code>x</code>,<code>y</code></td>\n<td>对<code>tspan</code>进行绝对定位</td>\n</tr>\n<tr>\n<td><code>rotate</code></td>\n<td>旋转字符，可以同时设置多个值，这些值会依次作用在<code>tspan</code>包裹的字母上</td>\n</tr>\n<tr>\n<td><code>baseline-shift</code></td>\n<td>与<code>dy</code>属性设置上下标相比，这个属性更方便，当为<code>super</code>时，会上标。<code>sub</code> 时为下标。仅仅在所在的<code>tspan</code>内有效</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-纵向文本\"><a href=\"#4-纵向文本\" class=\"headerlink\" title=\"4. 纵向文本\"></a>4. 纵向文本</h3><p>文本一般从左到右排列，如果需要上下排列，则需要使用<code>writing-mode</code>属性。</p>\n<p>设置<code>writing-mode</code>属性值为<code>tb</code>(top to bottom)，可以将文本上下排列。</p>\n<h2 id=\"5-文本路径\"><a href=\"#5-文本路径\" class=\"headerlink\" title=\"5. 文本路径\"></a>5. 文本路径</h2><p>如果要使得文本沿着某条路径排列，则需要使用<code>textPath</code>元素。需要将文本放在<code>textPath</code>元素内部，然后使用<code>textPath</code>元素的<code>xlink:href</code>属性引用一个定义好的<code>path</code>元素。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defs</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defs</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(10,50)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textPath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\thello world\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textPath</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">transform</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>translate(10,100)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">d</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>M30 40 C 50 10 ,70 10,120 40 S150 0,200 40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill:none;stroke:black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>text</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textPath</span> <span class=\"token attr-name\"><span class=\"token namespace\">xlink:</span>href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#path<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text-anchor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\t\thello world\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textPath</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>text</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://cdn.d3js.org.cn/images/doc/svg/8.6.jpg\" alt=\"img\"></p>\n<p><code>startOffset</code>属性用来指定文本的起点，当设置为<code>50%</code>，并且设置<code>text-anchor</code>为<code>middle</code>时，文本会被定为在<code>path</code>的中间。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckuq9v3p20001gxuqcqh08a67","category_id":"ckuq9v3pa0004gxuq7erxdrxl","_id":"ckuq9v3pf000cgxuq0u85gyz0"},{"post_id":"ckuq9v3p80003gxuqf2ds51p9","category_id":"ckuq9v3pa0004gxuq7erxdrxl","_id":"ckuq9v3pf000egxuqa64zdb27"},{"post_id":"ckuq9v3ph000ggxuq94gs1ul1","category_id":"ckuq9v3pa0004gxuq7erxdrxl","_id":"ckuq9v3pi000jgxuq8azb708p"},{"post_id":"ckuq9v3pg000fgxuqccv0hwg8","category_id":"ckuq9v3ph000hgxuq4avi7co3","_id":"ckuq9v3pj000mgxuq1h60gau1"}],"PostTag":[{"post_id":"ckuq9v3p20001gxuqcqh08a67","tag_id":"ckuq9v3pb0005gxuq37imddzn","_id":"ckuq9v3pe000bgxuq149hepyq"},{"post_id":"ckuq9v3p80003gxuqf2ds51p9","tag_id":"ckuq9v3pd000agxuqdp96eews","_id":"ckuq9v3pf000dgxuqfz3e4h0h"},{"post_id":"ckuq9v3pg000fgxuqccv0hwg8","tag_id":"ckuq9v3pi000igxuq7ykhh2yi","_id":"ckuq9v3pj000lgxuqdzbo54vs"},{"post_id":"ckuq9v3ph000ggxuq94gs1ul1","tag_id":"ckuq9v3pi000kgxuq3ozi9oez","_id":"ckuq9v3pj000ngxuq1gt19ah5"}],"Tag":[{"name":"d3js","_id":"ckuq9v3pb0005gxuq37imddzn"},{"name":"echarts","_id":"ckuq9v3pd000agxuqdp96eews"},{"name":"react","_id":"ckuq9v3pi000igxuq7ykhh2yi"},{"name":"svg","_id":"ckuq9v3pi000kgxuq3ozi9oez"}]}}